
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a758  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  0800a868  0800a868  0000b868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b628  0800b628  0000d280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b628  0800b628  0000c628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b630  0800b630  0000d280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b634  0800b634  0000c634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800b638  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000280  0800b8b8  0000d280  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800b8b8  0000d8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009103  00000000  00000000  0000d2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f1  00000000  00000000  000163ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  000184a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000714  00000000  00000000  00018e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018162  00000000  00000000  00019524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec62  00000000  00000000  00031686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085aa0  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5d88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c9c  00000000  00000000  000c5dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000c9a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a850 	.word	0x0800a850

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	0800a850 	.word	0x0800a850

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_GPIO_Init+0x9c>)
 800111a:	f001 fec3 	bl	8002ea4 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40010c00 	.word	0x40010c00

08001130 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f002 f835 	bl	80031dc <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 f986 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000029c 	.word	0x2000029c
 8001184:	40005400 	.word	0x40005400
 8001188:	00061a80 	.word	0x00061a80

0800118c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_I2C2_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011ca:	f002 f807 	bl	80031dc <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f958 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002f0 	.word	0x200002f0
 80011e0:	40005800 	.word	0x40005800
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2b      	ldr	r2, [pc, #172]	@ (80012b0 <HAL_I2C_MspInit+0xc8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d124      	bne.n	8001252 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a29      	ldr	r2, [pc, #164]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001220:	23c0      	movs	r3, #192	@ 0xc0
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001224:	2312      	movs	r3, #18
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4619      	mov	r1, r3
 8001232:	4821      	ldr	r0, [pc, #132]	@ (80012b8 <HAL_I2C_MspInit+0xd0>)
 8001234:	f001 fe36 	bl	8002ea4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800123e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001242:	61d3      	str	r3, [r2, #28]
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001250:	e029      	b.n	80012a6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <HAL_I2C_MspInit+0xd4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d124      	bne.n	80012a6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001274:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <HAL_I2C_MspInit+0xd0>)
 800128a:	f001 fe0b 	bl	8002ea4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40005800 	.word	0x40005800

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	@ 0xb0
 80012c4:	af14      	add	r7, sp, #80	@ 0x50

  /* USER CODE BEGIN 1 */
  MPU6050_t MPU6050;
  int currentScreen = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f001 fc81 	bl	8002bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f86f 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f7ff fedd 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d6:	f7ff ff2b 	bl	8001130 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012da:	f7ff ff57 	bl	800118c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c2) == 1);
 80012de:	bf00      	nop
 80012e0:	4832      	ldr	r0, [pc, #200]	@ (80013ac <main+0xec>)
 80012e2:	f000 f8d7 	bl	8001494 <MPU6050_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d0f9      	beq.n	80012e0 <main+0x20>
  ssd1306_Init();
 80012ec:	f000 fc96 	bl	8001c1c <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_All(&hi2c2, &MPU6050);
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	482d      	ldr	r0, [pc, #180]	@ (80013ac <main+0xec>)
 80012f6:	f000 f927 	bl	8001548 <MPU6050_Read_All>
	HAL_Delay (100);
 80012fa:	2064      	movs	r0, #100	@ 0x64
 80012fc:	f001 fcca 	bl	8002c94 <HAL_Delay>

	if (buttonPressed()) {
 8001300:	f000 f89c 	bl	800143c <buttonPressed>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <main+0x5a>
		currentScreen++;
 800130a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130c:	3301      	adds	r3, #1
 800130e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (currentScreen > 3) {
 8001310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001312:	2b03      	cmp	r3, #3
 8001314:	dd01      	ble.n	800131a <main+0x5a>
			currentScreen = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
	}

	ssd1306_Fill(Black);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 fce8 	bl	8001cf0 <ssd1306_Fill>
	switch(currentScreen){
 8001320:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001322:	2b03      	cmp	r3, #3
 8001324:	d83e      	bhi.n	80013a4 <main+0xe4>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <main+0x6c>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001359 	.word	0x08001359
 8001334:	08001375 	.word	0x08001375
 8001338:	0800138d 	.word	0x0800138d
		case 0:
			displayOrthogonalScreen(MPU6050, X);
 800133c:	2300      	movs	r3, #0
 800133e:	9312      	str	r3, [sp, #72]	@ 0x48
 8001340:	4668      	mov	r0, sp
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	2248      	movs	r2, #72	@ 0x48
 8001348:	4619      	mov	r1, r3
 800134a:	f004 fbe2 	bl	8005b12 <memcpy>
 800134e:	463b      	mov	r3, r7
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	f001 f883 	bl	800245c <displayOrthogonalScreen>
			break;
 8001356:	e025      	b.n	80013a4 <main+0xe4>
		case 1:
			displayOrthogonalScreen(MPU6050, Y);
 8001358:	2301      	movs	r3, #1
 800135a:	9312      	str	r3, [sp, #72]	@ 0x48
 800135c:	4668      	mov	r0, sp
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2248      	movs	r2, #72	@ 0x48
 8001364:	4619      	mov	r1, r3
 8001366:	f004 fbd4 	bl	8005b12 <memcpy>
 800136a:	463b      	mov	r3, r7
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	f001 f875 	bl	800245c <displayOrthogonalScreen>
			break;
 8001372:	e017      	b.n	80013a4 <main+0xe4>
		case 2:
			displayValuesScreen(MPU6050);
 8001374:	4668      	mov	r0, sp
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	2248      	movs	r2, #72	@ 0x48
 800137c:	4619      	mov	r1, r3
 800137e:	f004 fbc8 	bl	8005b12 <memcpy>
 8001382:	463b      	mov	r3, r7
 8001384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001386:	f001 fa97 	bl	80028b8 <displayValuesScreen>
			break;
 800138a:	e00b      	b.n	80013a4 <main+0xe4>
		case 3:
			displayCombinedScreen(MPU6050);
 800138c:	4668      	mov	r0, sp
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	2248      	movs	r2, #72	@ 0x48
 8001394:	4619      	mov	r1, r3
 8001396:	f004 fbbc 	bl	8005b12 <memcpy>
 800139a:	463b      	mov	r3, r7
 800139c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800139e:	f001 f851 	bl	8002444 <displayCombinedScreen>
			break;
 80013a2:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 80013a4:	f000 fcbc 	bl	8001d20 <ssd1306_UpdateScreen>
	MPU6050_Read_All(&hi2c2, &MPU6050);
 80013a8:	e7a2      	b.n	80012f0 <main+0x30>
 80013aa:	bf00      	nop
 80013ac:	200002f0 	.word	0x200002f0

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	@ 0x40
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	2228      	movs	r2, #40	@ 0x28
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fb19 	bl	80059f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 ff55 	bl	80042a8 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001404:	f000 f840 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2102      	movs	r1, #2
 8001422:	4618      	mov	r0, r3
 8001424:	f003 f9c2 	bl	80047ac <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800142e:	f000 f82b 	bl	8001488 <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3740      	adds	r7, #64	@ 0x40
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <buttonPressed>:

/* USER CODE BEGIN 4 */
int buttonPressed(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
    static uint8_t lastButtonState = GPIO_PIN_SET;
    uint8_t currentButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001442:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001446:	480e      	ldr	r0, [pc, #56]	@ (8001480 <buttonPressed+0x44>)
 8001448:	f001 feb0 	bl	80031ac <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]


    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <buttonPressed+0x48>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d10a      	bne.n	800146e <buttonPressed+0x32>
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <buttonPressed+0x32>
        HAL_Delay(BUTTON_DEBOUNCE_DELAY);
 800145e:	2032      	movs	r0, #50	@ 0x32
 8001460:	f001 fc18 	bl	8002c94 <HAL_Delay>
        lastButtonState = currentButtonState;
 8001464:	4a07      	ldr	r2, [pc, #28]	@ (8001484 <buttonPressed+0x48>)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	7013      	strb	r3, [r2, #0]
        return 1;
 800146a:	2301      	movs	r3, #1
 800146c:	e003      	b.n	8001476 <buttonPressed+0x3a>
    }

    lastButtonState = currentButtonState;
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <buttonPressed+0x48>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	7013      	strb	r3, [r2, #0]
    return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010c00 	.word	0x40010c00
 8001484:	20000000 	.word	0x20000000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <Error_Handler+0x8>

08001494 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	2301      	movs	r3, #1
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	f107 030f 	add.w	r3, r7, #15
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2275      	movs	r2, #117	@ 0x75
 80014ae:	21d0      	movs	r1, #208	@ 0xd0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f002 f8d1 	bl	8003658 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b68      	cmp	r3, #104	@ 0x68
 80014ba:	d13d      	bne.n	8001538 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014c0:	2364      	movs	r3, #100	@ 0x64
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2301      	movs	r3, #1
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	f107 030e 	add.w	r3, r7, #14
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	226b      	movs	r2, #107	@ 0x6b
 80014d2:	21d0      	movs	r1, #208	@ 0xd0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f001 ffc5 	bl	8003464 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80014da:	2307      	movs	r3, #7
 80014dc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80014de:	2364      	movs	r3, #100	@ 0x64
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2301      	movs	r3, #1
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	f107 030e 	add.w	r3, r7, #14
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2301      	movs	r3, #1
 80014ee:	2219      	movs	r2, #25
 80014f0:	21d0      	movs	r1, #208	@ 0xd0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f001 ffb6 	bl	8003464 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f107 030e 	add.w	r3, r7, #14
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	221c      	movs	r2, #28
 800150e:	21d0      	movs	r1, #208	@ 0xd0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 ffa7 	bl	8003464 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001516:	2300      	movs	r3, #0
 8001518:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800151a:	2364      	movs	r3, #100	@ 0x64
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2301      	movs	r3, #1
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f107 030e 	add.w	r3, r7, #14
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	221b      	movs	r2, #27
 800152c:	21d0      	movs	r1, #208	@ 0xd0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f001 ff98 	bl	8003464 <HAL_I2C_Mem_Write>
        return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <MPU6050_Init+0xa6>
    }
    return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	0000      	movs	r0, r0
 8001544:	0000      	movs	r0, r0
	...

08001548 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800154c:	b094      	sub	sp, #80	@ 0x50
 800154e:	af04      	add	r7, sp, #16
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001554:	2364      	movs	r3, #100	@ 0x64
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	230e      	movs	r3, #14
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	223b      	movs	r2, #59	@ 0x3b
 8001566:	21d0      	movs	r1, #208	@ 0xd0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f002 f875 	bl	8003658 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800156e:	7a3b      	ldrb	r3, [r7, #8]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	b21a      	sxth	r2, r3
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	b21b      	sxth	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b21a      	sxth	r2, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001580:	7abb      	ldrb	r3, [r7, #10]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80015b2:	7c3b      	ldrb	r3, [r7, #16]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7c7b      	ldrb	r3, [r7, #17]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21a      	sxth	r2, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80015c4:	7cbb      	ldrb	r3, [r7, #18]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	7cfb      	ldrb	r3, [r7, #19]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80015d6:	7d3b      	ldrb	r3, [r7, #20]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	7d7b      	ldrb	r3, [r7, #21]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff08 	bl	8000404 <__aeabi_i2d>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b95      	ldr	r3, [pc, #596]	@ (8001850 <MPU6050_Read_All+0x308>)
 80015fa:	f7ff f897 	bl	800072c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fef8 	bl	8000404 <__aeabi_i2d>
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b8d      	ldr	r3, [pc, #564]	@ (8001850 <MPU6050_Read_All+0x308>)
 800161a:	f7ff f887 	bl	800072c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe fee8 	bl	8000404 <__aeabi_i2d>
 8001634:	a380      	add	r3, pc, #512	@ (adr r3, 8001838 <MPU6050_Read_All+0x2f0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f877 	bl	800072c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	6839      	ldr	r1, [r7, #0]
 8001644:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001648:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb45 	bl	8000cdc <__aeabi_i2f>
 8001652:	4603      	mov	r3, r0
 8001654:	497f      	ldr	r1, [pc, #508]	@ (8001854 <MPU6050_Read_All+0x30c>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc48 	bl	8000eec <__aeabi_fdiv>
 800165c:	4603      	mov	r3, r0
 800165e:	497e      	ldr	r1, [pc, #504]	@ (8001858 <MPU6050_Read_All+0x310>)
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fa87 	bl	8000b74 <__addsf3>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fec5 	bl	8000404 <__aeabi_i2d>
 800167a:	a371      	add	r3, pc, #452	@ (adr r3, 8001840 <MPU6050_Read_All+0x2f8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f854 	bl	800072c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe feb5 	bl	8000404 <__aeabi_i2d>
 800169a:	a369      	add	r3, pc, #420	@ (adr r3, 8001840 <MPU6050_Read_All+0x2f8>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f844 	bl	800072c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fea5 	bl	8000404 <__aeabi_i2d>
 80016ba:	a361      	add	r3, pc, #388	@ (adr r3, 8001840 <MPU6050_Read_All+0x2f8>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7ff f834 	bl	800072c <__aeabi_ddiv>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80016ce:	f001 fad7 	bl	8002c80 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	4b61      	ldr	r3, [pc, #388]	@ (800185c <MPU6050_Read_All+0x314>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fe82 	bl	80003e4 <__aeabi_ui2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001860 <MPU6050_Read_All+0x318>)
 80016e6:	f7ff f821 	bl	800072c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80016f2:	f001 fac5 	bl	8002c80 <HAL_GetTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4a58      	ldr	r2, [pc, #352]	@ (800185c <MPU6050_Read_All+0x314>)
 80016fa:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	461a      	mov	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	fb03 f202 	mul.w	r2, r3, r2
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001714:	4619      	mov	r1, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800171c:	fb01 f303 	mul.w	r3, r1, r3
 8001720:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe fe6e 	bl	8000404 <__aeabi_i2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f007 fd12 	bl	8009158 <sqrt>
 8001734:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001744:	f7ff f930 	bl	80009a8 <__aeabi_dcmpeq>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d119      	bne.n	8001782 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fe55 	bl	8000404 <__aeabi_i2d>
 800175a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800175e:	f7fe ffe5 	bl	800072c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f007 fd19 	bl	80091a0 <atan>
 800176e:	a336      	add	r3, pc, #216	@ (adr r3, 8001848 <MPU6050_Read_All+0x300>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe feb0 	bl	80004d8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001780:	e005      	b.n	800178e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	425b      	negs	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe34 	bl	8000404 <__aeabi_i2d>
 800179c:	4682      	mov	sl, r0
 800179e:	468b      	mov	fp, r1
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fe2c 	bl	8000404 <__aeabi_i2d>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4650      	mov	r0, sl
 80017b2:	4659      	mov	r1, fp
 80017b4:	f007 fcce 	bl	8009154 <atan2>
 80017b8:	a323      	add	r3, pc, #140	@ (adr r3, 8001848 <MPU6050_Read_All+0x300>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fe8b 	bl	80004d8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <MPU6050_Read_All+0x31c>)
 80017d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017d4:	f7ff f8f2 	bl	80009bc <__aeabi_dcmplt>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00a      	beq.n	80017f4 <MPU6050_Read_All+0x2ac>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <MPU6050_Read_All+0x320>)
 80017ea:	f7ff f905 	bl	80009f8 <__aeabi_dcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d114      	bne.n	800181e <MPU6050_Read_All+0x2d6>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <MPU6050_Read_All+0x320>)
 80017fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017fe:	f7ff f8fb 	bl	80009f8 <__aeabi_dcmpgt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d033      	beq.n	8001870 <MPU6050_Read_All+0x328>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MPU6050_Read_All+0x31c>)
 8001814:	f7ff f8d2 	bl	80009bc <__aeabi_dcmplt>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d028      	beq.n	8001870 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 800181e:	4913      	ldr	r1, [pc, #76]	@ (800186c <MPU6050_Read_All+0x324>)
 8001820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001824:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800182e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001832:	e030      	b.n	8001896 <MPU6050_Read_All+0x34e>
 8001834:	f3af 8000 	nop.w
 8001838:	00000000 	.word	0x00000000
 800183c:	40cc2900 	.word	0x40cc2900
 8001840:	00000000 	.word	0x00000000
 8001844:	40606000 	.word	0x40606000
 8001848:	1a63c1f8 	.word	0x1a63c1f8
 800184c:	404ca5dc 	.word	0x404ca5dc
 8001850:	40d00000 	.word	0x40d00000
 8001854:	43aa0000 	.word	0x43aa0000
 8001858:	42121eb8 	.word	0x42121eb8
 800185c:	20000344 	.word	0x20000344
 8001860:	408f4000 	.word	0x408f4000
 8001864:	c0568000 	.word	0xc0568000
 8001868:	40568000 	.word	0x40568000
 800186c:	20000050 	.word	0x20000050
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001876:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800187a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800187e:	e9cd 2300 	strd	r2, r3, [sp]
 8001882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001886:	481c      	ldr	r0, [pc, #112]	@ (80018f8 <MPU6050_Read_All+0x3b0>)
 8001888:	f000 f83c 	bl	8001904 <Kalman_getAngle>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800189c:	4690      	mov	r8, r2
 800189e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <MPU6050_Read_All+0x3b4>)
 80018a8:	4640      	mov	r0, r8
 80018aa:	4649      	mov	r1, r9
 80018ac:	f7ff f8a4 	bl	80009f8 <__aeabi_dcmpgt>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018bc:	4614      	mov	r4, r2
 80018be:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018d6:	e9cd 2300 	strd	r2, r3, [sp]
 80018da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018de:	4808      	ldr	r0, [pc, #32]	@ (8001900 <MPU6050_Read_All+0x3b8>)
 80018e0:	f000 f810 	bl	8001904 <Kalman_getAngle>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	6839      	ldr	r1, [r7, #0]
 80018ea:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 80018ee:	bf00      	nop
 80018f0:	3740      	adds	r7, #64	@ 0x40
 80018f2:	46bd      	mov	sp, r7
 80018f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f8:	20000050 	.word	0x20000050
 80018fc:	40568000 	.word	0x40568000
 8001900:	20000008 	.word	0x20000008

08001904 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b092      	sub	sp, #72	@ 0x48
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001916:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800191a:	f7fe fc25 	bl	8000168 <__aeabi_dsub>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800192c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001930:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001934:	f7fe fdd0 	bl	80004d8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fc14 	bl	800016c <__adddf3>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800195a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800195e:	f7fe fdbb 	bl	80004d8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001970:	f7fe fbfa 	bl	8000168 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001982:	f7fe fbf1 	bl	8000168 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	f7fe fbea 	bl	800016c <__adddf3>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019a4:	f7fe fd98 	bl	80004d8 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fbdc 	bl	800016c <__adddf3>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019ce:	f7fe fd83 	bl	80004d8 <__aeabi_dmul>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe fbc5 	bl	8000168 <__aeabi_dsub>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019f4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019f8:	f7fe fd6e 	bl	80004d8 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe fbb0 	bl	8000168 <__aeabi_dsub>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a1e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a22:	f7fe fd59 	bl	80004d8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe fb9d 	bl	800016c <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a48:	f7fe fb90 	bl	800016c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a5a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a5e:	f7fe fe65 	bl	800072c <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a74:	f7fe fe5a 	bl	800072c <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a8a:	f7fe fb6d 	bl	8000168 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001aa4:	f7fe fd18 	bl	80004d8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fb5c 	bl	800016c <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ac4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ac8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001acc:	f7fe fd04 	bl	80004d8 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fb48 	bl	800016c <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b08:	f7fe fce6 	bl	80004d8 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4620      	mov	r0, r4
 8001b12:	4629      	mov	r1, r5
 8001b14:	f7fe fb28 	bl	8000168 <__aeabi_dsub>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	68f9      	ldr	r1, [r7, #12]
 8001b1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b30:	f7fe fcd2 	bl	80004d8 <__aeabi_dmul>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fb14 	bl	8000168 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	68f9      	ldr	r1, [r7, #12]
 8001b46:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001b50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b58:	f7fe fcbe 	bl	80004d8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fb00 	bl	8000168 <__aeabi_dsub>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b80:	f7fe fcaa 	bl	80004d8 <__aeabi_dmul>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe faec 	bl	8000168 <__aeabi_dsub>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	3748      	adds	r7, #72	@ 0x48
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bdb0      	pop	{r4, r5, r7, pc}

08001baa <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2178      	movs	r1, #120	@ 0x78
 8001bd6:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <ssd1306_WriteCommand+0x2c>)
 8001bd8:	f001 fc44 	bl	8003464 <HAL_I2C_Mem_Write>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000029c 	.word	0x2000029c

08001be8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af04      	add	r7, sp, #16
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfa:	9202      	str	r2, [sp, #8]
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2301      	movs	r3, #1
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	2178      	movs	r1, #120	@ 0x78
 8001c08:	4803      	ldr	r0, [pc, #12]	@ (8001c18 <ssd1306_WriteData+0x30>)
 8001c0a:	f001 fc2b 	bl	8003464 <HAL_I2C_Mem_Write>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000029c 	.word	0x2000029c

08001c1c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c20:	f7ff ffc3 	bl	8001baa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c24:	2064      	movs	r0, #100	@ 0x64
 8001c26:	f001 f835 	bl	8002c94 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 fac6 	bl	80021bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c30:	2020      	movs	r0, #32
 8001c32:	f7ff ffc1 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff ffbe 	bl	8001bb8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c3c:	20b0      	movs	r0, #176	@ 0xb0
 8001c3e:	f7ff ffbb 	bl	8001bb8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c42:	20c8      	movs	r0, #200	@ 0xc8
 8001c44:	f7ff ffb8 	bl	8001bb8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff ffb5 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c4e:	2010      	movs	r0, #16
 8001c50:	f7ff ffb2 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c54:	2040      	movs	r0, #64	@ 0x40
 8001c56:	f7ff ffaf 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c5a:	20ff      	movs	r0, #255	@ 0xff
 8001c5c:	f000 fa9b 	bl	8002196 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c60:	20a1      	movs	r0, #161	@ 0xa1
 8001c62:	f7ff ffa9 	bl	8001bb8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c66:	20a6      	movs	r0, #166	@ 0xa6
 8001c68:	f7ff ffa6 	bl	8001bb8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c6c:	20a8      	movs	r0, #168	@ 0xa8
 8001c6e:	f7ff ffa3 	bl	8001bb8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c72:	203f      	movs	r0, #63	@ 0x3f
 8001c74:	f7ff ffa0 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c78:	20a4      	movs	r0, #164	@ 0xa4
 8001c7a:	f7ff ff9d 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c7e:	20d3      	movs	r0, #211	@ 0xd3
 8001c80:	f7ff ff9a 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ff97 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c8a:	20d5      	movs	r0, #213	@ 0xd5
 8001c8c:	f7ff ff94 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c90:	20f0      	movs	r0, #240	@ 0xf0
 8001c92:	f7ff ff91 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c96:	20d9      	movs	r0, #217	@ 0xd9
 8001c98:	f7ff ff8e 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c9c:	2022      	movs	r0, #34	@ 0x22
 8001c9e:	f7ff ff8b 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ca2:	20da      	movs	r0, #218	@ 0xda
 8001ca4:	f7ff ff88 	bl	8001bb8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ca8:	2012      	movs	r0, #18
 8001caa:	f7ff ff85 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cae:	20db      	movs	r0, #219	@ 0xdb
 8001cb0:	f7ff ff82 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cb4:	2020      	movs	r0, #32
 8001cb6:	f7ff ff7f 	bl	8001bb8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cba:	208d      	movs	r0, #141	@ 0x8d
 8001cbc:	f7ff ff7c 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cc0:	2014      	movs	r0, #20
 8001cc2:	f7ff ff79 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 fa78 	bl	80021bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 f80f 	bl	8001cf0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cd2:	f000 f825 	bl	8001d20 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <ssd1306_Init+0xd0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <ssd1306_Init+0xd0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ce2:	4b02      	ldr	r3, [pc, #8]	@ (8001cec <ssd1306_Init+0xd0>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	711a      	strb	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000748 	.word	0x20000748

08001cf0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <ssd1306_Fill+0x14>
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <ssd1306_Fill+0x16>
 8001d04:	23ff      	movs	r3, #255	@ 0xff
 8001d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <ssd1306_Fill+0x2c>)
 8001d0e:	f003 fe72 	bl	80059f6 <memset>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000348 	.word	0x20000348

08001d20 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	e016      	b.n	8001d5a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	3b50      	subs	r3, #80	@ 0x50
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff40 	bl	8001bb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff3d 	bl	8001bb8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d3e:	2010      	movs	r0, #16
 8001d40:	f7ff ff3a 	bl	8001bb8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	4a08      	ldr	r2, [pc, #32]	@ (8001d6c <ssd1306_UpdateScreen+0x4c>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff4a 	bl	8001be8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	3301      	adds	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b07      	cmp	r3, #7
 8001d5e:	d9e5      	bls.n	8001d2c <ssd1306_UpdateScreen+0xc>
    }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000348 	.word	0x20000348

08001d70 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db3d      	blt.n	8001e06 <ssd1306_DrawPixel+0x96>
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d8e:	d83a      	bhi.n	8001e06 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d11a      	bne.n	8001dcc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	b2d8      	uxtb	r0, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	4413      	add	r3, r2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <ssd1306_DrawPixel+0xa0>)
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	b25a      	sxtb	r2, r3
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b259      	sxtb	r1, r3
 8001dbc:	79fa      	ldrb	r2, [r7, #7]
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	01db      	lsls	r3, r3, #7
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b2c9      	uxtb	r1, r1
 8001dc6:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <ssd1306_DrawPixel+0xa0>)
 8001dc8:	54d1      	strb	r1, [r2, r3]
 8001dca:	e01d      	b.n	8001e08 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <ssd1306_DrawPixel+0xa0>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	b25a      	sxtb	r2, r3
 8001de0:	79bb      	ldrb	r3, [r7, #6]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	b25b      	sxtb	r3, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	4013      	ands	r3, r2
 8001df4:	b259      	sxtb	r1, r3
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4603      	mov	r3, r0
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b2c9      	uxtb	r1, r1
 8001e00:	4a03      	ldr	r2, [pc, #12]	@ (8001e10 <ssd1306_DrawPixel+0xa0>)
 8001e02:	54d1      	strb	r1, [r2, r3]
 8001e04:	e000      	b.n	8001e08 <ssd1306_DrawPixel+0x98>
        return;
 8001e06:	bf00      	nop
    }
}
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000348 	.word	0x20000348

08001e14 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4638      	mov	r0, r7
 8001e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e22:	4623      	mov	r3, r4
 8001e24:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	2b1f      	cmp	r3, #31
 8001e2a:	d902      	bls.n	8001e32 <ssd1306_WriteChar+0x1e>
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e30:	d901      	bls.n	8001e36 <ssd1306_WriteChar+0x22>
        return 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e077      	b.n	8001f26 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e36:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	783b      	ldrb	r3, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	2b80      	cmp	r3, #128	@ 0x80
 8001e42:	dc06      	bgt.n	8001e52 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e44:	4b3a      	ldr	r3, [pc, #232]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	787b      	ldrb	r3, [r7, #1]
 8001e4c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e4e:	2b40      	cmp	r3, #64	@ 0x40
 8001e50:	dd01      	ble.n	8001e56 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e067      	b.n	8001f26 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e04e      	b.n	8001efa <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	3b20      	subs	r3, #32
 8001e62:	7879      	ldrb	r1, [r7, #1]
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4619      	mov	r1, r3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	e036      	b.n	8001eea <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	b2d8      	uxtb	r0, r3
 8001e9a:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <ssd1306_DrawPixel>
 8001eb2:	e017      	b.n	8001ee4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001ec4:	885b      	ldrh	r3, [r3, #2]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2d9      	uxtb	r1, r3
 8001ed0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7ff ff46 	bl	8001d70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	783b      	ldrb	r3, [r7, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d3c3      	bcc.n	8001e7c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	787b      	ldrb	r3, [r7, #1]
 8001efc:	461a      	mov	r2, r3
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d3ab      	bcc.n	8001e5c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d005      	beq.n	8001f1a <ssd1306_WriteChar+0x106>
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	3a20      	subs	r2, #32
 8001f14:	440a      	add	r2, r1
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	e000      	b.n	8001f1c <ssd1306_WriteChar+0x108>
 8001f1a:	783a      	ldrb	r2, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <ssd1306_WriteChar+0x11c>)
 8001f22:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000748 	.word	0x20000748

08001f34 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f42:	e013      	b.n	8001f6c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	7818      	ldrb	r0, [r3, #0]
 8001f48:	7e3b      	ldrb	r3, [r7, #24]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f50:	f7ff ff60 	bl	8001e14 <ssd1306_WriteChar>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d002      	beq.n	8001f66 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	e008      	b.n	8001f78 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e7      	bne.n	8001f44 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	781b      	ldrb	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	460a      	mov	r2, r1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <ssd1306_SetCursor+0x2c>)
 8001f96:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b03      	ldr	r3, [pc, #12]	@ (8001fac <ssd1306_SetCursor+0x2c>)
 8001f9e:	805a      	strh	r2, [r3, #2]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000748 	.word	0x20000748

08001fb0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4611      	mov	r1, r2
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	717b      	strb	r3, [r7, #5]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001fce:	797a      	ldrb	r2, [r7, #5]
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bfb8      	it	lt
 8001fd8:	425b      	neglt	r3, r3
 8001fda:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001fdc:	793a      	ldrb	r2, [r7, #4]
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bfb8      	it	lt
 8001fe6:	425b      	neglt	r3, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	797b      	ldrb	r3, [r7, #5]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d201      	bcs.n	8001ff6 <ssd1306_Line+0x46>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e001      	b.n	8001ffa <ssd1306_Line+0x4a>
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001ffc:	79ba      	ldrb	r2, [r7, #6]
 8001ffe:	793b      	ldrb	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <ssd1306_Line+0x58>
 8002004:	2301      	movs	r3, #1
 8002006:	e001      	b.n	800200c <ssd1306_Line+0x5c>
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002016:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800201a:	7939      	ldrb	r1, [r7, #4]
 800201c:	797b      	ldrb	r3, [r7, #5]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fea6 	bl	8001d70 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002024:	e024      	b.n	8002070 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002026:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800202a:	79b9      	ldrb	r1, [r7, #6]
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe9e 	bl	8001d70 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	425b      	negs	r3, r3
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	429a      	cmp	r2, r3
 8002042:	dd08      	ble.n	8002056 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4413      	add	r3, r2
 8002054:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	429a      	cmp	r2, r3
 800205c:	da08      	bge.n	8002070 <ssd1306_Line+0xc0>
            error += deltaX;
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4413      	add	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	4413      	add	r3, r2
 800206e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	797b      	ldrb	r3, [r7, #5]
 8002074:	429a      	cmp	r2, r3
 8002076:	d1d6      	bne.n	8002026 <ssd1306_Line+0x76>
 8002078:	79ba      	ldrb	r2, [r7, #6]
 800207a:	793b      	ldrb	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	d1d2      	bne.n	8002026 <ssd1306_Line+0x76>
        }
    }
    return;
 8002080:	bf00      	nop
}
 8002082:	3724      	adds	r7, #36	@ 0x24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}

08002088 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002088:	b590      	push	{r4, r7, lr}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	4604      	mov	r4, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4623      	mov	r3, r4
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	4603      	mov	r3, r0
 800209c:	71bb      	strb	r3, [r7, #6]
 800209e:	460b      	mov	r3, r1
 80020a0:	717b      	strb	r3, [r7, #5]
 80020a2:	4613      	mov	r3, r2
 80020a4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80020a6:	797b      	ldrb	r3, [r7, #5]
 80020a8:	425b      	negs	r3, r3
 80020aa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	f1c3 0301 	rsb	r3, r3, #1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db65      	blt.n	800218e <ssd1306_DrawCircle+0x106>
 80020c2:	79bb      	ldrb	r3, [r7, #6]
 80020c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020c6:	d862      	bhi.n	800218e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	79fa      	ldrb	r2, [r7, #7]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b2d8      	uxtb	r0, r3
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	4413      	add	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	793a      	ldrb	r2, [r7, #4]
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fe46 	bl	8001d70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	4413      	add	r3, r2
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	79bb      	ldrb	r3, [r7, #6]
 80020f4:	4413      	add	r3, r2
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	793a      	ldrb	r2, [r7, #4]
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff fe38 	bl	8001d70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	4413      	add	r3, r2
 8002108:	b2d8      	uxtb	r0, r3
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	79ba      	ldrb	r2, [r7, #6]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	793a      	ldrb	r2, [r7, #4]
 8002116:	4619      	mov	r1, r3
 8002118:	f7ff fe2a 	bl	8001d70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	79fa      	ldrb	r2, [r7, #7]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	79ba      	ldrb	r2, [r7, #6]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	793a      	ldrb	r2, [r7, #4]
 8002132:	4619      	mov	r1, r3
 8002134:	f7ff fe1c 	bl	8001d70 <ssd1306_DrawPixel>
        e2 = err;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	dc13      	bgt.n	800216c <ssd1306_DrawCircle+0xe4>
            y++;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3301      	adds	r3, #1
 8002148:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	3301      	adds	r3, #1
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	425b      	negs	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	429a      	cmp	r2, r3
 800215e:	d105      	bne.n	800216c <ssd1306_DrawCircle+0xe4>
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	dc01      	bgt.n	800216c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	dd08      	ble.n	8002186 <ssd1306_DrawCircle+0xfe>
            x++;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	3301      	adds	r3, #1
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dd9d      	ble.n	80020c8 <ssd1306_DrawCircle+0x40>

    return;
 800218c:	e000      	b.n	8002190 <ssd1306_DrawCircle+0x108>
        return;
 800218e:	bf00      	nop
}
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}

08002196 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021a0:	2381      	movs	r3, #129	@ 0x81
 80021a2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fd06 	bl	8001bb8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fd02 	bl	8001bb8 <ssd1306_WriteCommand>
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80021cc:	23af      	movs	r3, #175	@ 0xaf
 80021ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <ssd1306_SetDisplayOn+0x38>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	715a      	strb	r2, [r3, #5]
 80021d6:	e004      	b.n	80021e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80021d8:	23ae      	movs	r3, #174	@ 0xae
 80021da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <ssd1306_SetDisplayOn+0x38>)
 80021de:	2200      	movs	r2, #0
 80021e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fce7 	bl	8001bb8 <ssd1306_WriteCommand>
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000748 	.word	0x20000748

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <HAL_MspInit+0x5c>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <HAL_MspInit+0x5c>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6193      	str	r3, [r2, #24]
 800220a:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_MspInit+0x5c>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_MspInit+0x5c>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a0e      	ldr	r2, [pc, #56]	@ (8002254 <HAL_MspInit+0x5c>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <HAL_MspInit+0x5c>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_MspInit+0x60>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <HAL_MspInit+0x60>)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	40010000 	.word	0x40010000

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <NMI_Handler+0x4>

08002264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <MemManage_Handler+0x4>

08002274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <UsageFault_Handler+0x4>

08002284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ac:	f000 fcd6 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <_kill>:

int _kill(int pid, int sig)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022cc:	f003 fbe6 	bl	8005a9c <__errno>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2216      	movs	r2, #22
 80022d4:	601a      	str	r2, [r3, #0]
  return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_exit>:

void _exit (int status)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ea:	f04f 31ff 	mov.w	r1, #4294967295
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffe7 	bl	80022c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <_exit+0x12>

080022f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	e00a      	b.n	8002320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800230a:	f3af 8000 	nop.w
 800230e:	4601      	mov	r1, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf0      	blt.n	800230a <_read+0x12>
  }

  return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e009      	b.n	8002358 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbf1      	blt.n	8002344 <_write+0x12>
  }
  return len;
 8002360:	687b      	ldr	r3, [r7, #4]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <_close>:

int _close(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002390:	605a      	str	r2, [r3, #4]
  return 0;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	@ (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f003 fb4e 	bl	8005a9c <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20005000 	.word	0x20005000
 800242c:	00000400 	.word	0x00000400
 8002430:	20000750 	.word	0x20000750
 8002434:	200008e8 	.word	0x200008e8

08002438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <displayCombinedScreen>:

#include "UI/CombinedScreen.h"
#include "mpu6050.h"
#include "ssd1306.h"

void displayCombinedScreen(MPU6050_t sensorData){
 8002444:	b084      	sub	sp, #16
 8002446:	b490      	push	{r4, r7}
 8002448:	af00      	add	r7, sp, #0
 800244a:	f107 0408 	add.w	r4, r7, #8
 800244e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	bc90      	pop	{r4, r7}
 8002458:	b004      	add	sp, #16
 800245a:	4770      	bx	lr

0800245c <displayOrthogonalScreen>:
double getActualValue(int orthogonalAxis, MPU6050_t sensorData);
double normalizedAngleVectorX(double angle);
double normalizedAngleVectorY(double angle);
double radians(double angle);

void displayOrthogonalScreen(MPU6050_t sensorData, OrthogonalAxis orthogonalAxis){
 800245c:	b084      	sub	sp, #16
 800245e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002460:	b0b7      	sub	sp, #220	@ 0xdc
 8002462:	af14      	add	r7, sp, #80	@ 0x50
 8002464:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8002468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static char valueStr[32];
	double actualAngle = getActualValue((int)orthogonalAxis, sensorData);
 800246c:	f897 40f8 	ldrb.w	r4, [r7, #248]	@ 0xf8
 8002470:	4668      	mov	r0, sp
 8002472:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002476:	2250      	movs	r2, #80	@ 0x50
 8002478:	4619      	mov	r1, r3
 800247a:	f003 fb4a 	bl	8005b12 <memcpy>
 800247e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002482:	cb0c      	ldmia	r3, {r2, r3}
 8002484:	4620      	mov	r0, r4
 8002486:	f000 f9b3 	bl	80027f0 <getActualValue>
 800248a:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
	const double radius = 27;
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b89      	ldr	r3, [pc, #548]	@ (80026b8 <displayOrthogonalScreen+0x25c>)
 8002494:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const int anchorAngles[] = {
 8002498:	4b88      	ldr	r3, [pc, #544]	@ (80026bc <displayOrthogonalScreen+0x260>)
 800249a:	1d3c      	adds	r4, r7, #4
 800249c:	461d      	mov	r5, r3
 800249e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		90,
		135,
		180
	};

	ssd1306_DrawCircle(64, 32, radius, White);
 80024aa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80024ae:	f7fe faeb 	bl	8000a88 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	2120      	movs	r1, #32
 80024ba:	2040      	movs	r0, #64	@ 0x40
 80024bc:	f7ff fde4 	bl	8002088 <ssd1306_DrawCircle>

	// Draw actual value number
	sprintf(valueStr, "%.2f", (double)actualAngle);
 80024c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80024c4:	497e      	ldr	r1, [pc, #504]	@ (80026c0 <displayOrthogonalScreen+0x264>)
 80024c6:	487f      	ldr	r0, [pc, #508]	@ (80026c4 <displayOrthogonalScreen+0x268>)
 80024c8:	f003 fa18 	bl	80058fc <siprintf>
	ssd1306_SetCursor(0, 0);
 80024cc:	2100      	movs	r1, #0
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fd56 	bl	8001f80 <ssd1306_SetCursor>
	ssd1306_WriteString(
 80024d4:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <displayOrthogonalScreen+0x84>
 80024dc:	487a      	ldr	r0, [pc, #488]	@ (80026c8 <displayOrthogonalScreen+0x26c>)
 80024de:	e000      	b.n	80024e2 <displayOrthogonalScreen+0x86>
 80024e0:	487a      	ldr	r0, [pc, #488]	@ (80026cc <displayOrthogonalScreen+0x270>)
 80024e2:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <displayOrthogonalScreen+0x274>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	9200      	str	r2, [sp, #0]
 80024e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ea:	f7ff fd23 	bl	8001f34 <ssd1306_WriteString>
		orthogonalAxis == X ? "Angle X" : "Angle Y",
		Font_6x8,
		White
	);
	ssd1306_SetCursor(0, 10);
 80024ee:	210a      	movs	r1, #10
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fd45 	bl	8001f80 <ssd1306_SetCursor>
	ssd1306_WriteString(
 80024f6:	4b76      	ldr	r3, [pc, #472]	@ (80026d0 <displayOrthogonalScreen+0x274>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	9200      	str	r2, [sp, #0]
 80024fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fe:	4871      	ldr	r0, [pc, #452]	@ (80026c4 <displayOrthogonalScreen+0x268>)
 8002500:	f7ff fd18 	bl	8001f34 <ssd1306_WriteString>
		White
	);


	// Draw anchor points
	double anchorLinesLength = 4;
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b72      	ldr	r3, [pc, #456]	@ (80026d4 <displayOrthogonalScreen+0x278>)
 800250a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for(int i = 0; i < sizeof(anchorAngles) / sizeof(anchorAngles[0]); i++){
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002514:	e0ea      	b.n	80026ec <displayOrthogonalScreen+0x290>
		int angle = anchorAngles[i];
 8002516:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3388      	adds	r3, #136	@ 0x88
 800251e:	443b      	add	r3, r7
 8002520:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002524:	64fb      	str	r3, [r7, #76]	@ 0x4c
		double nx = normalizedAngleVectorX(angle);
 8002526:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002528:	f7fd ff6c 	bl	8000404 <__aeabi_i2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	f000 f97a 	bl	800282c <normalizedAngleVectorX>
 8002538:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
		double ny = normalizedAngleVectorY(angle);
 800253c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800253e:	f7fd ff61 	bl	8000404 <__aeabi_i2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f000 f985 	bl	8002858 <normalizedAngleVectorY>
 800254e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		double circleX = nx * radius + 64;
 8002552:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002556:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800255a:	f7fd ffbd 	bl	80004d8 <__aeabi_dmul>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <displayOrthogonalScreen+0x27c>)
 800256c:	f7fd fdfe 	bl	800016c <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		double circleY = ny * radius + 32;
 8002578:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800257c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002580:	f7fd ffaa 	bl	80004d8 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b52      	ldr	r3, [pc, #328]	@ (80026dc <displayOrthogonalScreen+0x280>)
 8002592:	f7fd fdeb 	bl	800016c <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		ssd1306_Line(
			circleX - nx * anchorLinesLength,
 800259e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025a6:	f7fd ff97 	bl	80004d8 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80025b2:	f7fd fdd9 	bl	8000168 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
		ssd1306_Line(
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe fa63 	bl	8000a88 <__aeabi_d2uiz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	b2dc      	uxtb	r4, r3
			circleY - ny * anchorLinesLength,
 80025c6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025ce:	f7fd ff83 	bl	80004d8 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025da:	f7fd fdc5 	bl	8000168 <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
		ssd1306_Line(
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fa4f 	bl	8000a88 <__aeabi_d2uiz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b2dd      	uxtb	r5, r3
			circleX + nx * anchorLinesLength,
 80025ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025f6:	f7fd ff6f 	bl	80004d8 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002606:	f7fd fdb1 	bl	800016c <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
		ssd1306_Line(
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fa39 	bl	8000a88 <__aeabi_d2uiz>
 8002616:	4603      	mov	r3, r0
 8002618:	b2de      	uxtb	r6, r3
			circleY + ny * anchorLinesLength,
 800261a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800261e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002622:	f7fd ff59 	bl	80004d8 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002632:	f7fd fd9b 	bl	800016c <__adddf3>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
		ssd1306_Line(
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa23 	bl	8000a88 <__aeabi_d2uiz>
 8002642:	4603      	mov	r3, r0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2201      	movs	r2, #1
 8002648:	9200      	str	r2, [sp, #0]
 800264a:	4632      	mov	r2, r6
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fcae 	bl	8001fb0 <ssd1306_Line>
			White
		);

		int shift = 5;
 8002654:	2305      	movs	r3, #5
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
		if (abs(angle) > 45.0)
 8002658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800265a:	2b00      	cmp	r3, #0
 800265c:	bfb8      	it	lt
 800265e:	425b      	neglt	r3, r3
 8002660:	2b2d      	cmp	r3, #45	@ 0x2d
 8002662:	dc3d      	bgt.n	80026e0 <displayOrthogonalScreen+0x284>
			continue;
		sprintf(valueStr, "%.2f", (double)angle);
 8002664:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002666:	f7fd fecd 	bl	8000404 <__aeabi_i2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4914      	ldr	r1, [pc, #80]	@ (80026c0 <displayOrthogonalScreen+0x264>)
 8002670:	4814      	ldr	r0, [pc, #80]	@ (80026c4 <displayOrthogonalScreen+0x268>)
 8002672:	f003 f943 	bl	80058fc <siprintf>
		ssd1306_SetCursor(circleX + shift, circleY);
 8002676:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002678:	f7fd fec4 	bl	8000404 <__aeabi_i2d>
 800267c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002680:	f7fd fd74 	bl	800016c <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe f9fc 	bl	8000a88 <__aeabi_d2uiz>
 8002690:	4603      	mov	r3, r0
 8002692:	b2dc      	uxtb	r4, r3
 8002694:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002698:	f7fe f9f6 	bl	8000a88 <__aeabi_d2uiz>
 800269c:	4603      	mov	r3, r0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	4619      	mov	r1, r3
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff fc6c 	bl	8001f80 <ssd1306_SetCursor>
		ssd1306_WriteString(valueStr, Font_6x8, White);
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <displayOrthogonalScreen+0x274>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b0:	4804      	ldr	r0, [pc, #16]	@ (80026c4 <displayOrthogonalScreen+0x268>)
 80026b2:	f7ff fc3f 	bl	8001f34 <ssd1306_WriteString>
 80026b6:	e014      	b.n	80026e2 <displayOrthogonalScreen+0x286>
 80026b8:	403b0000 	.word	0x403b0000
 80026bc:	0800a880 	.word	0x0800a880
 80026c0:	0800a868 	.word	0x0800a868
 80026c4:	20000754 	.word	0x20000754
 80026c8:	0800a870 	.word	0x0800a870
 80026cc:	0800a878 	.word	0x0800a878
 80026d0:	0800af74 	.word	0x0800af74
 80026d4:	40100000 	.word	0x40100000
 80026d8:	40500000 	.word	0x40500000
 80026dc:	40400000 	.word	0x40400000
			continue;
 80026e0:	bf00      	nop
	for(int i = 0; i < sizeof(anchorAngles) / sizeof(anchorAngles[0]); i++){
 80026e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026e6:	3301      	adds	r3, #1
 80026e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026f0:	2b07      	cmp	r3, #7
 80026f2:	f67f af10 	bls.w	8002516 <displayOrthogonalScreen+0xba>
	}

	// Draw sensor value line
	double nx = normalizedAngleVectorX(actualAngle);
 80026f6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026fa:	f000 f897 	bl	800282c <normalizedAngleVectorX>
 80026fe:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
	double ny = normalizedAngleVectorY(actualAngle);
 8002702:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002706:	f000 f8a7 	bl	8002858 <normalizedAngleVectorY>
 800270a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
	double actualLineRadius = 36;
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <displayOrthogonalScreen+0x388>)
 8002714:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	ssd1306_Line(
		64 - nx * actualLineRadius,
 8002718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800271c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002720:	f7fd feda 	bl	80004d8 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	f04f 0000 	mov.w	r0, #0
 800272c:	492e      	ldr	r1, [pc, #184]	@ (80027e8 <displayOrthogonalScreen+0x38c>)
 800272e:	f7fd fd1b 	bl	8000168 <__aeabi_dsub>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
	ssd1306_Line(
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f7fe f9a5 	bl	8000a88 <__aeabi_d2uiz>
 800273e:	4603      	mov	r3, r0
 8002740:	b2dc      	uxtb	r4, r3
		32 - ny * actualLineRadius,
 8002742:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002746:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800274a:	f7fd fec5 	bl	80004d8 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	4925      	ldr	r1, [pc, #148]	@ (80027ec <displayOrthogonalScreen+0x390>)
 8002758:	f7fd fd06 	bl	8000168 <__aeabi_dsub>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
	ssd1306_Line(
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe f990 	bl	8000a88 <__aeabi_d2uiz>
 8002768:	4603      	mov	r3, r0
 800276a:	b2dd      	uxtb	r5, r3
		64 + nx * actualLineRadius,
 800276c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002770:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8002774:	f7fd feb0 	bl	80004d8 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <displayOrthogonalScreen+0x38c>)
 8002786:	f7fd fcf1 	bl	800016c <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
	ssd1306_Line(
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f979 	bl	8000a88 <__aeabi_d2uiz>
 8002796:	4603      	mov	r3, r0
 8002798:	b2de      	uxtb	r6, r3
		32 + ny * actualLineRadius,
 800279a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800279e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80027a2:	f7fd fe99 	bl	80004d8 <__aeabi_dmul>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <displayOrthogonalScreen+0x390>)
 80027b4:	f7fd fcda 	bl	800016c <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
	ssd1306_Line(
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f962 	bl	8000a88 <__aeabi_d2uiz>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2201      	movs	r2, #1
 80027ca:	9200      	str	r2, [sp, #0]
 80027cc:	4632      	mov	r2, r6
 80027ce:	4629      	mov	r1, r5
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff fbed 	bl	8001fb0 <ssd1306_Line>
		White
	);
}
 80027d6:	bf00      	nop
 80027d8:	378c      	adds	r7, #140	@ 0x8c
 80027da:	46bd      	mov	sp, r7
 80027dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027e0:	b004      	add	sp, #16
 80027e2:	4770      	bx	lr
 80027e4:	40420000 	.word	0x40420000
 80027e8:	40500000 	.word	0x40500000
 80027ec:	40400000 	.word	0x40400000

080027f0 <getActualValue>:

double getActualValue(int orthogonalAxis, MPU6050_t sensorData){
 80027f0:	b082      	sub	sp, #8
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	f107 0110 	add.w	r1, r7, #16
 80027fe:	e881 000c 	stmia.w	r1, {r2, r3}
	switch(orthogonalAxis){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <getActualValue+0x20>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d003      	beq.n	8002816 <getActualValue+0x26>
 800280e:	e005      	b.n	800281c <getActualValue+0x2c>
		case X:
			return sensorData.KalmanAngleX;
 8002810:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002814:	e003      	b.n	800281e <getActualValue+0x2e>
		case Y:
			return sensorData.KalmanAngleY;
 8002816:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800281a:	e000      	b.n	800281e <getActualValue+0x2e>
	}
	while(1);
 800281c:	e7fe      	b.n	800281c <getActualValue+0x2c>
}
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	b002      	add	sp, #8
 800282a:	4770      	bx	lr

0800282c <normalizedAngleVectorX>:


double normalizedAngleVectorX(double angle){
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	e9c7 0100 	strd	r0, r1, [r7]
	return cos(radians(angle));
 8002836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800283a:	f000 f825 	bl	8002888 <radians>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f006 fe3b 	bl	80094c0 <cos>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
}
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <normalizedAngleVectorY>:

double normalizedAngleVectorY(double angle){
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	e9c7 0100 	strd	r0, r1, [r7]
	return sin(radians(angle));
 8002862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002866:	f000 f80f 	bl	8002888 <radians>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f006 fe6f 	bl	8009554 <sin>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
}
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	0000      	movs	r0, r0
	...

08002888 <radians>:

double radians(double angle){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	e9c7 0100 	strd	r0, r1, [r7]
	return angle * (M_PI / 180.0);
 8002892:	a307      	add	r3, pc, #28	@ (adr r3, 80028b0 <radians+0x28>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800289c:	f7fd fe1c 	bl	80004d8 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
}
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	a2529d39 	.word	0xa2529d39
 80028b4:	3f91df46 	.word	0x3f91df46

080028b8 <displayValuesScreen>:

const char* getSensorPropertyStringValue(SensorProperty property, MPU6050_t sensorData);
const char* getSensorPropertyStringIdentifier(SensorProperty property);

// Function to display values on the screen
void displayValuesScreen(MPU6050_t sensorData) {
 80028b8:	b084      	sub	sp, #16
 80028ba:	b590      	push	{r4, r7, lr}
 80028bc:	b099      	sub	sp, #100	@ 0x64
 80028be:	af14      	add	r7, sp, #80	@ 0x50
 80028c0:	f107 0420 	add.w	r4, r7, #32
 80028c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		AZ,
		TEMPERATURE
    };

    // Loop through each property and display its identifier and value
    for (int i = 0; i < sizeof(propertiesToDisplay) / sizeof(propertiesToDisplay[0]); i++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e03f      	b.n	800294e <displayValuesScreen+0x96>
        SensorProperty property = propertiesToDisplay[i];
 80028ce:	4a25      	ldr	r2, [pc, #148]	@ (8002964 <displayValuesScreen+0xac>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	72fb      	strb	r3, [r7, #11]
        char* propertyIdentifier = (char*)getSensorPropertyStringIdentifier(property);
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f8f0 	bl	8002ac0 <getSensorPropertyStringIdentifier>
 80028e0:	6078      	str	r0, [r7, #4]
        char* propertyValues = (char*)getSensorPropertyStringValue(property, sensorData);
 80028e2:	7afc      	ldrb	r4, [r7, #11]
 80028e4:	4668      	mov	r0, sp
 80028e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ea:	2250      	movs	r2, #80	@ 0x50
 80028ec:	4619      	mov	r1, r3
 80028ee:	f003 f910 	bl	8005b12 <memcpy>
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	cb0c      	ldmia	r3, {r2, r3}
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 f837 	bl	800296c <getSensorPropertyStringValue>
 80028fe:	6038      	str	r0, [r7, #0]

        // Set cursor position and write the identifier and value to the screen
        ssd1306_SetCursor(0, i * 10);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	4413      	add	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	4619      	mov	r1, r3
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff fb35 	bl	8001f80 <ssd1306_SetCursor>
        ssd1306_WriteString(propertyIdentifier, Font_6x8, White);
 8002916:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <displayValuesScreen+0xb0>)
 8002918:	2201      	movs	r2, #1
 800291a:	9200      	str	r2, [sp, #0]
 800291c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fb08 	bl	8001f34 <ssd1306_WriteString>
        ssd1306_SetCursor(90, i * 10);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4413      	add	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	205a      	movs	r0, #90	@ 0x5a
 8002936:	f7ff fb23 	bl	8001f80 <ssd1306_SetCursor>
        ssd1306_WriteString(propertyValues, Font_6x8, White);
 800293a:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <displayValuesScreen+0xb0>)
 800293c:	2201      	movs	r2, #1
 800293e:	9200      	str	r2, [sp, #0]
 8002940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	f7ff faf6 	bl	8001f34 <ssd1306_WriteString>
    for (int i = 0; i < sizeof(propertiesToDisplay) / sizeof(propertiesToDisplay[0]); i++) {
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3301      	adds	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d9bc      	bls.n	80028ce <displayValuesScreen+0x16>
    }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002960:	b004      	add	sp, #16
 8002962:	4770      	bx	lr
 8002964:	0800af98 	.word	0x0800af98
 8002968:	0800af74 	.word	0x0800af74

0800296c <getSensorPropertyStringValue>:

// Function to return a string value based on the property
const char* getSensorPropertyStringValue(SensorProperty property, MPU6050_t sensorData) {
 800296c:	b082      	sub	sp, #8
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	4601      	mov	r1, r0
 8002976:	f107 0010 	add.w	r0, r7, #16
 800297a:	e880 000c 	stmia.w	r0, {r2, r3}
 800297e:	460b      	mov	r3, r1
 8002980:	71fb      	strb	r3, [r7, #7]
    static char valueStr[32]; // Static buffer to store the string value of the property

    switch (property) {
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b0e      	cmp	r3, #14
 8002986:	f200 808b 	bhi.w	8002aa0 <getSensorPropertyStringValue+0x134>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <getSensorPropertyStringValue+0x24>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029cd 	.word	0x080029cd
 8002994:	080029df 	.word	0x080029df
 8002998:	080029f1 	.word	0x080029f1
 800299c:	08002a03 	.word	0x08002a03
 80029a0:	08002a13 	.word	0x08002a13
 80029a4:	08002a23 	.word	0x08002a23
 80029a8:	08002a33 	.word	0x08002a33
 80029ac:	08002a45 	.word	0x08002a45
 80029b0:	08002a57 	.word	0x08002a57
 80029b4:	08002aa1 	.word	0x08002aa1
 80029b8:	08002aa1 	.word	0x08002aa1
 80029bc:	08002aa1 	.word	0x08002aa1
 80029c0:	08002a69 	.word	0x08002a69
 80029c4:	08002a81 	.word	0x08002a81
 80029c8:	08002a91 	.word	0x08002a91
        case ACCEL_X_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_X_RAW); // Convert to string
 80029cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4937      	ldr	r1, [pc, #220]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 80029d4:	4837      	ldr	r0, [pc, #220]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 80029d6:	f002 ff91 	bl	80058fc <siprintf>
            return valueStr;
 80029da:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 80029dc:	e061      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case ACCEL_Y_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_Y_RAW); // Convert to string
 80029de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e2:	461a      	mov	r2, r3
 80029e4:	4932      	ldr	r1, [pc, #200]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 80029e6:	4833      	ldr	r0, [pc, #204]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 80029e8:	f002 ff88 	bl	80058fc <siprintf>
            return valueStr;
 80029ec:	4b31      	ldr	r3, [pc, #196]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 80029ee:	e058      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case ACCEL_Z_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_Z_RAW); // Convert to string
 80029f0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029f4:	461a      	mov	r2, r3
 80029f6:	492e      	ldr	r1, [pc, #184]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 80029f8:	482e      	ldr	r0, [pc, #184]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 80029fa:	f002 ff7f 	bl	80058fc <siprintf>
            return valueStr;
 80029fe:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a00:	e04f      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case AX:
            sprintf(valueStr, "%.2f", sensorData.Ax); // Convert to string (floating point)
 8002a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a06:	492c      	ldr	r1, [pc, #176]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a08:	482a      	ldr	r0, [pc, #168]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a0a:	f002 ff77 	bl	80058fc <siprintf>
            return valueStr;
 8002a0e:	4b29      	ldr	r3, [pc, #164]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a10:	e047      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case AY:
            sprintf(valueStr, "%.2f", sensorData.Ay); // Convert to string (floating point)
 8002a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a16:	4928      	ldr	r1, [pc, #160]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a18:	4826      	ldr	r0, [pc, #152]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a1a:	f002 ff6f 	bl	80058fc <siprintf>
            return valueStr;
 8002a1e:	4b25      	ldr	r3, [pc, #148]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a20:	e03f      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case AZ:
            sprintf(valueStr, "%.2f", sensorData.Az); // Convert to string (floating point)
 8002a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a26:	4924      	ldr	r1, [pc, #144]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a28:	4822      	ldr	r0, [pc, #136]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a2a:	f002 ff67 	bl	80058fc <siprintf>
            return valueStr;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a30:	e037      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case GYRO_X_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_X_RAW); // Convert to string
 8002a32:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8002a36:	461a      	mov	r2, r3
 8002a38:	491d      	ldr	r1, [pc, #116]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 8002a3a:	481e      	ldr	r0, [pc, #120]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a3c:	f002 ff5e 	bl	80058fc <siprintf>
            return valueStr;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a42:	e02e      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case GYRO_Y_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_Y_RAW); // Convert to string
 8002a44:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4919      	ldr	r1, [pc, #100]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 8002a4c:	4819      	ldr	r0, [pc, #100]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a4e:	f002 ff55 	bl	80058fc <siprintf>
            return valueStr;
 8002a52:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a54:	e025      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case GYRO_Z_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_Z_RAW); // Convert to string
 8002a56:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4914      	ldr	r1, [pc, #80]	@ (8002ab0 <getSensorPropertyStringValue+0x144>)
 8002a5e:	4815      	ldr	r0, [pc, #84]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a60:	f002 ff4c 	bl	80058fc <siprintf>
            return valueStr;
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a66:	e01c      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case TEMPERATURE:
            sprintf(valueStr, "%.2f", sensorData.Temperature); // Convert to string (floating point)
 8002a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fcdc 	bl	8000428 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4910      	ldr	r1, [pc, #64]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a76:	480f      	ldr	r0, [pc, #60]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a78:	f002 ff40 	bl	80058fc <siprintf>
            return valueStr;
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a7e:	e010      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case KALMAN_ANGLE_X:
            sprintf(valueStr, "%.2f", sensorData.KalmanAngleX); // Convert to string (floating point)
 8002a80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a84:	490c      	ldr	r1, [pc, #48]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a86:	480b      	ldr	r0, [pc, #44]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a88:	f002 ff38 	bl	80058fc <siprintf>
            return valueStr;
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a8e:	e008      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        case KALMAN_ANGLE_Y:
            sprintf(valueStr, "%.2f", sensorData.KalmanAngleY); // Convert to string (floating point)
 8002a90:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002a94:	4908      	ldr	r1, [pc, #32]	@ (8002ab8 <getSensorPropertyStringValue+0x14c>)
 8002a96:	4807      	ldr	r0, [pc, #28]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a98:	f002 ff30 	bl	80058fc <siprintf>
            return valueStr;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <getSensorPropertyStringValue+0x148>)
 8002a9e:	e000      	b.n	8002aa2 <getSensorPropertyStringValue+0x136>
        default:
            return "Property not found";
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <getSensorPropertyStringValue+0x150>)
    }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aac:	b002      	add	sp, #8
 8002aae:	4770      	bx	lr
 8002ab0:	0800a8a0 	.word	0x0800a8a0
 8002ab4:	20000774 	.word	0x20000774
 8002ab8:	0800a8a4 	.word	0x0800a8a4
 8002abc:	0800a8ac 	.word	0x0800a8ac

08002ac0 <getSensorPropertyStringIdentifier>:

// Function to return the string identifier for a sensor property
const char* getSensorPropertyStringIdentifier(SensorProperty property) {
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
    switch (property) {
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2b0e      	cmp	r3, #14
 8002ace:	d839      	bhi.n	8002b44 <getSensorPropertyStringIdentifier+0x84>
 8002ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <getSensorPropertyStringIdentifier+0x18>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b15 	.word	0x08002b15
 8002adc:	08002b19 	.word	0x08002b19
 8002ae0:	08002b1d 	.word	0x08002b1d
 8002ae4:	08002b21 	.word	0x08002b21
 8002ae8:	08002b25 	.word	0x08002b25
 8002aec:	08002b29 	.word	0x08002b29
 8002af0:	08002b2d 	.word	0x08002b2d
 8002af4:	08002b31 	.word	0x08002b31
 8002af8:	08002b35 	.word	0x08002b35
 8002afc:	08002b45 	.word	0x08002b45
 8002b00:	08002b45 	.word	0x08002b45
 8002b04:	08002b45 	.word	0x08002b45
 8002b08:	08002b39 	.word	0x08002b39
 8002b0c:	08002b3d 	.word	0x08002b3d
 8002b10:	08002b41 	.word	0x08002b41
        case ACCEL_X_RAW:
            return "Accel X (RAW)";
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <getSensorPropertyStringIdentifier+0x90>)
 8002b16:	e016      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case ACCEL_Y_RAW:
            return "Accel Y (RAW)";
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <getSensorPropertyStringIdentifier+0x94>)
 8002b1a:	e014      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case ACCEL_Z_RAW:
            return "Accel Z (RAW)";
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b58 <getSensorPropertyStringIdentifier+0x98>)
 8002b1e:	e012      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case AX:
            return "Accel X (m/s)";
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <getSensorPropertyStringIdentifier+0x9c>)
 8002b22:	e010      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case AY:
            return "Accel Y (m/s)";
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <getSensorPropertyStringIdentifier+0xa0>)
 8002b26:	e00e      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case AZ:
            return "Accel Z (m/s)";
 8002b28:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <getSensorPropertyStringIdentifier+0xa4>)
 8002b2a:	e00c      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case GYRO_X_RAW:
            return "Gyro X (RAW)";
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <getSensorPropertyStringIdentifier+0xa8>)
 8002b2e:	e00a      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case GYRO_Y_RAW:
            return "Gyro Y (RAW)";
 8002b30:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <getSensorPropertyStringIdentifier+0xac>)
 8002b32:	e008      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case GYRO_Z_RAW:
            return "Gyro Z (RAW)";
 8002b34:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <getSensorPropertyStringIdentifier+0xb0>)
 8002b36:	e006      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case TEMPERATURE:
            return "Temp (C)";
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <getSensorPropertyStringIdentifier+0xb4>)
 8002b3a:	e004      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case KALMAN_ANGLE_X:
            return "Kalman Y(deg)";
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <getSensorPropertyStringIdentifier+0xb8>)
 8002b3e:	e002      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        case KALMAN_ANGLE_Y:
            return "Kalman X(deg)";
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <getSensorPropertyStringIdentifier+0xbc>)
 8002b42:	e000      	b.n	8002b46 <getSensorPropertyStringIdentifier+0x86>
        default:
            return "Error";
 8002b44:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <getSensorPropertyStringIdentifier+0xc0>)
    }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	0800a8c0 	.word	0x0800a8c0
 8002b54:	0800a8d0 	.word	0x0800a8d0
 8002b58:	0800a8e0 	.word	0x0800a8e0
 8002b5c:	0800a8f0 	.word	0x0800a8f0
 8002b60:	0800a900 	.word	0x0800a900
 8002b64:	0800a910 	.word	0x0800a910
 8002b68:	0800a920 	.word	0x0800a920
 8002b6c:	0800a930 	.word	0x0800a930
 8002b70:	0800a940 	.word	0x0800a940
 8002b74:	0800a950 	.word	0x0800a950
 8002b78:	0800a95c 	.word	0x0800a95c
 8002b7c:	0800a96c 	.word	0x0800a96c
 8002b80:	0800a97c 	.word	0x0800a97c

08002b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b84:	f7ff fc58 	bl	8002438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b88:	480b      	ldr	r0, [pc, #44]	@ (8002bb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b8a:	490c      	ldr	r1, [pc, #48]	@ (8002bbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b90:	e002      	b.n	8002b98 <LoopCopyDataInit>

08002b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b96:	3304      	adds	r3, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b9c:	d3f9      	bcc.n	8002b92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ba0:	4c09      	ldr	r4, [pc, #36]	@ (8002bc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ba4:	e001      	b.n	8002baa <LoopFillZerobss>

08002ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba8:	3204      	adds	r2, #4

08002baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bac:	d3fb      	bcc.n	8002ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bae:	f002 ff7b 	bl	8005aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bb2:	f7fe fb85 	bl	80012c0 <main>
  bx lr
 8002bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bbc:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002bc0:	0800b638 	.word	0x0800b638
  ldr r2, =_sbss
 8002bc4:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002bc8:	200008e4 	.word	0x200008e4

08002bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bcc:	e7fe      	b.n	8002bcc <ADC1_2_IRQHandler>
	...

08002bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <HAL_Init+0x28>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	@ (8002bf8 <HAL_Init+0x28>)
 8002bda:	f043 0310 	orr.w	r3, r3, #16
 8002bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f92b 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fb04 	bl	80021f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40022000 	.word	0x40022000

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f935 	bl	8002e8a <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 f90b 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	@ (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000098 	.word	0x20000098
 8002c54:	200000a0 	.word	0x200000a0
 8002c58:	2000009c 	.word	0x2000009c

08002c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <HAL_IncTick+0x1c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_IncTick+0x20>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <HAL_IncTick+0x20>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	200000a0 	.word	0x200000a0
 8002c7c:	20000794 	.word	0x20000794

08002c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return uwTick;
 8002c84:	4b02      	ldr	r3, [pc, #8]	@ (8002c90 <HAL_GetTick+0x10>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000794 	.word	0x20000794

08002c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d005      	beq.n	8002cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_Delay+0x44>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cba:	bf00      	nop
 8002cbc:	f7ff ffe0 	bl	8002c80 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d8f7      	bhi.n	8002cbc <HAL_Delay+0x28>
  {
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200000a0 	.word	0x200000a0

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	@ (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	@ (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	@ 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff90 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff49 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff5e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff90 	bl	8002d94 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5f 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffb0 	bl	8002df8 <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b08b      	sub	sp, #44	@ 0x2c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb6:	e169      	b.n	800318c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8158 	bne.w	8003186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4a9a      	ldr	r2, [pc, #616]	@ (8003144 <HAL_GPIO_Init+0x2a0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d05e      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002ee0:	4a98      	ldr	r2, [pc, #608]	@ (8003144 <HAL_GPIO_Init+0x2a0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d875      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002ee6:	4a98      	ldr	r2, [pc, #608]	@ (8003148 <HAL_GPIO_Init+0x2a4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d058      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002eec:	4a96      	ldr	r2, [pc, #600]	@ (8003148 <HAL_GPIO_Init+0x2a4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d86f      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002ef2:	4a96      	ldr	r2, [pc, #600]	@ (800314c <HAL_GPIO_Init+0x2a8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d052      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002ef8:	4a94      	ldr	r2, [pc, #592]	@ (800314c <HAL_GPIO_Init+0x2a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d869      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002efe:	4a94      	ldr	r2, [pc, #592]	@ (8003150 <HAL_GPIO_Init+0x2ac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04c      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002f04:	4a92      	ldr	r2, [pc, #584]	@ (8003150 <HAL_GPIO_Init+0x2ac>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d863      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f0a:	4a92      	ldr	r2, [pc, #584]	@ (8003154 <HAL_GPIO_Init+0x2b0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d046      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
 8002f10:	4a90      	ldr	r2, [pc, #576]	@ (8003154 <HAL_GPIO_Init+0x2b0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d85d      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f16:	2b12      	cmp	r3, #18
 8002f18:	d82a      	bhi.n	8002f70 <HAL_GPIO_Init+0xcc>
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d859      	bhi.n	8002fd2 <HAL_GPIO_Init+0x12e>
 8002f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f24 <HAL_GPIO_Init+0x80>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f9f 	.word	0x08002f9f
 8002f28:	08002f79 	.word	0x08002f79
 8002f2c:	08002f8b 	.word	0x08002f8b
 8002f30:	08002fcd 	.word	0x08002fcd
 8002f34:	08002fd3 	.word	0x08002fd3
 8002f38:	08002fd3 	.word	0x08002fd3
 8002f3c:	08002fd3 	.word	0x08002fd3
 8002f40:	08002fd3 	.word	0x08002fd3
 8002f44:	08002fd3 	.word	0x08002fd3
 8002f48:	08002fd3 	.word	0x08002fd3
 8002f4c:	08002fd3 	.word	0x08002fd3
 8002f50:	08002fd3 	.word	0x08002fd3
 8002f54:	08002fd3 	.word	0x08002fd3
 8002f58:	08002fd3 	.word	0x08002fd3
 8002f5c:	08002fd3 	.word	0x08002fd3
 8002f60:	08002fd3 	.word	0x08002fd3
 8002f64:	08002fd3 	.word	0x08002fd3
 8002f68:	08002f81 	.word	0x08002f81
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	4a79      	ldr	r2, [pc, #484]	@ (8003158 <HAL_GPIO_Init+0x2b4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f76:	e02c      	b.n	8002fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	623b      	str	r3, [r7, #32]
          break;
 8002f7e:	e029      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	3304      	adds	r3, #4
 8002f86:	623b      	str	r3, [r7, #32]
          break;
 8002f88:	e024      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	3308      	adds	r3, #8
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e01f      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	623b      	str	r3, [r7, #32]
          break;
 8002f9c:	e01a      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	623b      	str	r3, [r7, #32]
          break;
 8002faa:	e013      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	611a      	str	r2, [r3, #16]
          break;
 8002fbe:	e009      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	615a      	str	r2, [r3, #20]
          break;
 8002fca:	e003      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	623b      	str	r3, [r7, #32]
          break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x130>
          break;
 8002fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2bff      	cmp	r3, #255	@ 0xff
 8002fd8:	d801      	bhi.n	8002fde <HAL_GPIO_Init+0x13a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	e001      	b.n	8002fe2 <HAL_GPIO_Init+0x13e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2bff      	cmp	r3, #255	@ 0xff
 8002fe8:	d802      	bhi.n	8002ff0 <HAL_GPIO_Init+0x14c>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	e002      	b.n	8002ff6 <HAL_GPIO_Init+0x152>
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	401a      	ands	r2, r3
 8003008:	6a39      	ldr	r1, [r7, #32]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80b1 	beq.w	8003186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003024:	4b4d      	ldr	r3, [pc, #308]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4a4c      	ldr	r2, [pc, #304]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6193      	str	r3, [r2, #24]
 8003030:	4b4a      	ldr	r3, [pc, #296]	@ (800315c <HAL_GPIO_Init+0x2b8>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800303c:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <HAL_GPIO_Init+0x2bc>)
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	3302      	adds	r3, #2
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a40      	ldr	r2, [pc, #256]	@ (8003164 <HAL_GPIO_Init+0x2c0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_Init+0x1ec>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3f      	ldr	r2, [pc, #252]	@ (8003168 <HAL_GPIO_Init+0x2c4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00d      	beq.n	800308c <HAL_GPIO_Init+0x1e8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3e      	ldr	r2, [pc, #248]	@ (800316c <HAL_GPIO_Init+0x2c8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x1e4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3d      	ldr	r2, [pc, #244]	@ (8003170 <HAL_GPIO_Init+0x2cc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_GPIO_Init+0x1e0>
 8003080:	2303      	movs	r3, #3
 8003082:	e006      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003084:	2304      	movs	r3, #4
 8003086:	e004      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003088:	2302      	movs	r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_GPIO_Init+0x1ee>
 8003090:	2300      	movs	r3, #0
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	f002 0203 	and.w	r2, r2, #3
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	4093      	lsls	r3, r2
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80030a2:	492f      	ldr	r1, [pc, #188]	@ (8003160 <HAL_GPIO_Init+0x2bc>)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	492c      	ldr	r1, [pc, #176]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
 80030c8:	e006      	b.n	80030d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	4928      	ldr	r1, [pc, #160]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030e4:	4b23      	ldr	r3, [pc, #140]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4922      	ldr	r1, [pc, #136]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030f2:	4b20      	ldr	r3, [pc, #128]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	491e      	ldr	r1, [pc, #120]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800310c:	4b19      	ldr	r3, [pc, #100]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4918      	ldr	r1, [pc, #96]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
 8003118:	e006      	b.n	8003128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800311a:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	43db      	mvns	r3, r3
 8003122:	4914      	ldr	r1, [pc, #80]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003124:	4013      	ands	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d021      	beq.n	8003178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003134:	4b0f      	ldr	r3, [pc, #60]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	490e      	ldr	r1, [pc, #56]	@ (8003174 <HAL_GPIO_Init+0x2d0>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	e021      	b.n	8003186 <HAL_GPIO_Init+0x2e2>
 8003142:	bf00      	nop
 8003144:	10320000 	.word	0x10320000
 8003148:	10310000 	.word	0x10310000
 800314c:	10220000 	.word	0x10220000
 8003150:	10210000 	.word	0x10210000
 8003154:	10120000 	.word	0x10120000
 8003158:	10110000 	.word	0x10110000
 800315c:	40021000 	.word	0x40021000
 8003160:	40010000 	.word	0x40010000
 8003164:	40010800 	.word	0x40010800
 8003168:	40010c00 	.word	0x40010c00
 800316c:	40011000 	.word	0x40011000
 8003170:	40011400 	.word	0x40011400
 8003174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003178:	4b0b      	ldr	r3, [pc, #44]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	43db      	mvns	r3, r3
 8003180:	4909      	ldr	r1, [pc, #36]	@ (80031a8 <HAL_GPIO_Init+0x304>)
 8003182:	4013      	ands	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	3301      	adds	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	f47f ae8e 	bne.w	8002eb8 <HAL_GPIO_Init+0x14>
  }
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	372c      	adds	r7, #44	@ 0x2c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e001      	b.n	80031ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e12b      	b.n	8003446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fff0 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	@ 0x24
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800322e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800323e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003240:	f001 fbfc 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8003244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a81      	ldr	r2, [pc, #516]	@ (8003450 <HAL_I2C_Init+0x274>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d807      	bhi.n	8003260 <HAL_I2C_Init+0x84>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4a80      	ldr	r2, [pc, #512]	@ (8003454 <HAL_I2C_Init+0x278>)
 8003254:	4293      	cmp	r3, r2
 8003256:	bf94      	ite	ls
 8003258:	2301      	movls	r3, #1
 800325a:	2300      	movhi	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e006      	b.n	800326e <HAL_I2C_Init+0x92>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a7d      	ldr	r2, [pc, #500]	@ (8003458 <HAL_I2C_Init+0x27c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	bf94      	ite	ls
 8003268:	2301      	movls	r3, #1
 800326a:	2300      	movhi	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0e7      	b.n	8003446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a78      	ldr	r2, [pc, #480]	@ (800345c <HAL_I2C_Init+0x280>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0c9b      	lsrs	r3, r3, #18
 8003280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003450 <HAL_I2C_Init+0x274>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d802      	bhi.n	80032b0 <HAL_I2C_Init+0xd4>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3301      	adds	r3, #1
 80032ae:	e009      	b.n	80032c4 <HAL_I2C_Init+0xe8>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032b6:	fb02 f303 	mul.w	r3, r2, r3
 80032ba:	4a69      	ldr	r2, [pc, #420]	@ (8003460 <HAL_I2C_Init+0x284>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	3301      	adds	r3, #1
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	495c      	ldr	r1, [pc, #368]	@ (8003450 <HAL_I2C_Init+0x274>)
 80032e0:	428b      	cmp	r3, r1
 80032e2:	d819      	bhi.n	8003318 <HAL_I2C_Init+0x13c>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1e59      	subs	r1, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f2:	1c59      	adds	r1, r3, #1
 80032f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032f8:	400b      	ands	r3, r1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_I2C_Init+0x138>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1e59      	subs	r1, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	fbb1 f3f3 	udiv	r3, r1, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003312:	e051      	b.n	80033b8 <HAL_I2C_Init+0x1dc>
 8003314:	2304      	movs	r3, #4
 8003316:	e04f      	b.n	80033b8 <HAL_I2C_Init+0x1dc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d111      	bne.n	8003344 <HAL_I2C_Init+0x168>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e58      	subs	r0, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e012      	b.n	800336a <HAL_I2C_Init+0x18e>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	0099      	lsls	r1, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	fbb0 f3f3 	udiv	r3, r0, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Init+0x196>
 800336e:	2301      	movs	r3, #1
 8003370:	e022      	b.n	80033b8 <HAL_I2C_Init+0x1dc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10e      	bne.n	8003398 <HAL_I2C_Init+0x1bc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e58      	subs	r0, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	440b      	add	r3, r1
 8003388:	fbb0 f3f3 	udiv	r3, r0, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Init+0x1dc>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6809      	ldr	r1, [r1, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6911      	ldr	r1, [r2, #16]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68d2      	ldr	r2, [r2, #12]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	000186a0 	.word	0x000186a0
 8003454:	001e847f 	.word	0x001e847f
 8003458:	003d08ff 	.word	0x003d08ff
 800345c:	431bde83 	.word	0x431bde83
 8003460:	10624dd3 	.word	0x10624dd3

08003464 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347e:	f7ff fbff 	bl	8002c80 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	f040 80d9 	bne.w	8003644 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2319      	movs	r3, #25
 8003498:	2201      	movs	r2, #1
 800349a:	496d      	ldr	r1, [pc, #436]	@ (8003650 <HAL_I2C_Mem_Write+0x1ec>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fccd 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
 80034aa:	e0cc      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Mem_Write+0x56>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0c5      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2221      	movs	r2, #33	@ 0x21
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2240      	movs	r2, #64	@ 0x40
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a3a      	ldr	r2, [r7, #32]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003510:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a4d      	ldr	r2, [pc, #308]	@ (8003654 <HAL_I2C_Mem_Write+0x1f0>)
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003522:	88f8      	ldrh	r0, [r7, #6]
 8003524:	893a      	ldrh	r2, [r7, #8]
 8003526:	8979      	ldrh	r1, [r7, #10]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4603      	mov	r3, r0
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fb04 	bl	8003b40 <I2C_RequestMemoryWrite>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d052      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e081      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fd92 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00d      	beq.n	800356e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b04      	cmp	r3, #4
 8003558:	d107      	bne.n	800356a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003568:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e06b      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d11b      	bne.n	80035e4 <HAL_I2C_Mem_Write+0x180>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d017      	beq.n	80035e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1aa      	bne.n	8003542 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fd85 	bl	8004100 <I2C_WaitOnBTFFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	2b04      	cmp	r3, #4
 8003602:	d107      	bne.n	8003614 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e016      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e000      	b.n	8003646 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	00100002 	.word	0x00100002
 8003654:	ffff0000 	.word	0xffff0000

08003658 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	@ 0x30
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	817b      	strh	r3, [r7, #10]
 800366a:	460b      	mov	r3, r1
 800366c:	813b      	strh	r3, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003676:	f7ff fb03 	bl	8002c80 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b20      	cmp	r3, #32
 8003686:	f040 8250 	bne.w	8003b2a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2319      	movs	r3, #25
 8003690:	2201      	movs	r2, #1
 8003692:	4982      	ldr	r1, [pc, #520]	@ (800389c <HAL_I2C_Mem_Read+0x244>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fbd1 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e243      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x5a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e23c      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d007      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2222      	movs	r2, #34	@ 0x22
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2240      	movs	r2, #64	@ 0x40
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a62      	ldr	r2, [pc, #392]	@ (80038a0 <HAL_I2C_Mem_Read+0x248>)
 8003718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800371a:	88f8      	ldrh	r0, [r7, #6]
 800371c:	893a      	ldrh	r2, [r7, #8]
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	4603      	mov	r3, r0
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 fa9e 	bl	8003c6c <I2C_RequestMemoryRead>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1f8      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e1cc      	b.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376e:	2b01      	cmp	r3, #1
 8003770:	d11e      	bne.n	80037b0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003780:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003782:	b672      	cpsid	i
}
 8003784:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037ac:	b662      	cpsie	i
}
 80037ae:	e035      	b.n	800381c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11e      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c8:	b672      	cpsid	i
}
 80037ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037f2:	b662      	cpsie	i
}
 80037f4:	e012      	b.n	800381c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003804:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800381c:	e172      	b.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	2b03      	cmp	r3, #3
 8003824:	f200 811f 	bhi.w	8003a66 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b01      	cmp	r3, #1
 800382e:	d123      	bne.n	8003878 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fcab 	bl	8004190 <I2C_WaitOnRXNEFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e173      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003876:	e145      	b.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387c:	2b02      	cmp	r3, #2
 800387e:	d152      	bne.n	8003926 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003886:	2200      	movs	r2, #0
 8003888:	4906      	ldr	r1, [pc, #24]	@ (80038a4 <HAL_I2C_Mem_Read+0x24c>)
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fad6 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e148      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
 800389a:	bf00      	nop
 800389c:	00100002 	.word	0x00100002
 80038a0:	ffff0000 	.word	0xffff0000
 80038a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038a8:	b672      	cpsid	i
}
 80038aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038ee:	b662      	cpsie	i
}
 80038f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003924:	e0ee      	b.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392c:	2200      	movs	r2, #0
 800392e:	4981      	ldr	r1, [pc, #516]	@ (8003b34 <HAL_I2C_Mem_Read+0x4dc>)
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 fa83 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0f5      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003950:	b672      	cpsid	i
}
 8003952:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003986:	4b6c      	ldr	r3, [pc, #432]	@ (8003b38 <HAL_I2C_Mem_Read+0x4e0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b3c <HAL_I2C_Mem_Read+0x4e4>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a1a      	lsrs	r2, r3, #8
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	00da      	lsls	r2, r3, #3
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d118      	bne.n	80039de <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039ce:	b662      	cpsie	i
}
 80039d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0a6      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d1d9      	bne.n	80039a0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a2e:	b662      	cpsie	i
}
 8003a30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a64:	e04e      	b.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb90 	bl	8004190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e058      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d124      	bne.n	8003b04 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d107      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f ae88 	bne.w	800381e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	@ 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	00010004 	.word	0x00010004
 8003b38:	20000098 	.word	0x20000098
 8003b3c:	14f8b589 	.word	0x14f8b589

08003b40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f960 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b90:	d103      	bne.n	8003b9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e05f      	b.n	8003c5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b9e:	897b      	ldrh	r3, [r7, #10]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	6a3a      	ldr	r2, [r7, #32]
 8003bb2:	492d      	ldr	r1, [pc, #180]	@ (8003c68 <I2C_RequestMemoryWrite+0x128>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f9bb 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04c      	b.n	8003c5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bdc:	6a39      	ldr	r1, [r7, #32]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 fa46 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d107      	bne.n	8003c02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e02b      	b.n	8003c5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d105      	bne.n	8003c18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]
 8003c16:	e021      	b.n	8003c5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c18:	893b      	ldrh	r3, [r7, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c28:	6a39      	ldr	r1, [r7, #32]
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fa20 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d107      	bne.n	8003c4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e005      	b.n	8003c5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c52:	893b      	ldrh	r3, [r7, #8]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	00010002 	.word	0x00010002

08003c6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	817b      	strh	r3, [r7, #10]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	813b      	strh	r3, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f8c2 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ccc:	d103      	bne.n	8003cd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0aa      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cda:	897b      	ldrh	r3, [r7, #10]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ce8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	4952      	ldr	r1, [pc, #328]	@ (8003e38 <I2C_RequestMemoryRead+0x1cc>)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f91d 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e097      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d18:	6a39      	ldr	r1, [r7, #32]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9a8 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d107      	bne.n	8003d3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e076      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d48:	893b      	ldrh	r3, [r7, #8]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	e021      	b.n	8003d98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d54:	893b      	ldrh	r3, [r7, #8]
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d64:	6a39      	ldr	r1, [r7, #32]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f982 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d107      	bne.n	8003d8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e050      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8e:	893b      	ldrh	r3, [r7, #8]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9a:	6a39      	ldr	r1, [r7, #32]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f967 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d107      	bne.n	8003dc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e035      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f82b 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dfa:	d103      	bne.n	8003e04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e013      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e08:	897b      	ldrh	r3, [r7, #10]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f043 0301 	orr.w	r3, r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	6a3a      	ldr	r2, [r7, #32]
 8003e1c:	4906      	ldr	r1, [pc, #24]	@ (8003e38 <I2C_RequestMemoryRead+0x1cc>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f886 	bl	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	00010002 	.word	0x00010002

08003e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	e048      	b.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d044      	beq.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe ff13 	bl	8002c80 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d139      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d10d      	bne.n	8003e92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	e00c      	b.n	8003eac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	43da      	mvns	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d116      	bne.n	8003ee0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e023      	b.n	8003f28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d10d      	bne.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	e00c      	b.n	8003f20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf0c      	ite	eq
 8003f18:	2301      	moveq	r3, #1
 8003f1a:	2300      	movne	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d093      	beq.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3e:	e071      	b.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d123      	bne.n	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e067      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d041      	beq.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7fe fe6e 	bl	8002c80 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d136      	bne.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10c      	bne.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e00b      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e021      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	0c1b      	lsrs	r3, r3, #16
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10c      	bne.n	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e00b      	b.n	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	43da      	mvns	r2, r3
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bf14      	ite	ne
 800405a:	2301      	movne	r3, #1
 800405c:	2300      	moveq	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	f47f af6d 	bne.w	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407c:	e034      	b.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8e3 	bl	800424a <I2C_IsAcknowledgeFailed>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e034      	b.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d028      	beq.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fe fdf3 	bl	8002c80 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d11d      	bne.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b80      	cmp	r3, #128	@ 0x80
 80040b8:	d016      	beq.n	80040e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e007      	b.n	80040f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b80      	cmp	r3, #128	@ 0x80
 80040f4:	d1c3      	bne.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	e034      	b.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f89b 	bl	800424a <I2C_IsAcknowledgeFailed>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e034      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d028      	beq.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe fdab 	bl	8002c80 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11d      	bne.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b04      	cmp	r3, #4
 8004148:	d016      	beq.n	8004178 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e007      	b.n	8004188 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d1c3      	bne.n	800410e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800419c:	e049      	b.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d119      	bne.n	80041e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f06f 0210 	mvn.w	r2, #16
 80041b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e030      	b.n	8004242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e0:	f7fe fd4e 	bl	8002c80 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11d      	bne.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d016      	beq.n	8004232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e007      	b.n	8004242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b40      	cmp	r3, #64	@ 0x40
 800423e:	d1ae      	bne.n	800419e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004260:	d11b      	bne.n	800429a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f043 0204 	orr.w	r2, r3, #4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e272      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8087 	beq.w	80043d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c8:	4b92      	ldr	r3, [pc, #584]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d00c      	beq.n	80042ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d112      	bne.n	8004306 <HAL_RCC_OscConfig+0x5e>
 80042e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d10b      	bne.n	8004306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ee:	4b89      	ldr	r3, [pc, #548]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d06c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x12c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d168      	bne.n	80043d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e24c      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x76>
 8004310:	4b80      	ldr	r3, [pc, #512]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7f      	ldr	r2, [pc, #508]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e02e      	b.n	800437c <HAL_RCC_OscConfig+0xd4>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b7b      	ldr	r3, [pc, #492]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7a      	ldr	r2, [pc, #488]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800432c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b78      	ldr	r3, [pc, #480]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a77      	ldr	r2, [pc, #476]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e01d      	b.n	800437c <HAL_RCC_OscConfig+0xd4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0xbc>
 800434a:	4b72      	ldr	r3, [pc, #456]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a71      	ldr	r2, [pc, #452]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b6f      	ldr	r3, [pc, #444]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6e      	ldr	r2, [pc, #440]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0xd4>
 8004364:	4b6b      	ldr	r3, [pc, #428]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6a      	ldr	r2, [pc, #424]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b68      	ldr	r3, [pc, #416]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a67      	ldr	r2, [pc, #412]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fc7c 	bl	8002c80 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fe fc78 	bl	8002c80 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e200      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b5d      	ldr	r3, [pc, #372]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0xe4>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ac:	f7fe fc68 	bl	8002c80 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fe fc64 	bl	8002c80 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1ec      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x10c>
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d063      	beq.n	80044aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ee:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d11c      	bne.n	8004434 <HAL_RCC_OscConfig+0x18c>
 80043fa:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d116      	bne.n	8004434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004406:	4b43      	ldr	r3, [pc, #268]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x176>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e1c0      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b3d      	ldr	r3, [pc, #244]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4939      	ldr	r1, [pc, #228]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004432:	e03a      	b.n	80044aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800443c:	4b36      	ldr	r3, [pc, #216]	@ (8004518 <HAL_RCC_OscConfig+0x270>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe fc1d 	bl	8002c80 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444a:	f7fe fc19 	bl	8002c80 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e1a1      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0f0      	beq.n	800444a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4927      	ldr	r1, [pc, #156]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
 800447c:	e015      	b.n	80044aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447e:	4b26      	ldr	r3, [pc, #152]	@ (8004518 <HAL_RCC_OscConfig+0x270>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe fbfc 	bl	8002c80 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448c:	f7fe fbf8 	bl	8002c80 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e180      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	4b1d      	ldr	r3, [pc, #116]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03a      	beq.n	800452c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d019      	beq.n	80044f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_RCC_OscConfig+0x274>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c4:	f7fe fbdc 	bl	8002c80 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044cc:	f7fe fbd8 	bl	8002c80 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e160      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <HAL_RCC_OscConfig+0x26c>)
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ea:	2001      	movs	r0, #1
 80044ec:	f000 faba 	bl	8004a64 <RCC_Delay>
 80044f0:	e01c      	b.n	800452c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <HAL_RCC_OscConfig+0x274>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fe fbc2 	bl	8002c80 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fe:	e00f      	b.n	8004520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004500:	f7fe fbbe 	bl	8002c80 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d908      	bls.n	8004520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e146      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	42420000 	.word	0x42420000
 800451c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004520:	4b92      	ldr	r3, [pc, #584]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e9      	bne.n	8004500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a6 	beq.w	8004686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800453e:	4b8b      	ldr	r3, [pc, #556]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10d      	bne.n	8004566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4a87      	ldr	r2, [pc, #540]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004554:	61d3      	str	r3, [r2, #28]
 8004556:	4b85      	ldr	r3, [pc, #532]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455e:	60bb      	str	r3, [r7, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004562:	2301      	movs	r3, #1
 8004564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	4b82      	ldr	r3, [pc, #520]	@ (8004770 <HAL_RCC_OscConfig+0x4c8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d118      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004572:	4b7f      	ldr	r3, [pc, #508]	@ (8004770 <HAL_RCC_OscConfig+0x4c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7e      	ldr	r2, [pc, #504]	@ (8004770 <HAL_RCC_OscConfig+0x4c8>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800457e:	f7fe fb7f 	bl	8002c80 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004586:	f7fe fb7b 	bl	8002c80 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b64      	cmp	r3, #100	@ 0x64
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e103      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	4b75      	ldr	r3, [pc, #468]	@ (8004770 <HAL_RCC_OscConfig+0x4c8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d106      	bne.n	80045ba <HAL_RCC_OscConfig+0x312>
 80045ac:	4b6f      	ldr	r3, [pc, #444]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a6e      	ldr	r2, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	e02d      	b.n	8004616 <HAL_RCC_OscConfig+0x36e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <HAL_RCC_OscConfig+0x334>
 80045c2:	4b6a      	ldr	r3, [pc, #424]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4a69      	ldr	r2, [pc, #420]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6213      	str	r3, [r2, #32]
 80045ce:	4b67      	ldr	r3, [pc, #412]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a66      	ldr	r2, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	6213      	str	r3, [r2, #32]
 80045da:	e01c      	b.n	8004616 <HAL_RCC_OscConfig+0x36e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b05      	cmp	r3, #5
 80045e2:	d10c      	bne.n	80045fe <HAL_RCC_OscConfig+0x356>
 80045e4:	4b61      	ldr	r3, [pc, #388]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4a60      	ldr	r2, [pc, #384]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	6213      	str	r3, [r2, #32]
 80045f0:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6213      	str	r3, [r2, #32]
 80045fc:	e00b      	b.n	8004616 <HAL_RCC_OscConfig+0x36e>
 80045fe:	4b5b      	ldr	r3, [pc, #364]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4a5a      	ldr	r2, [pc, #360]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6213      	str	r3, [r2, #32]
 800460a:	4b58      	ldr	r3, [pc, #352]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a57      	ldr	r2, [pc, #348]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d015      	beq.n	800464a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461e:	f7fe fb2f 	bl	8002c80 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004624:	e00a      	b.n	800463c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004626:	f7fe fb2b 	bl	8002c80 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004634:	4293      	cmp	r3, r2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e0b1      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463c:	4b4b      	ldr	r3, [pc, #300]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ee      	beq.n	8004626 <HAL_RCC_OscConfig+0x37e>
 8004648:	e014      	b.n	8004674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464a:	f7fe fb19 	bl	8002c80 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fe fb15 	bl	8002c80 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e09b      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004668:	4b40      	ldr	r3, [pc, #256]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ee      	bne.n	8004652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d105      	bne.n	8004686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467a:	4b3c      	ldr	r3, [pc, #240]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4a3b      	ldr	r2, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8087 	beq.w	800479e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004690:	4b36      	ldr	r3, [pc, #216]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b08      	cmp	r3, #8
 800469a:	d061      	beq.n	8004760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d146      	bne.n	8004732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a4:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_RCC_OscConfig+0x4cc>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fe fae9 	bl	8002c80 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fe fae5 	bl	8002c80 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e06d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c4:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d8:	d108      	bne.n	80046ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046da:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4921      	ldr	r1, [pc, #132]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ec:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a19      	ldr	r1, [r3, #32]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	430b      	orrs	r3, r1
 80046fe:	491b      	ldr	r1, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004704:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470a:	f7fe fab9 	bl	8002c80 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004712:	f7fe fab5 	bl	8002c80 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x46a>
 8004730:	e035      	b.n	800479e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_RCC_OscConfig+0x4cc>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fe faa2 	bl	8002c80 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004740:	f7fe fa9e 	bl	8002c80 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e026      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCC_OscConfig+0x4c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x498>
 800475e:	e01e      	b.n	800479e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e019      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
 800476c:	40021000 	.word	0x40021000
 8004770:	40007000 	.word	0x40007000
 8004774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <HAL_RCC_OscConfig+0x500>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	429a      	cmp	r2, r3
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000

080047ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0d0      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b6a      	ldr	r3, [pc, #424]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b67      	ldr	r3, [pc, #412]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4965      	ldr	r1, [pc, #404]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4a58      	ldr	r2, [pc, #352]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800480e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a52      	ldr	r2, [pc, #328]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800482a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d040      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d115      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b41      	ldr	r3, [pc, #260]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e073      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3d      	ldr	r3, [pc, #244]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06b      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b39      	ldr	r3, [pc, #228]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4936      	ldr	r1, [pc, #216]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800489c:	f7fe f9f0 	bl	8002c80 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fe f9ec 	bl	8002c80 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e053      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b27      	ldr	r3, [pc, #156]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d210      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b24      	ldr	r3, [pc, #144]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 0207 	bic.w	r2, r3, #7
 80048e2:	4922      	ldr	r1, [pc, #136]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	@ (800496c <HAL_RCC_ClockConfig+0x1c0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	@ (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <HAL_RCC_ClockConfig+0x1cc>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	@ (800497c <HAL_RCC_ClockConfig+0x1d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe f94e 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40022000 	.word	0x40022000
 8004970:	40021000 	.word	0x40021000
 8004974:	0800af80 	.word	0x0800af80
 8004978:	20000098 	.word	0x20000098
 800497c:	2000009c 	.word	0x2000009c

08004980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	2300      	movs	r3, #0
 8004994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800499a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x94>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x30>
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x36>
 80049ae:	e027      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b0:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80049b2:	613b      	str	r3, [r7, #16]
      break;
 80049b4:	e027      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	0c9b      	lsrs	r3, r3, #18
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049ce:	4b11      	ldr	r3, [pc, #68]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x94>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	0c5b      	lsrs	r3, r3, #17
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	4a11      	ldr	r2, [pc, #68]	@ (8004a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049da:	5cd3      	ldrb	r3, [r2, r3]
 80049dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80049e2:	fb03 f202 	mul.w	r2, r3, r2
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e004      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	613b      	str	r3, [r7, #16]
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a02:	613b      	str	r3, [r7, #16]
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	693b      	ldr	r3, [r7, #16]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	007a1200 	.word	0x007a1200
 8004a1c:	0800afa0 	.word	0x0800afa0
 8004a20:	0800afb0 	.word	0x0800afb0
 8004a24:	003d0900 	.word	0x003d0900

08004a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b02      	ldr	r3, [pc, #8]	@ (8004a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	20000098 	.word	0x20000098

08004a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a40:	f7ff fff2 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	0a1b      	lsrs	r3, r3, #8
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	@ (8004a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	0800af90 	.word	0x0800af90

08004a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <RCC_Delay+0x34>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <RCC_Delay+0x38>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a5b      	lsrs	r3, r3, #9
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a80:	bf00      	nop
  }
  while (Delay --);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	60fa      	str	r2, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f9      	bne.n	8004a80 <RCC_Delay+0x1c>
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20000098 	.word	0x20000098
 8004a9c:	10624dd3 	.word	0x10624dd3

08004aa0 <__cvt>:
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa6:	461d      	mov	r5, r3
 8004aa8:	bfbb      	ittet	lt
 8004aaa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004aae:	461d      	movlt	r5, r3
 8004ab0:	2300      	movge	r3, #0
 8004ab2:	232d      	movlt	r3, #45	@ 0x2d
 8004ab4:	b088      	sub	sp, #32
 8004ab6:	4614      	mov	r4, r2
 8004ab8:	bfb8      	it	lt
 8004aba:	4614      	movlt	r4, r2
 8004abc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004abe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004ac0:	7013      	strb	r3, [r2, #0]
 8004ac2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004ac8:	f023 0820 	bic.w	r8, r3, #32
 8004acc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ad0:	d005      	beq.n	8004ade <__cvt+0x3e>
 8004ad2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ad6:	d100      	bne.n	8004ada <__cvt+0x3a>
 8004ad8:	3601      	adds	r6, #1
 8004ada:	2302      	movs	r3, #2
 8004adc:	e000      	b.n	8004ae0 <__cvt+0x40>
 8004ade:	2303      	movs	r3, #3
 8004ae0:	aa07      	add	r2, sp, #28
 8004ae2:	9204      	str	r2, [sp, #16]
 8004ae4:	aa06      	add	r2, sp, #24
 8004ae6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004aea:	e9cd 3600 	strd	r3, r6, [sp]
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	f001 f8a9 	bl	8005c48 <_dtoa_r>
 8004af6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004afa:	4607      	mov	r7, r0
 8004afc:	d119      	bne.n	8004b32 <__cvt+0x92>
 8004afe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b00:	07db      	lsls	r3, r3, #31
 8004b02:	d50e      	bpl.n	8004b22 <__cvt+0x82>
 8004b04:	eb00 0906 	add.w	r9, r0, r6
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fb ff4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004b14:	b108      	cbz	r0, 8004b1a <__cvt+0x7a>
 8004b16:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b1a:	2230      	movs	r2, #48	@ 0x30
 8004b1c:	9b07      	ldr	r3, [sp, #28]
 8004b1e:	454b      	cmp	r3, r9
 8004b20:	d31e      	bcc.n	8004b60 <__cvt+0xc0>
 8004b22:	4638      	mov	r0, r7
 8004b24:	9b07      	ldr	r3, [sp, #28]
 8004b26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004b28:	1bdb      	subs	r3, r3, r7
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	b008      	add	sp, #32
 8004b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b36:	eb00 0906 	add.w	r9, r0, r6
 8004b3a:	d1e5      	bne.n	8004b08 <__cvt+0x68>
 8004b3c:	7803      	ldrb	r3, [r0, #0]
 8004b3e:	2b30      	cmp	r3, #48	@ 0x30
 8004b40:	d10a      	bne.n	8004b58 <__cvt+0xb8>
 8004b42:	2200      	movs	r2, #0
 8004b44:	2300      	movs	r3, #0
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f7fb ff2d 	bl	80009a8 <__aeabi_dcmpeq>
 8004b4e:	b918      	cbnz	r0, 8004b58 <__cvt+0xb8>
 8004b50:	f1c6 0601 	rsb	r6, r6, #1
 8004b54:	f8ca 6000 	str.w	r6, [sl]
 8004b58:	f8da 3000 	ldr.w	r3, [sl]
 8004b5c:	4499      	add	r9, r3
 8004b5e:	e7d3      	b.n	8004b08 <__cvt+0x68>
 8004b60:	1c59      	adds	r1, r3, #1
 8004b62:	9107      	str	r1, [sp, #28]
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e7d9      	b.n	8004b1c <__cvt+0x7c>

08004b68 <__exponent>:
 8004b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	bfb6      	itet	lt
 8004b6e:	232d      	movlt	r3, #45	@ 0x2d
 8004b70:	232b      	movge	r3, #43	@ 0x2b
 8004b72:	4249      	neglt	r1, r1
 8004b74:	2909      	cmp	r1, #9
 8004b76:	7002      	strb	r2, [r0, #0]
 8004b78:	7043      	strb	r3, [r0, #1]
 8004b7a:	dd29      	ble.n	8004bd0 <__exponent+0x68>
 8004b7c:	f10d 0307 	add.w	r3, sp, #7
 8004b80:	461d      	mov	r5, r3
 8004b82:	270a      	movs	r7, #10
 8004b84:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b88:	461a      	mov	r2, r3
 8004b8a:	fb07 1416 	mls	r4, r7, r6, r1
 8004b8e:	3430      	adds	r4, #48	@ 0x30
 8004b90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b94:	460c      	mov	r4, r1
 8004b96:	2c63      	cmp	r4, #99	@ 0x63
 8004b98:	4631      	mov	r1, r6
 8004b9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b9e:	dcf1      	bgt.n	8004b84 <__exponent+0x1c>
 8004ba0:	3130      	adds	r1, #48	@ 0x30
 8004ba2:	1e94      	subs	r4, r2, #2
 8004ba4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ba8:	4623      	mov	r3, r4
 8004baa:	1c41      	adds	r1, r0, #1
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	d30a      	bcc.n	8004bc6 <__exponent+0x5e>
 8004bb0:	f10d 0309 	add.w	r3, sp, #9
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	42ac      	cmp	r4, r5
 8004bb8:	bf88      	it	hi
 8004bba:	2300      	movhi	r3, #0
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	4403      	add	r3, r0
 8004bc0:	1a18      	subs	r0, r3, r0
 8004bc2:	b003      	add	sp, #12
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004bca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bce:	e7ed      	b.n	8004bac <__exponent+0x44>
 8004bd0:	2330      	movs	r3, #48	@ 0x30
 8004bd2:	3130      	adds	r1, #48	@ 0x30
 8004bd4:	7083      	strb	r3, [r0, #2]
 8004bd6:	70c1      	strb	r1, [r0, #3]
 8004bd8:	1d03      	adds	r3, r0, #4
 8004bda:	e7f1      	b.n	8004bc0 <__exponent+0x58>

08004bdc <_printf_float>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	b091      	sub	sp, #68	@ 0x44
 8004be2:	460c      	mov	r4, r1
 8004be4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004be8:	4616      	mov	r6, r2
 8004bea:	461f      	mov	r7, r3
 8004bec:	4605      	mov	r5, r0
 8004bee:	f000 ff0b 	bl	8005a08 <_localeconv_r>
 8004bf2:	6803      	ldr	r3, [r0, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	9308      	str	r3, [sp, #32]
 8004bf8:	f7fb faaa 	bl	8000150 <strlen>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8004c00:	f8d8 3000 	ldr.w	r3, [r8]
 8004c04:	9009      	str	r0, [sp, #36]	@ 0x24
 8004c06:	3307      	adds	r3, #7
 8004c08:	f023 0307 	bic.w	r3, r3, #7
 8004c0c:	f103 0208 	add.w	r2, r3, #8
 8004c10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c14:	f8d4 b000 	ldr.w	fp, [r4]
 8004c18:	f8c8 2000 	str.w	r2, [r8]
 8004c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c26:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c36:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea8 <_printf_float+0x2cc>)
 8004c38:	f7fb fee8 	bl	8000a0c <__aeabi_dcmpun>
 8004c3c:	bb70      	cbnz	r0, 8004c9c <_printf_float+0xc0>
 8004c3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c42:	f04f 32ff 	mov.w	r2, #4294967295
 8004c46:	4b98      	ldr	r3, [pc, #608]	@ (8004ea8 <_printf_float+0x2cc>)
 8004c48:	f7fb fec2 	bl	80009d0 <__aeabi_dcmple>
 8004c4c:	bb30      	cbnz	r0, 8004c9c <_printf_float+0xc0>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2300      	movs	r3, #0
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb feb1 	bl	80009bc <__aeabi_dcmplt>
 8004c5a:	b110      	cbz	r0, 8004c62 <_printf_float+0x86>
 8004c5c:	232d      	movs	r3, #45	@ 0x2d
 8004c5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c62:	4a92      	ldr	r2, [pc, #584]	@ (8004eac <_printf_float+0x2d0>)
 8004c64:	4b92      	ldr	r3, [pc, #584]	@ (8004eb0 <_printf_float+0x2d4>)
 8004c66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c6a:	bf94      	ite	ls
 8004c6c:	4690      	movls	r8, r2
 8004c6e:	4698      	movhi	r8, r3
 8004c70:	2303      	movs	r3, #3
 8004c72:	f04f 0900 	mov.w	r9, #0
 8004c76:	6123      	str	r3, [r4, #16]
 8004c78:	f02b 0304 	bic.w	r3, fp, #4
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	4633      	mov	r3, r6
 8004c80:	4621      	mov	r1, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	9700      	str	r7, [sp, #0]
 8004c86:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c88:	f000 f9d4 	bl	8005034 <_printf_common>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	f040 8090 	bne.w	8004db2 <_printf_float+0x1d6>
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	b011      	add	sp, #68	@ 0x44
 8004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	f7fb feb2 	bl	8000a0c <__aeabi_dcmpun>
 8004ca8:	b148      	cbz	r0, 8004cbe <_printf_float+0xe2>
 8004caa:	464b      	mov	r3, r9
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfb8      	it	lt
 8004cb0:	232d      	movlt	r3, #45	@ 0x2d
 8004cb2:	4a80      	ldr	r2, [pc, #512]	@ (8004eb4 <_printf_float+0x2d8>)
 8004cb4:	bfb8      	it	lt
 8004cb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cba:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb8 <_printf_float+0x2dc>)
 8004cbc:	e7d3      	b.n	8004c66 <_printf_float+0x8a>
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	d13f      	bne.n	8004d48 <_printf_float+0x16c>
 8004cc8:	2306      	movs	r3, #6
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	9206      	str	r2, [sp, #24]
 8004cd6:	aa0e      	add	r2, sp, #56	@ 0x38
 8004cd8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004cdc:	aa0d      	add	r2, sp, #52	@ 0x34
 8004cde:	9203      	str	r2, [sp, #12]
 8004ce0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004ce4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ce8:	6863      	ldr	r3, [r4, #4]
 8004cea:	4642      	mov	r2, r8
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	4628      	mov	r0, r5
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	910a      	str	r1, [sp, #40]	@ 0x28
 8004cf4:	f7ff fed4 	bl	8004aa0 <__cvt>
 8004cf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cfa:	4680      	mov	r8, r0
 8004cfc:	2947      	cmp	r1, #71	@ 0x47
 8004cfe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004d00:	d128      	bne.n	8004d54 <_printf_float+0x178>
 8004d02:	1cc8      	adds	r0, r1, #3
 8004d04:	db02      	blt.n	8004d0c <_printf_float+0x130>
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	4299      	cmp	r1, r3
 8004d0a:	dd40      	ble.n	8004d8e <_printf_float+0x1b2>
 8004d0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d10:	fa5f fa8a 	uxtb.w	sl, sl
 8004d14:	4652      	mov	r2, sl
 8004d16:	3901      	subs	r1, #1
 8004d18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d1c:	910d      	str	r1, [sp, #52]	@ 0x34
 8004d1e:	f7ff ff23 	bl	8004b68 <__exponent>
 8004d22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d24:	4681      	mov	r9, r0
 8004d26:	1813      	adds	r3, r2, r0
 8004d28:	2a01      	cmp	r2, #1
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	dc02      	bgt.n	8004d34 <_printf_float+0x158>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	07d2      	lsls	r2, r2, #31
 8004d32:	d501      	bpl.n	8004d38 <_printf_float+0x15c>
 8004d34:	3301      	adds	r3, #1
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d09e      	beq.n	8004c7e <_printf_float+0xa2>
 8004d40:	232d      	movs	r3, #45	@ 0x2d
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d46:	e79a      	b.n	8004c7e <_printf_float+0xa2>
 8004d48:	2947      	cmp	r1, #71	@ 0x47
 8004d4a:	d1bf      	bne.n	8004ccc <_printf_float+0xf0>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1bd      	bne.n	8004ccc <_printf_float+0xf0>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e7ba      	b.n	8004cca <_printf_float+0xee>
 8004d54:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d58:	d9dc      	bls.n	8004d14 <_printf_float+0x138>
 8004d5a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d5e:	d118      	bne.n	8004d92 <_printf_float+0x1b6>
 8004d60:	2900      	cmp	r1, #0
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	dd0b      	ble.n	8004d7e <_printf_float+0x1a2>
 8004d66:	6121      	str	r1, [r4, #16]
 8004d68:	b913      	cbnz	r3, 8004d70 <_printf_float+0x194>
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	07d0      	lsls	r0, r2, #31
 8004d6e:	d502      	bpl.n	8004d76 <_printf_float+0x19a>
 8004d70:	3301      	adds	r3, #1
 8004d72:	440b      	add	r3, r1
 8004d74:	6123      	str	r3, [r4, #16]
 8004d76:	f04f 0900 	mov.w	r9, #0
 8004d7a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d7c:	e7dc      	b.n	8004d38 <_printf_float+0x15c>
 8004d7e:	b913      	cbnz	r3, 8004d86 <_printf_float+0x1aa>
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	07d2      	lsls	r2, r2, #31
 8004d84:	d501      	bpl.n	8004d8a <_printf_float+0x1ae>
 8004d86:	3302      	adds	r3, #2
 8004d88:	e7f4      	b.n	8004d74 <_printf_float+0x198>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7f2      	b.n	8004d74 <_printf_float+0x198>
 8004d8e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d94:	4299      	cmp	r1, r3
 8004d96:	db05      	blt.n	8004da4 <_printf_float+0x1c8>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	6121      	str	r1, [r4, #16]
 8004d9c:	07d8      	lsls	r0, r3, #31
 8004d9e:	d5ea      	bpl.n	8004d76 <_printf_float+0x19a>
 8004da0:	1c4b      	adds	r3, r1, #1
 8004da2:	e7e7      	b.n	8004d74 <_printf_float+0x198>
 8004da4:	2900      	cmp	r1, #0
 8004da6:	bfcc      	ite	gt
 8004da8:	2201      	movgt	r2, #1
 8004daa:	f1c1 0202 	rsble	r2, r1, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	e7e0      	b.n	8004d74 <_printf_float+0x198>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	055a      	lsls	r2, r3, #21
 8004db6:	d407      	bmi.n	8004dc8 <_printf_float+0x1ec>
 8004db8:	6923      	ldr	r3, [r4, #16]
 8004dba:	4642      	mov	r2, r8
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d12b      	bne.n	8004e1e <_printf_float+0x242>
 8004dc6:	e764      	b.n	8004c92 <_printf_float+0xb6>
 8004dc8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004dcc:	f240 80dc 	bls.w	8004f88 <_printf_float+0x3ac>
 8004dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f7fb fde6 	bl	80009a8 <__aeabi_dcmpeq>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d033      	beq.n	8004e48 <_printf_float+0x26c>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4631      	mov	r1, r6
 8004de4:	4628      	mov	r0, r5
 8004de6:	4a35      	ldr	r2, [pc, #212]	@ (8004ebc <_printf_float+0x2e0>)
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f af51 	beq.w	8004c92 <_printf_float+0xb6>
 8004df0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004df4:	4543      	cmp	r3, r8
 8004df6:	db02      	blt.n	8004dfe <_printf_float+0x222>
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	07d8      	lsls	r0, r3, #31
 8004dfc:	d50f      	bpl.n	8004e1e <_printf_float+0x242>
 8004dfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f af42 	beq.w	8004c92 <_printf_float+0xb6>
 8004e0e:	f04f 0900 	mov.w	r9, #0
 8004e12:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e16:	f104 0a1a 	add.w	sl, r4, #26
 8004e1a:	45c8      	cmp	r8, r9
 8004e1c:	dc09      	bgt.n	8004e32 <_printf_float+0x256>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	079b      	lsls	r3, r3, #30
 8004e22:	f100 8102 	bmi.w	800502a <_printf_float+0x44e>
 8004e26:	68e0      	ldr	r0, [r4, #12]
 8004e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e2a:	4298      	cmp	r0, r3
 8004e2c:	bfb8      	it	lt
 8004e2e:	4618      	movlt	r0, r3
 8004e30:	e731      	b.n	8004c96 <_printf_float+0xba>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4652      	mov	r2, sl
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	f43f af28 	beq.w	8004c92 <_printf_float+0xb6>
 8004e42:	f109 0901 	add.w	r9, r9, #1
 8004e46:	e7e8      	b.n	8004e1a <_printf_float+0x23e>
 8004e48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dc38      	bgt.n	8004ec0 <_printf_float+0x2e4>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <_printf_float+0x2e0>)
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	f43f af1a 	beq.w	8004c92 <_printf_float+0xb6>
 8004e5e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004e62:	ea59 0303 	orrs.w	r3, r9, r3
 8004e66:	d102      	bne.n	8004e6e <_printf_float+0x292>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	07d9      	lsls	r1, r3, #31
 8004e6c:	d5d7      	bpl.n	8004e1e <_printf_float+0x242>
 8004e6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e72:	4631      	mov	r1, r6
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b8      	blx	r7
 8004e78:	3001      	adds	r0, #1
 8004e7a:	f43f af0a 	beq.w	8004c92 <_printf_float+0xb6>
 8004e7e:	f04f 0a00 	mov.w	sl, #0
 8004e82:	f104 0b1a 	add.w	fp, r4, #26
 8004e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e88:	425b      	negs	r3, r3
 8004e8a:	4553      	cmp	r3, sl
 8004e8c:	dc01      	bgt.n	8004e92 <_printf_float+0x2b6>
 8004e8e:	464b      	mov	r3, r9
 8004e90:	e793      	b.n	8004dba <_printf_float+0x1de>
 8004e92:	2301      	movs	r3, #1
 8004e94:	465a      	mov	r2, fp
 8004e96:	4631      	mov	r1, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f aef8 	beq.w	8004c92 <_printf_float+0xb6>
 8004ea2:	f10a 0a01 	add.w	sl, sl, #1
 8004ea6:	e7ee      	b.n	8004e86 <_printf_float+0x2aa>
 8004ea8:	7fefffff 	.word	0x7fefffff
 8004eac:	0800afb2 	.word	0x0800afb2
 8004eb0:	0800afb6 	.word	0x0800afb6
 8004eb4:	0800afba 	.word	0x0800afba
 8004eb8:	0800afbe 	.word	0x0800afbe
 8004ebc:	0800afc2 	.word	0x0800afc2
 8004ec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ec2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004ec6:	4553      	cmp	r3, sl
 8004ec8:	bfa8      	it	ge
 8004eca:	4653      	movge	r3, sl
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	4699      	mov	r9, r3
 8004ed0:	dc36      	bgt.n	8004f40 <_printf_float+0x364>
 8004ed2:	f04f 0b00 	mov.w	fp, #0
 8004ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eda:	f104 021a 	add.w	r2, r4, #26
 8004ede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ee2:	eba3 0309 	sub.w	r3, r3, r9
 8004ee6:	455b      	cmp	r3, fp
 8004ee8:	dc31      	bgt.n	8004f4e <_printf_float+0x372>
 8004eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eec:	459a      	cmp	sl, r3
 8004eee:	dc3a      	bgt.n	8004f66 <_printf_float+0x38a>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	07da      	lsls	r2, r3, #31
 8004ef4:	d437      	bmi.n	8004f66 <_printf_float+0x38a>
 8004ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ef8:	ebaa 0903 	sub.w	r9, sl, r3
 8004efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004efe:	ebaa 0303 	sub.w	r3, sl, r3
 8004f02:	4599      	cmp	r9, r3
 8004f04:	bfa8      	it	ge
 8004f06:	4699      	movge	r9, r3
 8004f08:	f1b9 0f00 	cmp.w	r9, #0
 8004f0c:	dc33      	bgt.n	8004f76 <_printf_float+0x39a>
 8004f0e:	f04f 0800 	mov.w	r8, #0
 8004f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f16:	f104 0b1a 	add.w	fp, r4, #26
 8004f1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8004f20:	eba3 0309 	sub.w	r3, r3, r9
 8004f24:	4543      	cmp	r3, r8
 8004f26:	f77f af7a 	ble.w	8004e1e <_printf_float+0x242>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	465a      	mov	r2, fp
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f aeac 	beq.w	8004c92 <_printf_float+0xb6>
 8004f3a:	f108 0801 	add.w	r8, r8, #1
 8004f3e:	e7ec      	b.n	8004f1a <_printf_float+0x33e>
 8004f40:	4642      	mov	r2, r8
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1c2      	bne.n	8004ed2 <_printf_float+0x2f6>
 8004f4c:	e6a1      	b.n	8004c92 <_printf_float+0xb6>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	920a      	str	r2, [sp, #40]	@ 0x28
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f ae9a 	beq.w	8004c92 <_printf_float+0xb6>
 8004f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f60:	f10b 0b01 	add.w	fp, fp, #1
 8004f64:	e7bb      	b.n	8004ede <_printf_float+0x302>
 8004f66:	4631      	mov	r1, r6
 8004f68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	47b8      	blx	r7
 8004f70:	3001      	adds	r0, #1
 8004f72:	d1c0      	bne.n	8004ef6 <_printf_float+0x31a>
 8004f74:	e68d      	b.n	8004c92 <_printf_float+0xb6>
 8004f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f78:	464b      	mov	r3, r9
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	4442      	add	r2, r8
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	d1c3      	bne.n	8004f0e <_printf_float+0x332>
 8004f86:	e684      	b.n	8004c92 <_printf_float+0xb6>
 8004f88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f8c:	f1ba 0f01 	cmp.w	sl, #1
 8004f90:	dc01      	bgt.n	8004f96 <_printf_float+0x3ba>
 8004f92:	07db      	lsls	r3, r3, #31
 8004f94:	d536      	bpl.n	8005004 <_printf_float+0x428>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4642      	mov	r2, r8
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f ae76 	beq.w	8004c92 <_printf_float+0xb6>
 8004fa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f ae6e 	beq.w	8004c92 <_printf_float+0xb6>
 8004fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc2:	f7fb fcf1 	bl	80009a8 <__aeabi_dcmpeq>
 8004fc6:	b9c0      	cbnz	r0, 8004ffa <_printf_float+0x41e>
 8004fc8:	4653      	mov	r3, sl
 8004fca:	f108 0201 	add.w	r2, r8, #1
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d10c      	bne.n	8004ff2 <_printf_float+0x416>
 8004fd8:	e65b      	b.n	8004c92 <_printf_float+0xb6>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	465a      	mov	r2, fp
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f ae54 	beq.w	8004c92 <_printf_float+0xb6>
 8004fea:	f108 0801 	add.w	r8, r8, #1
 8004fee:	45d0      	cmp	r8, sl
 8004ff0:	dbf3      	blt.n	8004fda <_printf_float+0x3fe>
 8004ff2:	464b      	mov	r3, r9
 8004ff4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ff8:	e6e0      	b.n	8004dbc <_printf_float+0x1e0>
 8004ffa:	f04f 0800 	mov.w	r8, #0
 8004ffe:	f104 0b1a 	add.w	fp, r4, #26
 8005002:	e7f4      	b.n	8004fee <_printf_float+0x412>
 8005004:	2301      	movs	r3, #1
 8005006:	4642      	mov	r2, r8
 8005008:	e7e1      	b.n	8004fce <_printf_float+0x3f2>
 800500a:	2301      	movs	r3, #1
 800500c:	464a      	mov	r2, r9
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	47b8      	blx	r7
 8005014:	3001      	adds	r0, #1
 8005016:	f43f ae3c 	beq.w	8004c92 <_printf_float+0xb6>
 800501a:	f108 0801 	add.w	r8, r8, #1
 800501e:	68e3      	ldr	r3, [r4, #12]
 8005020:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005022:	1a5b      	subs	r3, r3, r1
 8005024:	4543      	cmp	r3, r8
 8005026:	dcf0      	bgt.n	800500a <_printf_float+0x42e>
 8005028:	e6fd      	b.n	8004e26 <_printf_float+0x24a>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	f104 0919 	add.w	r9, r4, #25
 8005032:	e7f4      	b.n	800501e <_printf_float+0x442>

08005034 <_printf_common>:
 8005034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	4616      	mov	r6, r2
 800503a:	4698      	mov	r8, r3
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	690b      	ldr	r3, [r1, #16]
 8005040:	4607      	mov	r7, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	bfb8      	it	lt
 8005046:	4613      	movlt	r3, r2
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800504e:	460c      	mov	r4, r1
 8005050:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005054:	b10a      	cbz	r2, 800505a <_printf_common+0x26>
 8005056:	3301      	adds	r3, #1
 8005058:	6033      	str	r3, [r6, #0]
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	0699      	lsls	r1, r3, #26
 800505e:	bf42      	ittt	mi
 8005060:	6833      	ldrmi	r3, [r6, #0]
 8005062:	3302      	addmi	r3, #2
 8005064:	6033      	strmi	r3, [r6, #0]
 8005066:	6825      	ldr	r5, [r4, #0]
 8005068:	f015 0506 	ands.w	r5, r5, #6
 800506c:	d106      	bne.n	800507c <_printf_common+0x48>
 800506e:	f104 0a19 	add.w	sl, r4, #25
 8005072:	68e3      	ldr	r3, [r4, #12]
 8005074:	6832      	ldr	r2, [r6, #0]
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	42ab      	cmp	r3, r5
 800507a:	dc2b      	bgt.n	80050d4 <_printf_common+0xa0>
 800507c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	3b00      	subs	r3, #0
 8005084:	bf18      	it	ne
 8005086:	2301      	movne	r3, #1
 8005088:	0692      	lsls	r2, r2, #26
 800508a:	d430      	bmi.n	80050ee <_printf_common+0xba>
 800508c:	4641      	mov	r1, r8
 800508e:	4638      	mov	r0, r7
 8005090:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005094:	47c8      	blx	r9
 8005096:	3001      	adds	r0, #1
 8005098:	d023      	beq.n	80050e2 <_printf_common+0xae>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	6922      	ldr	r2, [r4, #16]
 800509e:	f003 0306 	and.w	r3, r3, #6
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	bf14      	ite	ne
 80050a6:	2500      	movne	r5, #0
 80050a8:	6833      	ldreq	r3, [r6, #0]
 80050aa:	f04f 0600 	mov.w	r6, #0
 80050ae:	bf08      	it	eq
 80050b0:	68e5      	ldreq	r5, [r4, #12]
 80050b2:	f104 041a 	add.w	r4, r4, #26
 80050b6:	bf08      	it	eq
 80050b8:	1aed      	subeq	r5, r5, r3
 80050ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050be:	bf08      	it	eq
 80050c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c4:	4293      	cmp	r3, r2
 80050c6:	bfc4      	itt	gt
 80050c8:	1a9b      	subgt	r3, r3, r2
 80050ca:	18ed      	addgt	r5, r5, r3
 80050cc:	42b5      	cmp	r5, r6
 80050ce:	d11a      	bne.n	8005106 <_printf_common+0xd2>
 80050d0:	2000      	movs	r0, #0
 80050d2:	e008      	b.n	80050e6 <_printf_common+0xb2>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4652      	mov	r2, sl
 80050d8:	4641      	mov	r1, r8
 80050da:	4638      	mov	r0, r7
 80050dc:	47c8      	blx	r9
 80050de:	3001      	adds	r0, #1
 80050e0:	d103      	bne.n	80050ea <_printf_common+0xb6>
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	3501      	adds	r5, #1
 80050ec:	e7c1      	b.n	8005072 <_printf_common+0x3e>
 80050ee:	2030      	movs	r0, #48	@ 0x30
 80050f0:	18e1      	adds	r1, r4, r3
 80050f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050fc:	4422      	add	r2, r4
 80050fe:	3302      	adds	r3, #2
 8005100:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005104:	e7c2      	b.n	800508c <_printf_common+0x58>
 8005106:	2301      	movs	r3, #1
 8005108:	4622      	mov	r2, r4
 800510a:	4641      	mov	r1, r8
 800510c:	4638      	mov	r0, r7
 800510e:	47c8      	blx	r9
 8005110:	3001      	adds	r0, #1
 8005112:	d0e6      	beq.n	80050e2 <_printf_common+0xae>
 8005114:	3601      	adds	r6, #1
 8005116:	e7d9      	b.n	80050cc <_printf_common+0x98>

08005118 <_printf_i>:
 8005118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	7e0f      	ldrb	r7, [r1, #24]
 800511e:	4691      	mov	r9, r2
 8005120:	2f78      	cmp	r7, #120	@ 0x78
 8005122:	4680      	mov	r8, r0
 8005124:	460c      	mov	r4, r1
 8005126:	469a      	mov	sl, r3
 8005128:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800512a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800512e:	d807      	bhi.n	8005140 <_printf_i+0x28>
 8005130:	2f62      	cmp	r7, #98	@ 0x62
 8005132:	d80a      	bhi.n	800514a <_printf_i+0x32>
 8005134:	2f00      	cmp	r7, #0
 8005136:	f000 80d3 	beq.w	80052e0 <_printf_i+0x1c8>
 800513a:	2f58      	cmp	r7, #88	@ 0x58
 800513c:	f000 80ba 	beq.w	80052b4 <_printf_i+0x19c>
 8005140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005148:	e03a      	b.n	80051c0 <_printf_i+0xa8>
 800514a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800514e:	2b15      	cmp	r3, #21
 8005150:	d8f6      	bhi.n	8005140 <_printf_i+0x28>
 8005152:	a101      	add	r1, pc, #4	@ (adr r1, 8005158 <_printf_i+0x40>)
 8005154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005158:	080051b1 	.word	0x080051b1
 800515c:	080051c5 	.word	0x080051c5
 8005160:	08005141 	.word	0x08005141
 8005164:	08005141 	.word	0x08005141
 8005168:	08005141 	.word	0x08005141
 800516c:	08005141 	.word	0x08005141
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005141 	.word	0x08005141
 8005178:	08005141 	.word	0x08005141
 800517c:	08005141 	.word	0x08005141
 8005180:	08005141 	.word	0x08005141
 8005184:	080052c7 	.word	0x080052c7
 8005188:	080051ef 	.word	0x080051ef
 800518c:	08005281 	.word	0x08005281
 8005190:	08005141 	.word	0x08005141
 8005194:	08005141 	.word	0x08005141
 8005198:	080052e9 	.word	0x080052e9
 800519c:	08005141 	.word	0x08005141
 80051a0:	080051ef 	.word	0x080051ef
 80051a4:	08005141 	.word	0x08005141
 80051a8:	08005141 	.word	0x08005141
 80051ac:	08005289 	.word	0x08005289
 80051b0:	6833      	ldr	r3, [r6, #0]
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6032      	str	r2, [r6, #0]
 80051b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051c0:	2301      	movs	r3, #1
 80051c2:	e09e      	b.n	8005302 <_printf_i+0x1ea>
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	1d19      	adds	r1, r3, #4
 80051ca:	6031      	str	r1, [r6, #0]
 80051cc:	0606      	lsls	r6, r0, #24
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0xbc>
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	e003      	b.n	80051dc <_printf_i+0xc4>
 80051d4:	0645      	lsls	r5, r0, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0xb8>
 80051d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051dc:	2d00      	cmp	r5, #0
 80051de:	da03      	bge.n	80051e8 <_printf_i+0xd0>
 80051e0:	232d      	movs	r3, #45	@ 0x2d
 80051e2:	426d      	negs	r5, r5
 80051e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051e8:	230a      	movs	r3, #10
 80051ea:	4859      	ldr	r0, [pc, #356]	@ (8005350 <_printf_i+0x238>)
 80051ec:	e011      	b.n	8005212 <_printf_i+0xfa>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	6833      	ldr	r3, [r6, #0]
 80051f2:	0608      	lsls	r0, r1, #24
 80051f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051f8:	d402      	bmi.n	8005200 <_printf_i+0xe8>
 80051fa:	0649      	lsls	r1, r1, #25
 80051fc:	bf48      	it	mi
 80051fe:	b2ad      	uxthmi	r5, r5
 8005200:	2f6f      	cmp	r7, #111	@ 0x6f
 8005202:	6033      	str	r3, [r6, #0]
 8005204:	bf14      	ite	ne
 8005206:	230a      	movne	r3, #10
 8005208:	2308      	moveq	r3, #8
 800520a:	4851      	ldr	r0, [pc, #324]	@ (8005350 <_printf_i+0x238>)
 800520c:	2100      	movs	r1, #0
 800520e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005212:	6866      	ldr	r6, [r4, #4]
 8005214:	2e00      	cmp	r6, #0
 8005216:	bfa8      	it	ge
 8005218:	6821      	ldrge	r1, [r4, #0]
 800521a:	60a6      	str	r6, [r4, #8]
 800521c:	bfa4      	itt	ge
 800521e:	f021 0104 	bicge.w	r1, r1, #4
 8005222:	6021      	strge	r1, [r4, #0]
 8005224:	b90d      	cbnz	r5, 800522a <_printf_i+0x112>
 8005226:	2e00      	cmp	r6, #0
 8005228:	d04b      	beq.n	80052c2 <_printf_i+0x1aa>
 800522a:	4616      	mov	r6, r2
 800522c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005230:	fb03 5711 	mls	r7, r3, r1, r5
 8005234:	5dc7      	ldrb	r7, [r0, r7]
 8005236:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800523a:	462f      	mov	r7, r5
 800523c:	42bb      	cmp	r3, r7
 800523e:	460d      	mov	r5, r1
 8005240:	d9f4      	bls.n	800522c <_printf_i+0x114>
 8005242:	2b08      	cmp	r3, #8
 8005244:	d10b      	bne.n	800525e <_printf_i+0x146>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	07df      	lsls	r7, r3, #31
 800524a:	d508      	bpl.n	800525e <_printf_i+0x146>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	6861      	ldr	r1, [r4, #4]
 8005250:	4299      	cmp	r1, r3
 8005252:	bfde      	ittt	le
 8005254:	2330      	movle	r3, #48	@ 0x30
 8005256:	f806 3c01 	strble.w	r3, [r6, #-1]
 800525a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800525e:	1b92      	subs	r2, r2, r6
 8005260:	6122      	str	r2, [r4, #16]
 8005262:	464b      	mov	r3, r9
 8005264:	4621      	mov	r1, r4
 8005266:	4640      	mov	r0, r8
 8005268:	f8cd a000 	str.w	sl, [sp]
 800526c:	aa03      	add	r2, sp, #12
 800526e:	f7ff fee1 	bl	8005034 <_printf_common>
 8005272:	3001      	adds	r0, #1
 8005274:	d14a      	bne.n	800530c <_printf_i+0x1f4>
 8005276:	f04f 30ff 	mov.w	r0, #4294967295
 800527a:	b004      	add	sp, #16
 800527c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2778      	movs	r7, #120	@ 0x78
 800528a:	4832      	ldr	r0, [pc, #200]	@ (8005354 <_printf_i+0x23c>)
 800528c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	6831      	ldr	r1, [r6, #0]
 8005294:	061f      	lsls	r7, r3, #24
 8005296:	f851 5b04 	ldr.w	r5, [r1], #4
 800529a:	d402      	bmi.n	80052a2 <_printf_i+0x18a>
 800529c:	065f      	lsls	r7, r3, #25
 800529e:	bf48      	it	mi
 80052a0:	b2ad      	uxthmi	r5, r5
 80052a2:	6031      	str	r1, [r6, #0]
 80052a4:	07d9      	lsls	r1, r3, #31
 80052a6:	bf44      	itt	mi
 80052a8:	f043 0320 	orrmi.w	r3, r3, #32
 80052ac:	6023      	strmi	r3, [r4, #0]
 80052ae:	b11d      	cbz	r5, 80052b8 <_printf_i+0x1a0>
 80052b0:	2310      	movs	r3, #16
 80052b2:	e7ab      	b.n	800520c <_printf_i+0xf4>
 80052b4:	4826      	ldr	r0, [pc, #152]	@ (8005350 <_printf_i+0x238>)
 80052b6:	e7e9      	b.n	800528c <_printf_i+0x174>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	f023 0320 	bic.w	r3, r3, #32
 80052be:	6023      	str	r3, [r4, #0]
 80052c0:	e7f6      	b.n	80052b0 <_printf_i+0x198>
 80052c2:	4616      	mov	r6, r2
 80052c4:	e7bd      	b.n	8005242 <_printf_i+0x12a>
 80052c6:	6833      	ldr	r3, [r6, #0]
 80052c8:	6825      	ldr	r5, [r4, #0]
 80052ca:	1d18      	adds	r0, r3, #4
 80052cc:	6961      	ldr	r1, [r4, #20]
 80052ce:	6030      	str	r0, [r6, #0]
 80052d0:	062e      	lsls	r6, r5, #24
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	d501      	bpl.n	80052da <_printf_i+0x1c2>
 80052d6:	6019      	str	r1, [r3, #0]
 80052d8:	e002      	b.n	80052e0 <_printf_i+0x1c8>
 80052da:	0668      	lsls	r0, r5, #25
 80052dc:	d5fb      	bpl.n	80052d6 <_printf_i+0x1be>
 80052de:	8019      	strh	r1, [r3, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	4616      	mov	r6, r2
 80052e4:	6123      	str	r3, [r4, #16]
 80052e6:	e7bc      	b.n	8005262 <_printf_i+0x14a>
 80052e8:	6833      	ldr	r3, [r6, #0]
 80052ea:	2100      	movs	r1, #0
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	6032      	str	r2, [r6, #0]
 80052f0:	681e      	ldr	r6, [r3, #0]
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 fbfe 	bl	8005af6 <memchr>
 80052fa:	b108      	cbz	r0, 8005300 <_printf_i+0x1e8>
 80052fc:	1b80      	subs	r0, r0, r6
 80052fe:	6060      	str	r0, [r4, #4]
 8005300:	6863      	ldr	r3, [r4, #4]
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	2300      	movs	r3, #0
 8005306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800530a:	e7aa      	b.n	8005262 <_printf_i+0x14a>
 800530c:	4632      	mov	r2, r6
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	47d0      	blx	sl
 8005316:	3001      	adds	r0, #1
 8005318:	d0ad      	beq.n	8005276 <_printf_i+0x15e>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	079b      	lsls	r3, r3, #30
 800531e:	d413      	bmi.n	8005348 <_printf_i+0x230>
 8005320:	68e0      	ldr	r0, [r4, #12]
 8005322:	9b03      	ldr	r3, [sp, #12]
 8005324:	4298      	cmp	r0, r3
 8005326:	bfb8      	it	lt
 8005328:	4618      	movlt	r0, r3
 800532a:	e7a6      	b.n	800527a <_printf_i+0x162>
 800532c:	2301      	movs	r3, #1
 800532e:	4632      	mov	r2, r6
 8005330:	4649      	mov	r1, r9
 8005332:	4640      	mov	r0, r8
 8005334:	47d0      	blx	sl
 8005336:	3001      	adds	r0, #1
 8005338:	d09d      	beq.n	8005276 <_printf_i+0x15e>
 800533a:	3501      	adds	r5, #1
 800533c:	68e3      	ldr	r3, [r4, #12]
 800533e:	9903      	ldr	r1, [sp, #12]
 8005340:	1a5b      	subs	r3, r3, r1
 8005342:	42ab      	cmp	r3, r5
 8005344:	dcf2      	bgt.n	800532c <_printf_i+0x214>
 8005346:	e7eb      	b.n	8005320 <_printf_i+0x208>
 8005348:	2500      	movs	r5, #0
 800534a:	f104 0619 	add.w	r6, r4, #25
 800534e:	e7f5      	b.n	800533c <_printf_i+0x224>
 8005350:	0800afc4 	.word	0x0800afc4
 8005354:	0800afd5 	.word	0x0800afd5

08005358 <_scanf_float>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	b087      	sub	sp, #28
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	688b      	ldr	r3, [r1, #8]
 8005362:	4617      	mov	r7, r2
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800536a:	bf82      	ittt	hi
 800536c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005370:	eb03 0b05 	addhi.w	fp, r3, r5
 8005374:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005378:	460a      	mov	r2, r1
 800537a:	f04f 0500 	mov.w	r5, #0
 800537e:	bf88      	it	hi
 8005380:	608b      	strhi	r3, [r1, #8]
 8005382:	680b      	ldr	r3, [r1, #0]
 8005384:	4680      	mov	r8, r0
 8005386:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800538a:	f842 3b1c 	str.w	r3, [r2], #28
 800538e:	460c      	mov	r4, r1
 8005390:	bf98      	it	ls
 8005392:	f04f 0b00 	movls.w	fp, #0
 8005396:	4616      	mov	r6, r2
 8005398:	46aa      	mov	sl, r5
 800539a:	46a9      	mov	r9, r5
 800539c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053a0:	9201      	str	r2, [sp, #4]
 80053a2:	9502      	str	r5, [sp, #8]
 80053a4:	68a2      	ldr	r2, [r4, #8]
 80053a6:	b152      	cbz	r2, 80053be <_scanf_float+0x66>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b4e      	cmp	r3, #78	@ 0x4e
 80053ae:	d865      	bhi.n	800547c <_scanf_float+0x124>
 80053b0:	2b40      	cmp	r3, #64	@ 0x40
 80053b2:	d83d      	bhi.n	8005430 <_scanf_float+0xd8>
 80053b4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80053b8:	b2c8      	uxtb	r0, r1
 80053ba:	280e      	cmp	r0, #14
 80053bc:	d93b      	bls.n	8005436 <_scanf_float+0xde>
 80053be:	f1b9 0f00 	cmp.w	r9, #0
 80053c2:	d003      	beq.n	80053cc <_scanf_float+0x74>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053d0:	f1ba 0f01 	cmp.w	sl, #1
 80053d4:	f200 8118 	bhi.w	8005608 <_scanf_float+0x2b0>
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	429e      	cmp	r6, r3
 80053dc:	f200 8109 	bhi.w	80055f2 <_scanf_float+0x29a>
 80053e0:	2001      	movs	r0, #1
 80053e2:	b007      	add	sp, #28
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80053ec:	2a0d      	cmp	r2, #13
 80053ee:	d8e6      	bhi.n	80053be <_scanf_float+0x66>
 80053f0:	a101      	add	r1, pc, #4	@ (adr r1, 80053f8 <_scanf_float+0xa0>)
 80053f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	0800553f 	.word	0x0800553f
 80053fc:	080053bf 	.word	0x080053bf
 8005400:	080053bf 	.word	0x080053bf
 8005404:	080053bf 	.word	0x080053bf
 8005408:	0800559f 	.word	0x0800559f
 800540c:	08005577 	.word	0x08005577
 8005410:	080053bf 	.word	0x080053bf
 8005414:	080053bf 	.word	0x080053bf
 8005418:	0800554d 	.word	0x0800554d
 800541c:	080053bf 	.word	0x080053bf
 8005420:	080053bf 	.word	0x080053bf
 8005424:	080053bf 	.word	0x080053bf
 8005428:	080053bf 	.word	0x080053bf
 800542c:	08005505 	.word	0x08005505
 8005430:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005434:	e7da      	b.n	80053ec <_scanf_float+0x94>
 8005436:	290e      	cmp	r1, #14
 8005438:	d8c1      	bhi.n	80053be <_scanf_float+0x66>
 800543a:	a001      	add	r0, pc, #4	@ (adr r0, 8005440 <_scanf_float+0xe8>)
 800543c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005440:	080054f5 	.word	0x080054f5
 8005444:	080053bf 	.word	0x080053bf
 8005448:	080054f5 	.word	0x080054f5
 800544c:	0800558b 	.word	0x0800558b
 8005450:	080053bf 	.word	0x080053bf
 8005454:	0800549d 	.word	0x0800549d
 8005458:	080054db 	.word	0x080054db
 800545c:	080054db 	.word	0x080054db
 8005460:	080054db 	.word	0x080054db
 8005464:	080054db 	.word	0x080054db
 8005468:	080054db 	.word	0x080054db
 800546c:	080054db 	.word	0x080054db
 8005470:	080054db 	.word	0x080054db
 8005474:	080054db 	.word	0x080054db
 8005478:	080054db 	.word	0x080054db
 800547c:	2b6e      	cmp	r3, #110	@ 0x6e
 800547e:	d809      	bhi.n	8005494 <_scanf_float+0x13c>
 8005480:	2b60      	cmp	r3, #96	@ 0x60
 8005482:	d8b1      	bhi.n	80053e8 <_scanf_float+0x90>
 8005484:	2b54      	cmp	r3, #84	@ 0x54
 8005486:	d07b      	beq.n	8005580 <_scanf_float+0x228>
 8005488:	2b59      	cmp	r3, #89	@ 0x59
 800548a:	d198      	bne.n	80053be <_scanf_float+0x66>
 800548c:	2d07      	cmp	r5, #7
 800548e:	d196      	bne.n	80053be <_scanf_float+0x66>
 8005490:	2508      	movs	r5, #8
 8005492:	e02c      	b.n	80054ee <_scanf_float+0x196>
 8005494:	2b74      	cmp	r3, #116	@ 0x74
 8005496:	d073      	beq.n	8005580 <_scanf_float+0x228>
 8005498:	2b79      	cmp	r3, #121	@ 0x79
 800549a:	e7f6      	b.n	800548a <_scanf_float+0x132>
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	05c8      	lsls	r0, r1, #23
 80054a0:	d51b      	bpl.n	80054da <_scanf_float+0x182>
 80054a2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80054a6:	6021      	str	r1, [r4, #0]
 80054a8:	f109 0901 	add.w	r9, r9, #1
 80054ac:	f1bb 0f00 	cmp.w	fp, #0
 80054b0:	d003      	beq.n	80054ba <_scanf_float+0x162>
 80054b2:	3201      	adds	r2, #1
 80054b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054b8:	60a2      	str	r2, [r4, #8]
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	f340 8087 	ble.w	80055e0 <_scanf_float+0x288>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	e764      	b.n	80053a4 <_scanf_float+0x4c>
 80054da:	eb1a 0105 	adds.w	r1, sl, r5
 80054de:	f47f af6e 	bne.w	80053be <_scanf_float+0x66>
 80054e2:	460d      	mov	r5, r1
 80054e4:	468a      	mov	sl, r1
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	f806 3b01 	strb.w	r3, [r6], #1
 80054f2:	e7e2      	b.n	80054ba <_scanf_float+0x162>
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	0610      	lsls	r0, r2, #24
 80054f8:	f57f af61 	bpl.w	80053be <_scanf_float+0x66>
 80054fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005500:	6022      	str	r2, [r4, #0]
 8005502:	e7f4      	b.n	80054ee <_scanf_float+0x196>
 8005504:	f1ba 0f00 	cmp.w	sl, #0
 8005508:	d10e      	bne.n	8005528 <_scanf_float+0x1d0>
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	d10e      	bne.n	800552e <_scanf_float+0x1d6>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005516:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800551a:	d108      	bne.n	800552e <_scanf_float+0x1d6>
 800551c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005520:	f04f 0a01 	mov.w	sl, #1
 8005524:	6022      	str	r2, [r4, #0]
 8005526:	e7e2      	b.n	80054ee <_scanf_float+0x196>
 8005528:	f1ba 0f02 	cmp.w	sl, #2
 800552c:	d055      	beq.n	80055da <_scanf_float+0x282>
 800552e:	2d01      	cmp	r5, #1
 8005530:	d002      	beq.n	8005538 <_scanf_float+0x1e0>
 8005532:	2d04      	cmp	r5, #4
 8005534:	f47f af43 	bne.w	80053be <_scanf_float+0x66>
 8005538:	3501      	adds	r5, #1
 800553a:	b2ed      	uxtb	r5, r5
 800553c:	e7d7      	b.n	80054ee <_scanf_float+0x196>
 800553e:	f1ba 0f01 	cmp.w	sl, #1
 8005542:	f47f af3c 	bne.w	80053be <_scanf_float+0x66>
 8005546:	f04f 0a02 	mov.w	sl, #2
 800554a:	e7d0      	b.n	80054ee <_scanf_float+0x196>
 800554c:	b97d      	cbnz	r5, 800556e <_scanf_float+0x216>
 800554e:	f1b9 0f00 	cmp.w	r9, #0
 8005552:	f47f af37 	bne.w	80053c4 <_scanf_float+0x6c>
 8005556:	6822      	ldr	r2, [r4, #0]
 8005558:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800555c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005560:	f040 8103 	bne.w	800576a <_scanf_float+0x412>
 8005564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005568:	2501      	movs	r5, #1
 800556a:	6022      	str	r2, [r4, #0]
 800556c:	e7bf      	b.n	80054ee <_scanf_float+0x196>
 800556e:	2d03      	cmp	r5, #3
 8005570:	d0e2      	beq.n	8005538 <_scanf_float+0x1e0>
 8005572:	2d05      	cmp	r5, #5
 8005574:	e7de      	b.n	8005534 <_scanf_float+0x1dc>
 8005576:	2d02      	cmp	r5, #2
 8005578:	f47f af21 	bne.w	80053be <_scanf_float+0x66>
 800557c:	2503      	movs	r5, #3
 800557e:	e7b6      	b.n	80054ee <_scanf_float+0x196>
 8005580:	2d06      	cmp	r5, #6
 8005582:	f47f af1c 	bne.w	80053be <_scanf_float+0x66>
 8005586:	2507      	movs	r5, #7
 8005588:	e7b1      	b.n	80054ee <_scanf_float+0x196>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	0591      	lsls	r1, r2, #22
 800558e:	f57f af16 	bpl.w	80053be <_scanf_float+0x66>
 8005592:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005596:	6022      	str	r2, [r4, #0]
 8005598:	f8cd 9008 	str.w	r9, [sp, #8]
 800559c:	e7a7      	b.n	80054ee <_scanf_float+0x196>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80055a4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80055a8:	d006      	beq.n	80055b8 <_scanf_float+0x260>
 80055aa:	0550      	lsls	r0, r2, #21
 80055ac:	f57f af07 	bpl.w	80053be <_scanf_float+0x66>
 80055b0:	f1b9 0f00 	cmp.w	r9, #0
 80055b4:	f000 80d9 	beq.w	800576a <_scanf_float+0x412>
 80055b8:	0591      	lsls	r1, r2, #22
 80055ba:	bf58      	it	pl
 80055bc:	9902      	ldrpl	r1, [sp, #8]
 80055be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80055c2:	bf58      	it	pl
 80055c4:	eba9 0101 	subpl.w	r1, r9, r1
 80055c8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80055cc:	f04f 0900 	mov.w	r9, #0
 80055d0:	bf58      	it	pl
 80055d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	e789      	b.n	80054ee <_scanf_float+0x196>
 80055da:	f04f 0a03 	mov.w	sl, #3
 80055de:	e786      	b.n	80054ee <_scanf_float+0x196>
 80055e0:	4639      	mov	r1, r7
 80055e2:	4640      	mov	r0, r8
 80055e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055e8:	4798      	blx	r3
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f43f aeda 	beq.w	80053a4 <_scanf_float+0x4c>
 80055f0:	e6e5      	b.n	80053be <_scanf_float+0x66>
 80055f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055f6:	463a      	mov	r2, r7
 80055f8:	4640      	mov	r0, r8
 80055fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055fe:	4798      	blx	r3
 8005600:	6923      	ldr	r3, [r4, #16]
 8005602:	3b01      	subs	r3, #1
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	e6e7      	b.n	80053d8 <_scanf_float+0x80>
 8005608:	1e6b      	subs	r3, r5, #1
 800560a:	2b06      	cmp	r3, #6
 800560c:	d824      	bhi.n	8005658 <_scanf_float+0x300>
 800560e:	2d02      	cmp	r5, #2
 8005610:	d836      	bhi.n	8005680 <_scanf_float+0x328>
 8005612:	9b01      	ldr	r3, [sp, #4]
 8005614:	429e      	cmp	r6, r3
 8005616:	f67f aee3 	bls.w	80053e0 <_scanf_float+0x88>
 800561a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800561e:	463a      	mov	r2, r7
 8005620:	4640      	mov	r0, r8
 8005622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005626:	4798      	blx	r3
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	3b01      	subs	r3, #1
 800562c:	6123      	str	r3, [r4, #16]
 800562e:	e7f0      	b.n	8005612 <_scanf_float+0x2ba>
 8005630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005634:	463a      	mov	r2, r7
 8005636:	4640      	mov	r0, r8
 8005638:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800563c:	4798      	blx	r3
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	3b01      	subs	r3, #1
 8005642:	6123      	str	r3, [r4, #16]
 8005644:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005648:	fa5f fa8a 	uxtb.w	sl, sl
 800564c:	f1ba 0f02 	cmp.w	sl, #2
 8005650:	d1ee      	bne.n	8005630 <_scanf_float+0x2d8>
 8005652:	3d03      	subs	r5, #3
 8005654:	b2ed      	uxtb	r5, r5
 8005656:	1b76      	subs	r6, r6, r5
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	05da      	lsls	r2, r3, #23
 800565c:	d530      	bpl.n	80056c0 <_scanf_float+0x368>
 800565e:	055b      	lsls	r3, r3, #21
 8005660:	d511      	bpl.n	8005686 <_scanf_float+0x32e>
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	429e      	cmp	r6, r3
 8005666:	f67f aebb 	bls.w	80053e0 <_scanf_float+0x88>
 800566a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800566e:	463a      	mov	r2, r7
 8005670:	4640      	mov	r0, r8
 8005672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005676:	4798      	blx	r3
 8005678:	6923      	ldr	r3, [r4, #16]
 800567a:	3b01      	subs	r3, #1
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	e7f0      	b.n	8005662 <_scanf_float+0x30a>
 8005680:	46aa      	mov	sl, r5
 8005682:	46b3      	mov	fp, r6
 8005684:	e7de      	b.n	8005644 <_scanf_float+0x2ec>
 8005686:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	2965      	cmp	r1, #101	@ 0x65
 800568e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005692:	f106 35ff 	add.w	r5, r6, #4294967295
 8005696:	6123      	str	r3, [r4, #16]
 8005698:	d00c      	beq.n	80056b4 <_scanf_float+0x35c>
 800569a:	2945      	cmp	r1, #69	@ 0x45
 800569c:	d00a      	beq.n	80056b4 <_scanf_float+0x35c>
 800569e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056a2:	463a      	mov	r2, r7
 80056a4:	4640      	mov	r0, r8
 80056a6:	4798      	blx	r3
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	1eb5      	subs	r5, r6, #2
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	463a      	mov	r2, r7
 80056b6:	4640      	mov	r0, r8
 80056b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056bc:	4798      	blx	r3
 80056be:	462e      	mov	r6, r5
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	f012 0210 	ands.w	r2, r2, #16
 80056c6:	d001      	beq.n	80056cc <_scanf_float+0x374>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e68a      	b.n	80053e2 <_scanf_float+0x8a>
 80056cc:	7032      	strb	r2, [r6, #0]
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d8:	d11c      	bne.n	8005714 <_scanf_float+0x3bc>
 80056da:	9b02      	ldr	r3, [sp, #8]
 80056dc:	454b      	cmp	r3, r9
 80056de:	eba3 0209 	sub.w	r2, r3, r9
 80056e2:	d123      	bne.n	800572c <_scanf_float+0x3d4>
 80056e4:	2200      	movs	r2, #0
 80056e6:	4640      	mov	r0, r8
 80056e8:	9901      	ldr	r1, [sp, #4]
 80056ea:	f002 fc15 	bl	8007f18 <_strtod_r>
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	6825      	ldr	r5, [r4, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f015 0f02 	tst.w	r5, #2
 80056f8:	4606      	mov	r6, r0
 80056fa:	460f      	mov	r7, r1
 80056fc:	f103 0204 	add.w	r2, r3, #4
 8005700:	d01f      	beq.n	8005742 <_scanf_float+0x3ea>
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	600a      	str	r2, [r1, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	e9c3 6700 	strd	r6, r7, [r3]
 800570c:	68e3      	ldr	r3, [r4, #12]
 800570e:	3301      	adds	r3, #1
 8005710:	60e3      	str	r3, [r4, #12]
 8005712:	e7d9      	b.n	80056c8 <_scanf_float+0x370>
 8005714:	9b04      	ldr	r3, [sp, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0e4      	beq.n	80056e4 <_scanf_float+0x38c>
 800571a:	9905      	ldr	r1, [sp, #20]
 800571c:	230a      	movs	r3, #10
 800571e:	4640      	mov	r0, r8
 8005720:	3101      	adds	r1, #1
 8005722:	f002 fc79 	bl	8008018 <_strtol_r>
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	9e05      	ldr	r6, [sp, #20]
 800572a:	1ac2      	subs	r2, r0, r3
 800572c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005730:	429e      	cmp	r6, r3
 8005732:	bf28      	it	cs
 8005734:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005738:	4630      	mov	r0, r6
 800573a:	490d      	ldr	r1, [pc, #52]	@ (8005770 <_scanf_float+0x418>)
 800573c:	f000 f8de 	bl	80058fc <siprintf>
 8005740:	e7d0      	b.n	80056e4 <_scanf_float+0x38c>
 8005742:	076d      	lsls	r5, r5, #29
 8005744:	d4dd      	bmi.n	8005702 <_scanf_float+0x3aa>
 8005746:	9d03      	ldr	r5, [sp, #12]
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	681d      	ldr	r5, [r3, #0]
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	f7fb f95c 	bl	8000a0c <__aeabi_dcmpun>
 8005754:	b120      	cbz	r0, 8005760 <_scanf_float+0x408>
 8005756:	4807      	ldr	r0, [pc, #28]	@ (8005774 <_scanf_float+0x41c>)
 8005758:	f000 f9ea 	bl	8005b30 <nanf>
 800575c:	6028      	str	r0, [r5, #0]
 800575e:	e7d5      	b.n	800570c <_scanf_float+0x3b4>
 8005760:	4630      	mov	r0, r6
 8005762:	4639      	mov	r1, r7
 8005764:	f7fb f9b0 	bl	8000ac8 <__aeabi_d2f>
 8005768:	e7f8      	b.n	800575c <_scanf_float+0x404>
 800576a:	f04f 0900 	mov.w	r9, #0
 800576e:	e62d      	b.n	80053cc <_scanf_float+0x74>
 8005770:	0800afe6 	.word	0x0800afe6
 8005774:	0800b37d 	.word	0x0800b37d

08005778 <std>:
 8005778:	2300      	movs	r3, #0
 800577a:	b510      	push	{r4, lr}
 800577c:	4604      	mov	r4, r0
 800577e:	e9c0 3300 	strd	r3, r3, [r0]
 8005782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005786:	6083      	str	r3, [r0, #8]
 8005788:	8181      	strh	r1, [r0, #12]
 800578a:	6643      	str	r3, [r0, #100]	@ 0x64
 800578c:	81c2      	strh	r2, [r0, #14]
 800578e:	6183      	str	r3, [r0, #24]
 8005790:	4619      	mov	r1, r3
 8005792:	2208      	movs	r2, #8
 8005794:	305c      	adds	r0, #92	@ 0x5c
 8005796:	f000 f92e 	bl	80059f6 <memset>
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <std+0x58>)
 800579c:	6224      	str	r4, [r4, #32]
 800579e:	6263      	str	r3, [r4, #36]	@ 0x24
 80057a0:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <std+0x5c>)
 80057a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057a4:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <std+0x60>)
 80057a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057a8:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <std+0x64>)
 80057aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80057ac:	4b0c      	ldr	r3, [pc, #48]	@ (80057e0 <std+0x68>)
 80057ae:	429c      	cmp	r4, r3
 80057b0:	d006      	beq.n	80057c0 <std+0x48>
 80057b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057b6:	4294      	cmp	r4, r2
 80057b8:	d002      	beq.n	80057c0 <std+0x48>
 80057ba:	33d0      	adds	r3, #208	@ 0xd0
 80057bc:	429c      	cmp	r4, r3
 80057be:	d105      	bne.n	80057cc <std+0x54>
 80057c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c8:	f000 b992 	b.w	8005af0 <__retarget_lock_init_recursive>
 80057cc:	bd10      	pop	{r4, pc}
 80057ce:	bf00      	nop
 80057d0:	0800593d 	.word	0x0800593d
 80057d4:	0800595f 	.word	0x0800595f
 80057d8:	08005997 	.word	0x08005997
 80057dc:	080059bb 	.word	0x080059bb
 80057e0:	20000798 	.word	0x20000798

080057e4 <stdio_exit_handler>:
 80057e4:	4a02      	ldr	r2, [pc, #8]	@ (80057f0 <stdio_exit_handler+0xc>)
 80057e6:	4903      	ldr	r1, [pc, #12]	@ (80057f4 <stdio_exit_handler+0x10>)
 80057e8:	4803      	ldr	r0, [pc, #12]	@ (80057f8 <stdio_exit_handler+0x14>)
 80057ea:	f000 b869 	b.w	80058c0 <_fwalk_sglue>
 80057ee:	bf00      	nop
 80057f0:	200000a4 	.word	0x200000a4
 80057f4:	080083cd 	.word	0x080083cd
 80057f8:	200000b4 	.word	0x200000b4

080057fc <cleanup_stdio>:
 80057fc:	6841      	ldr	r1, [r0, #4]
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <cleanup_stdio+0x34>)
 8005800:	b510      	push	{r4, lr}
 8005802:	4299      	cmp	r1, r3
 8005804:	4604      	mov	r4, r0
 8005806:	d001      	beq.n	800580c <cleanup_stdio+0x10>
 8005808:	f002 fde0 	bl	80083cc <_fflush_r>
 800580c:	68a1      	ldr	r1, [r4, #8]
 800580e:	4b09      	ldr	r3, [pc, #36]	@ (8005834 <cleanup_stdio+0x38>)
 8005810:	4299      	cmp	r1, r3
 8005812:	d002      	beq.n	800581a <cleanup_stdio+0x1e>
 8005814:	4620      	mov	r0, r4
 8005816:	f002 fdd9 	bl	80083cc <_fflush_r>
 800581a:	68e1      	ldr	r1, [r4, #12]
 800581c:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <cleanup_stdio+0x3c>)
 800581e:	4299      	cmp	r1, r3
 8005820:	d004      	beq.n	800582c <cleanup_stdio+0x30>
 8005822:	4620      	mov	r0, r4
 8005824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005828:	f002 bdd0 	b.w	80083cc <_fflush_r>
 800582c:	bd10      	pop	{r4, pc}
 800582e:	bf00      	nop
 8005830:	20000798 	.word	0x20000798
 8005834:	20000800 	.word	0x20000800
 8005838:	20000868 	.word	0x20000868

0800583c <global_stdio_init.part.0>:
 800583c:	b510      	push	{r4, lr}
 800583e:	4b0b      	ldr	r3, [pc, #44]	@ (800586c <global_stdio_init.part.0+0x30>)
 8005840:	4c0b      	ldr	r4, [pc, #44]	@ (8005870 <global_stdio_init.part.0+0x34>)
 8005842:	4a0c      	ldr	r2, [pc, #48]	@ (8005874 <global_stdio_init.part.0+0x38>)
 8005844:	4620      	mov	r0, r4
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	2104      	movs	r1, #4
 800584a:	2200      	movs	r2, #0
 800584c:	f7ff ff94 	bl	8005778 <std>
 8005850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005854:	2201      	movs	r2, #1
 8005856:	2109      	movs	r1, #9
 8005858:	f7ff ff8e 	bl	8005778 <std>
 800585c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005860:	2202      	movs	r2, #2
 8005862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005866:	2112      	movs	r1, #18
 8005868:	f7ff bf86 	b.w	8005778 <std>
 800586c:	200008d0 	.word	0x200008d0
 8005870:	20000798 	.word	0x20000798
 8005874:	080057e5 	.word	0x080057e5

08005878 <__sfp_lock_acquire>:
 8005878:	4801      	ldr	r0, [pc, #4]	@ (8005880 <__sfp_lock_acquire+0x8>)
 800587a:	f000 b93a 	b.w	8005af2 <__retarget_lock_acquire_recursive>
 800587e:	bf00      	nop
 8005880:	200008d9 	.word	0x200008d9

08005884 <__sfp_lock_release>:
 8005884:	4801      	ldr	r0, [pc, #4]	@ (800588c <__sfp_lock_release+0x8>)
 8005886:	f000 b935 	b.w	8005af4 <__retarget_lock_release_recursive>
 800588a:	bf00      	nop
 800588c:	200008d9 	.word	0x200008d9

08005890 <__sinit>:
 8005890:	b510      	push	{r4, lr}
 8005892:	4604      	mov	r4, r0
 8005894:	f7ff fff0 	bl	8005878 <__sfp_lock_acquire>
 8005898:	6a23      	ldr	r3, [r4, #32]
 800589a:	b11b      	cbz	r3, 80058a4 <__sinit+0x14>
 800589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a0:	f7ff bff0 	b.w	8005884 <__sfp_lock_release>
 80058a4:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <__sinit+0x28>)
 80058a6:	6223      	str	r3, [r4, #32]
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <__sinit+0x2c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f5      	bne.n	800589c <__sinit+0xc>
 80058b0:	f7ff ffc4 	bl	800583c <global_stdio_init.part.0>
 80058b4:	e7f2      	b.n	800589c <__sinit+0xc>
 80058b6:	bf00      	nop
 80058b8:	080057fd 	.word	0x080057fd
 80058bc:	200008d0 	.word	0x200008d0

080058c0 <_fwalk_sglue>:
 80058c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c4:	4607      	mov	r7, r0
 80058c6:	4688      	mov	r8, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	2600      	movs	r6, #0
 80058cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058d0:	f1b9 0901 	subs.w	r9, r9, #1
 80058d4:	d505      	bpl.n	80058e2 <_fwalk_sglue+0x22>
 80058d6:	6824      	ldr	r4, [r4, #0]
 80058d8:	2c00      	cmp	r4, #0
 80058da:	d1f7      	bne.n	80058cc <_fwalk_sglue+0xc>
 80058dc:	4630      	mov	r0, r6
 80058de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d907      	bls.n	80058f8 <_fwalk_sglue+0x38>
 80058e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058ec:	3301      	adds	r3, #1
 80058ee:	d003      	beq.n	80058f8 <_fwalk_sglue+0x38>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c0      	blx	r8
 80058f6:	4306      	orrs	r6, r0
 80058f8:	3568      	adds	r5, #104	@ 0x68
 80058fa:	e7e9      	b.n	80058d0 <_fwalk_sglue+0x10>

080058fc <siprintf>:
 80058fc:	b40e      	push	{r1, r2, r3}
 80058fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005902:	b500      	push	{lr}
 8005904:	b09c      	sub	sp, #112	@ 0x70
 8005906:	ab1d      	add	r3, sp, #116	@ 0x74
 8005908:	9002      	str	r0, [sp, #8]
 800590a:	9006      	str	r0, [sp, #24]
 800590c:	9107      	str	r1, [sp, #28]
 800590e:	9104      	str	r1, [sp, #16]
 8005910:	4808      	ldr	r0, [pc, #32]	@ (8005934 <siprintf+0x38>)
 8005912:	4909      	ldr	r1, [pc, #36]	@ (8005938 <siprintf+0x3c>)
 8005914:	f853 2b04 	ldr.w	r2, [r3], #4
 8005918:	9105      	str	r1, [sp, #20]
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	a902      	add	r1, sp, #8
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f002 fbd8 	bl	80080d4 <_svfiprintf_r>
 8005924:	2200      	movs	r2, #0
 8005926:	9b02      	ldr	r3, [sp, #8]
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	b01c      	add	sp, #112	@ 0x70
 800592c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005930:	b003      	add	sp, #12
 8005932:	4770      	bx	lr
 8005934:	200000b0 	.word	0x200000b0
 8005938:	ffff0208 	.word	0xffff0208

0800593c <__sread>:
 800593c:	b510      	push	{r4, lr}
 800593e:	460c      	mov	r4, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	f000 f886 	bl	8005a54 <_read_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	bfab      	itete	ge
 800594c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800594e:	89a3      	ldrhlt	r3, [r4, #12]
 8005950:	181b      	addge	r3, r3, r0
 8005952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005956:	bfac      	ite	ge
 8005958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800595a:	81a3      	strhlt	r3, [r4, #12]
 800595c:	bd10      	pop	{r4, pc}

0800595e <__swrite>:
 800595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	461f      	mov	r7, r3
 8005964:	898b      	ldrh	r3, [r1, #12]
 8005966:	4605      	mov	r5, r0
 8005968:	05db      	lsls	r3, r3, #23
 800596a:	460c      	mov	r4, r1
 800596c:	4616      	mov	r6, r2
 800596e:	d505      	bpl.n	800597c <__swrite+0x1e>
 8005970:	2302      	movs	r3, #2
 8005972:	2200      	movs	r2, #0
 8005974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005978:	f000 f85a 	bl	8005a30 <_lseek_r>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	4632      	mov	r2, r6
 8005980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	4628      	mov	r0, r5
 8005988:	463b      	mov	r3, r7
 800598a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	f000 b871 	b.w	8005a78 <_write_r>

08005996 <__sseek>:
 8005996:	b510      	push	{r4, lr}
 8005998:	460c      	mov	r4, r1
 800599a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599e:	f000 f847 	bl	8005a30 <_lseek_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	bf15      	itete	ne
 80059a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059b2:	81a3      	strheq	r3, [r4, #12]
 80059b4:	bf18      	it	ne
 80059b6:	81a3      	strhne	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__sclose>:
 80059ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059be:	f000 b827 	b.w	8005a10 <_close_r>

080059c2 <memmove>:
 80059c2:	4288      	cmp	r0, r1
 80059c4:	b510      	push	{r4, lr}
 80059c6:	eb01 0402 	add.w	r4, r1, r2
 80059ca:	d902      	bls.n	80059d2 <memmove+0x10>
 80059cc:	4284      	cmp	r4, r0
 80059ce:	4623      	mov	r3, r4
 80059d0:	d807      	bhi.n	80059e2 <memmove+0x20>
 80059d2:	1e43      	subs	r3, r0, #1
 80059d4:	42a1      	cmp	r1, r4
 80059d6:	d008      	beq.n	80059ea <memmove+0x28>
 80059d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059e0:	e7f8      	b.n	80059d4 <memmove+0x12>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4402      	add	r2, r0
 80059e6:	428a      	cmp	r2, r1
 80059e8:	d100      	bne.n	80059ec <memmove+0x2a>
 80059ea:	bd10      	pop	{r4, pc}
 80059ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059f4:	e7f7      	b.n	80059e6 <memmove+0x24>

080059f6 <memset>:
 80059f6:	4603      	mov	r3, r0
 80059f8:	4402      	add	r2, r0
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d100      	bne.n	8005a00 <memset+0xa>
 80059fe:	4770      	bx	lr
 8005a00:	f803 1b01 	strb.w	r1, [r3], #1
 8005a04:	e7f9      	b.n	80059fa <memset+0x4>
	...

08005a08 <_localeconv_r>:
 8005a08:	4800      	ldr	r0, [pc, #0]	@ (8005a0c <_localeconv_r+0x4>)
 8005a0a:	4770      	bx	lr
 8005a0c:	200001f0 	.word	0x200001f0

08005a10 <_close_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	2300      	movs	r3, #0
 8005a14:	4d05      	ldr	r5, [pc, #20]	@ (8005a2c <_close_r+0x1c>)
 8005a16:	4604      	mov	r4, r0
 8005a18:	4608      	mov	r0, r1
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	f7fc fca5 	bl	800236a <_close>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_close_r+0x1a>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_close_r+0x1a>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	200008d4 	.word	0x200008d4

08005a30 <_lseek_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4604      	mov	r4, r0
 8005a34:	4608      	mov	r0, r1
 8005a36:	4611      	mov	r1, r2
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4d05      	ldr	r5, [pc, #20]	@ (8005a50 <_lseek_r+0x20>)
 8005a3c:	602a      	str	r2, [r5, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f7fc fcb7 	bl	80023b2 <_lseek>
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d102      	bne.n	8005a4e <_lseek_r+0x1e>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	b103      	cbz	r3, 8005a4e <_lseek_r+0x1e>
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
 8005a50:	200008d4 	.word	0x200008d4

08005a54 <_read_r>:
 8005a54:	b538      	push	{r3, r4, r5, lr}
 8005a56:	4604      	mov	r4, r0
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4d05      	ldr	r5, [pc, #20]	@ (8005a74 <_read_r+0x20>)
 8005a60:	602a      	str	r2, [r5, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f7fc fc48 	bl	80022f8 <_read>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_read_r+0x1e>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_read_r+0x1e>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	200008d4 	.word	0x200008d4

08005a78 <_write_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	2200      	movs	r2, #0
 8005a82:	4d05      	ldr	r5, [pc, #20]	@ (8005a98 <_write_r+0x20>)
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f7fc fc53 	bl	8002332 <_write>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_write_r+0x1e>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_write_r+0x1e>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	200008d4 	.word	0x200008d4

08005a9c <__errno>:
 8005a9c:	4b01      	ldr	r3, [pc, #4]	@ (8005aa4 <__errno+0x8>)
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	200000b0 	.word	0x200000b0

08005aa8 <__libc_init_array>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	2600      	movs	r6, #0
 8005aac:	4d0c      	ldr	r5, [pc, #48]	@ (8005ae0 <__libc_init_array+0x38>)
 8005aae:	4c0d      	ldr	r4, [pc, #52]	@ (8005ae4 <__libc_init_array+0x3c>)
 8005ab0:	1b64      	subs	r4, r4, r5
 8005ab2:	10a4      	asrs	r4, r4, #2
 8005ab4:	42a6      	cmp	r6, r4
 8005ab6:	d109      	bne.n	8005acc <__libc_init_array+0x24>
 8005ab8:	f004 feca 	bl	800a850 <_init>
 8005abc:	2600      	movs	r6, #0
 8005abe:	4d0a      	ldr	r5, [pc, #40]	@ (8005ae8 <__libc_init_array+0x40>)
 8005ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8005aec <__libc_init_array+0x44>)
 8005ac2:	1b64      	subs	r4, r4, r5
 8005ac4:	10a4      	asrs	r4, r4, #2
 8005ac6:	42a6      	cmp	r6, r4
 8005ac8:	d105      	bne.n	8005ad6 <__libc_init_array+0x2e>
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
 8005acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad0:	4798      	blx	r3
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7ee      	b.n	8005ab4 <__libc_init_array+0xc>
 8005ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ada:	4798      	blx	r3
 8005adc:	3601      	adds	r6, #1
 8005ade:	e7f2      	b.n	8005ac6 <__libc_init_array+0x1e>
 8005ae0:	0800b630 	.word	0x0800b630
 8005ae4:	0800b630 	.word	0x0800b630
 8005ae8:	0800b630 	.word	0x0800b630
 8005aec:	0800b634 	.word	0x0800b634

08005af0 <__retarget_lock_init_recursive>:
 8005af0:	4770      	bx	lr

08005af2 <__retarget_lock_acquire_recursive>:
 8005af2:	4770      	bx	lr

08005af4 <__retarget_lock_release_recursive>:
 8005af4:	4770      	bx	lr

08005af6 <memchr>:
 8005af6:	4603      	mov	r3, r0
 8005af8:	b510      	push	{r4, lr}
 8005afa:	b2c9      	uxtb	r1, r1
 8005afc:	4402      	add	r2, r0
 8005afe:	4293      	cmp	r3, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	d101      	bne.n	8005b08 <memchr+0x12>
 8005b04:	2000      	movs	r0, #0
 8005b06:	e003      	b.n	8005b10 <memchr+0x1a>
 8005b08:	7804      	ldrb	r4, [r0, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	428c      	cmp	r4, r1
 8005b0e:	d1f6      	bne.n	8005afe <memchr+0x8>
 8005b10:	bd10      	pop	{r4, pc}

08005b12 <memcpy>:
 8005b12:	440a      	add	r2, r1
 8005b14:	4291      	cmp	r1, r2
 8005b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b1a:	d100      	bne.n	8005b1e <memcpy+0xc>
 8005b1c:	4770      	bx	lr
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b24:	4291      	cmp	r1, r2
 8005b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2a:	d1f9      	bne.n	8005b20 <memcpy+0xe>
 8005b2c:	bd10      	pop	{r4, pc}
	...

08005b30 <nanf>:
 8005b30:	4800      	ldr	r0, [pc, #0]	@ (8005b34 <nanf+0x4>)
 8005b32:	4770      	bx	lr
 8005b34:	7fc00000 	.word	0x7fc00000

08005b38 <quorem>:
 8005b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	6903      	ldr	r3, [r0, #16]
 8005b3e:	690c      	ldr	r4, [r1, #16]
 8005b40:	4607      	mov	r7, r0
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	db7e      	blt.n	8005c44 <quorem+0x10c>
 8005b46:	3c01      	subs	r4, #1
 8005b48:	00a3      	lsls	r3, r4, #2
 8005b4a:	f100 0514 	add.w	r5, r0, #20
 8005b4e:	f101 0814 	add.w	r8, r1, #20
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b62:	3301      	adds	r3, #1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b6e:	d32e      	bcc.n	8005bce <quorem+0x96>
 8005b70:	f04f 0a00 	mov.w	sl, #0
 8005b74:	46c4      	mov	ip, r8
 8005b76:	46ae      	mov	lr, r5
 8005b78:	46d3      	mov	fp, sl
 8005b7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b7e:	b298      	uxth	r0, r3
 8005b80:	fb06 a000 	mla	r0, r6, r0, sl
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	0c02      	lsrs	r2, r0, #16
 8005b88:	fb06 2303 	mla	r3, r6, r3, r2
 8005b8c:	f8de 2000 	ldr.w	r2, [lr]
 8005b90:	b280      	uxth	r0, r0
 8005b92:	b292      	uxth	r2, r2
 8005b94:	1a12      	subs	r2, r2, r0
 8005b96:	445a      	add	r2, fp
 8005b98:	f8de 0000 	ldr.w	r0, [lr]
 8005b9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ba6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005baa:	b292      	uxth	r2, r2
 8005bac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005bb0:	45e1      	cmp	r9, ip
 8005bb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005bb6:	f84e 2b04 	str.w	r2, [lr], #4
 8005bba:	d2de      	bcs.n	8005b7a <quorem+0x42>
 8005bbc:	9b00      	ldr	r3, [sp, #0]
 8005bbe:	58eb      	ldr	r3, [r5, r3]
 8005bc0:	b92b      	cbnz	r3, 8005bce <quorem+0x96>
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	3b04      	subs	r3, #4
 8005bc6:	429d      	cmp	r5, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	d32f      	bcc.n	8005c2c <quorem+0xf4>
 8005bcc:	613c      	str	r4, [r7, #16]
 8005bce:	4638      	mov	r0, r7
 8005bd0:	f001 f9c2 	bl	8006f58 <__mcmp>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	db25      	blt.n	8005c24 <quorem+0xec>
 8005bd8:	4629      	mov	r1, r5
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005be0:	f8d1 c000 	ldr.w	ip, [r1]
 8005be4:	fa1f fe82 	uxth.w	lr, r2
 8005be8:	fa1f f38c 	uxth.w	r3, ip
 8005bec:	eba3 030e 	sub.w	r3, r3, lr
 8005bf0:	4403      	add	r3, r0
 8005bf2:	0c12      	lsrs	r2, r2, #16
 8005bf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c02:	45c1      	cmp	r9, r8
 8005c04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c08:	f841 3b04 	str.w	r3, [r1], #4
 8005c0c:	d2e6      	bcs.n	8005bdc <quorem+0xa4>
 8005c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c16:	b922      	cbnz	r2, 8005c22 <quorem+0xea>
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	d30b      	bcc.n	8005c38 <quorem+0x100>
 8005c20:	613c      	str	r4, [r7, #16]
 8005c22:	3601      	adds	r6, #1
 8005c24:	4630      	mov	r0, r6
 8005c26:	b003      	add	sp, #12
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	3b04      	subs	r3, #4
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	d1cb      	bne.n	8005bcc <quorem+0x94>
 8005c34:	3c01      	subs	r4, #1
 8005c36:	e7c6      	b.n	8005bc6 <quorem+0x8e>
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d1ef      	bne.n	8005c20 <quorem+0xe8>
 8005c40:	3c01      	subs	r4, #1
 8005c42:	e7ea      	b.n	8005c1a <quorem+0xe2>
 8005c44:	2000      	movs	r0, #0
 8005c46:	e7ee      	b.n	8005c26 <quorem+0xee>

08005c48 <_dtoa_r>:
 8005c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4c:	4614      	mov	r4, r2
 8005c4e:	461d      	mov	r5, r3
 8005c50:	69c7      	ldr	r7, [r0, #28]
 8005c52:	b097      	sub	sp, #92	@ 0x5c
 8005c54:	4683      	mov	fp, r0
 8005c56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c5c:	b97f      	cbnz	r7, 8005c7e <_dtoa_r+0x36>
 8005c5e:	2010      	movs	r0, #16
 8005c60:	f000 fe02 	bl	8006868 <malloc>
 8005c64:	4602      	mov	r2, r0
 8005c66:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c6a:	b920      	cbnz	r0, 8005c76 <_dtoa_r+0x2e>
 8005c6c:	21ef      	movs	r1, #239	@ 0xef
 8005c6e:	4ba8      	ldr	r3, [pc, #672]	@ (8005f10 <_dtoa_r+0x2c8>)
 8005c70:	48a8      	ldr	r0, [pc, #672]	@ (8005f14 <_dtoa_r+0x2cc>)
 8005c72:	f002 fbfb 	bl	800846c <__assert_func>
 8005c76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c7a:	6007      	str	r7, [r0, #0]
 8005c7c:	60c7      	str	r7, [r0, #12]
 8005c7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	b159      	cbz	r1, 8005c9e <_dtoa_r+0x56>
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4093      	lsls	r3, r2
 8005c8c:	604a      	str	r2, [r1, #4]
 8005c8e:	608b      	str	r3, [r1, #8]
 8005c90:	4658      	mov	r0, fp
 8005c92:	f000 fedf 	bl	8006a54 <_Bfree>
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	1e2b      	subs	r3, r5, #0
 8005ca0:	bfaf      	iteee	ge
 8005ca2:	2300      	movge	r3, #0
 8005ca4:	2201      	movlt	r2, #1
 8005ca6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005caa:	9303      	strlt	r3, [sp, #12]
 8005cac:	bfa8      	it	ge
 8005cae:	6033      	strge	r3, [r6, #0]
 8005cb0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cb4:	4b98      	ldr	r3, [pc, #608]	@ (8005f18 <_dtoa_r+0x2d0>)
 8005cb6:	bfb8      	it	lt
 8005cb8:	6032      	strlt	r2, [r6, #0]
 8005cba:	ea33 0308 	bics.w	r3, r3, r8
 8005cbe:	d112      	bne.n	8005ce6 <_dtoa_r+0x9e>
 8005cc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ccc:	4323      	orrs	r3, r4
 8005cce:	f000 8550 	beq.w	8006772 <_dtoa_r+0xb2a>
 8005cd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cd4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005f1c <_dtoa_r+0x2d4>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8552 	beq.w	8006782 <_dtoa_r+0xb3a>
 8005cde:	f10a 0303 	add.w	r3, sl, #3
 8005ce2:	f000 bd4c 	b.w	800677e <_dtoa_r+0xb36>
 8005ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f7fa fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8005cfa:	4607      	mov	r7, r0
 8005cfc:	b158      	cbz	r0, 8005d16 <_dtoa_r+0xce>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d06:	b113      	cbz	r3, 8005d0e <_dtoa_r+0xc6>
 8005d08:	4b85      	ldr	r3, [pc, #532]	@ (8005f20 <_dtoa_r+0x2d8>)
 8005d0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005f24 <_dtoa_r+0x2dc>
 8005d12:	f000 bd36 	b.w	8006782 <_dtoa_r+0xb3a>
 8005d16:	ab14      	add	r3, sp, #80	@ 0x50
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	ab15      	add	r3, sp, #84	@ 0x54
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4658      	mov	r0, fp
 8005d20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005d24:	f001 fa30 	bl	8007188 <__d2b>
 8005d28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005d2c:	4681      	mov	r9, r0
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	d077      	beq.n	8005e22 <_dtoa_r+0x1da>
 8005d32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d48:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4b76      	ldr	r3, [pc, #472]	@ (8005f28 <_dtoa_r+0x2e0>)
 8005d50:	f7fa fa0a 	bl	8000168 <__aeabi_dsub>
 8005d54:	a368      	add	r3, pc, #416	@ (adr r3, 8005ef8 <_dtoa_r+0x2b0>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fbbd 	bl	80004d8 <__aeabi_dmul>
 8005d5e:	a368      	add	r3, pc, #416	@ (adr r3, 8005f00 <_dtoa_r+0x2b8>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fa02 	bl	800016c <__adddf3>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	460d      	mov	r5, r1
 8005d6e:	f7fa fb49 	bl	8000404 <__aeabi_i2d>
 8005d72:	a365      	add	r3, pc, #404	@ (adr r3, 8005f08 <_dtoa_r+0x2c0>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fbae 	bl	80004d8 <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa f9f2 	bl	800016c <__adddf3>
 8005d88:	4604      	mov	r4, r0
 8005d8a:	460d      	mov	r5, r1
 8005d8c:	f7fa fe54 	bl	8000a38 <__aeabi_d2iz>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4607      	mov	r7, r0
 8005d94:	2300      	movs	r3, #0
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fe0f 	bl	80009bc <__aeabi_dcmplt>
 8005d9e:	b140      	cbz	r0, 8005db2 <_dtoa_r+0x16a>
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7fa fb2f 	bl	8000404 <__aeabi_i2d>
 8005da6:	4622      	mov	r2, r4
 8005da8:	462b      	mov	r3, r5
 8005daa:	f7fa fdfd 	bl	80009a8 <__aeabi_dcmpeq>
 8005dae:	b900      	cbnz	r0, 8005db2 <_dtoa_r+0x16a>
 8005db0:	3f01      	subs	r7, #1
 8005db2:	2f16      	cmp	r7, #22
 8005db4:	d853      	bhi.n	8005e5e <_dtoa_r+0x216>
 8005db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dba:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <_dtoa_r+0x2e4>)
 8005dbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fdfa 	bl	80009bc <__aeabi_dcmplt>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d04a      	beq.n	8005e62 <_dtoa_r+0x21a>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	3f01      	subs	r7, #1
 8005dd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005dd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005dd4:	1b9b      	subs	r3, r3, r6
 8005dd6:	1e5a      	subs	r2, r3, #1
 8005dd8:	bf46      	itte	mi
 8005dda:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dde:	2300      	movmi	r3, #0
 8005de0:	f04f 0800 	movpl.w	r8, #0
 8005de4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005de6:	bf48      	it	mi
 8005de8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	db3b      	blt.n	8005e66 <_dtoa_r+0x21e>
 8005dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005df2:	443b      	add	r3, r7
 8005df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df6:	2300      	movs	r3, #0
 8005df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d866      	bhi.n	8005ece <_dtoa_r+0x286>
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	bfc4      	itt	gt
 8005e04:	3b04      	subgt	r3, #4
 8005e06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005e08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e0a:	bfc8      	it	gt
 8005e0c:	2400      	movgt	r4, #0
 8005e0e:	f1a3 0302 	sub.w	r3, r3, #2
 8005e12:	bfd8      	it	le
 8005e14:	2401      	movle	r4, #1
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d864      	bhi.n	8005ee4 <_dtoa_r+0x29c>
 8005e1a:	e8df f003 	tbb	[pc, r3]
 8005e1e:	382b      	.short	0x382b
 8005e20:	5636      	.short	0x5636
 8005e22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005e26:	441e      	add	r6, r3
 8005e28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	bfc1      	itttt	gt
 8005e30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e34:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e40:	bfd6      	itet	le
 8005e42:	f1c3 0320 	rsble	r3, r3, #32
 8005e46:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e4a:	fa04 f003 	lslle.w	r0, r4, r3
 8005e4e:	f7fa fac9 	bl	80003e4 <__aeabi_ui2d>
 8005e52:	2201      	movs	r2, #1
 8005e54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e58:	3e01      	subs	r6, #1
 8005e5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e5c:	e775      	b.n	8005d4a <_dtoa_r+0x102>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e7b6      	b.n	8005dd0 <_dtoa_r+0x188>
 8005e62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e64:	e7b5      	b.n	8005dd2 <_dtoa_r+0x18a>
 8005e66:	427b      	negs	r3, r7
 8005e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	eba8 0807 	sub.w	r8, r8, r7
 8005e70:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e72:	e7c2      	b.n	8005dfa <_dtoa_r+0x1b2>
 8005e74:	2300      	movs	r3, #0
 8005e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dc35      	bgt.n	8005eea <_dtoa_r+0x2a2>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	461a      	mov	r2, r3
 8005e82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e86:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e88:	e00b      	b.n	8005ea2 <_dtoa_r+0x25a>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e7f3      	b.n	8005e76 <_dtoa_r+0x22e>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	9308      	str	r3, [sp, #32]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	9307      	str	r3, [sp, #28]
 8005e9e:	bfb8      	it	lt
 8005ea0:	2301      	movlt	r3, #1
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005eaa:	f102 0514 	add.w	r5, r2, #20
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	d91f      	bls.n	8005ef2 <_dtoa_r+0x2aa>
 8005eb2:	6041      	str	r1, [r0, #4]
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	f000 fd8d 	bl	80069d4 <_Balloc>
 8005eba:	4682      	mov	sl, r0
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d139      	bne.n	8005f34 <_dtoa_r+0x2ec>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8005f30 <_dtoa_r+0x2e8>)
 8005ec8:	e6d2      	b.n	8005c70 <_dtoa_r+0x28>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e7e0      	b.n	8005e90 <_dtoa_r+0x248>
 8005ece:	2401      	movs	r4, #1
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ed4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eda:	2200      	movs	r2, #0
 8005edc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ee0:	2312      	movs	r3, #18
 8005ee2:	e7d0      	b.n	8005e86 <_dtoa_r+0x23e>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ee8:	e7f5      	b.n	8005ed6 <_dtoa_r+0x28e>
 8005eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005eec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ef0:	e7d7      	b.n	8005ea2 <_dtoa_r+0x25a>
 8005ef2:	3101      	adds	r1, #1
 8005ef4:	0052      	lsls	r2, r2, #1
 8005ef6:	e7d8      	b.n	8005eaa <_dtoa_r+0x262>
 8005ef8:	636f4361 	.word	0x636f4361
 8005efc:	3fd287a7 	.word	0x3fd287a7
 8005f00:	8b60c8b3 	.word	0x8b60c8b3
 8005f04:	3fc68a28 	.word	0x3fc68a28
 8005f08:	509f79fb 	.word	0x509f79fb
 8005f0c:	3fd34413 	.word	0x3fd34413
 8005f10:	0800aff8 	.word	0x0800aff8
 8005f14:	0800b00f 	.word	0x0800b00f
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	0800aff4 	.word	0x0800aff4
 8005f20:	0800afc3 	.word	0x0800afc3
 8005f24:	0800afc2 	.word	0x0800afc2
 8005f28:	3ff80000 	.word	0x3ff80000
 8005f2c:	0800b108 	.word	0x0800b108
 8005f30:	0800b067 	.word	0x0800b067
 8005f34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f38:	6018      	str	r0, [r3, #0]
 8005f3a:	9b07      	ldr	r3, [sp, #28]
 8005f3c:	2b0e      	cmp	r3, #14
 8005f3e:	f200 80a4 	bhi.w	800608a <_dtoa_r+0x442>
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	f000 80a1 	beq.w	800608a <_dtoa_r+0x442>
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	dd33      	ble.n	8005fb4 <_dtoa_r+0x36c>
 8005f4c:	4b86      	ldr	r3, [pc, #536]	@ (8006168 <_dtoa_r+0x520>)
 8005f4e:	f007 020f 	and.w	r2, r7, #15
 8005f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f56:	05f8      	lsls	r0, r7, #23
 8005f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f64:	d516      	bpl.n	8005f94 <_dtoa_r+0x34c>
 8005f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f6a:	4b80      	ldr	r3, [pc, #512]	@ (800616c <_dtoa_r+0x524>)
 8005f6c:	2603      	movs	r6, #3
 8005f6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f72:	f7fa fbdb 	bl	800072c <__aeabi_ddiv>
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	f004 040f 	and.w	r4, r4, #15
 8005f7e:	4d7b      	ldr	r5, [pc, #492]	@ (800616c <_dtoa_r+0x524>)
 8005f80:	b954      	cbnz	r4, 8005f98 <_dtoa_r+0x350>
 8005f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f8a:	f7fa fbcf 	bl	800072c <__aeabi_ddiv>
 8005f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f92:	e028      	b.n	8005fe6 <_dtoa_r+0x39e>
 8005f94:	2602      	movs	r6, #2
 8005f96:	e7f2      	b.n	8005f7e <_dtoa_r+0x336>
 8005f98:	07e1      	lsls	r1, r4, #31
 8005f9a:	d508      	bpl.n	8005fae <_dtoa_r+0x366>
 8005f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fa4:	f7fa fa98 	bl	80004d8 <__aeabi_dmul>
 8005fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005fac:	3601      	adds	r6, #1
 8005fae:	1064      	asrs	r4, r4, #1
 8005fb0:	3508      	adds	r5, #8
 8005fb2:	e7e5      	b.n	8005f80 <_dtoa_r+0x338>
 8005fb4:	f000 80d2 	beq.w	800615c <_dtoa_r+0x514>
 8005fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fbc:	427c      	negs	r4, r7
 8005fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006168 <_dtoa_r+0x520>)
 8005fc0:	f004 020f 	and.w	r2, r4, #15
 8005fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	f7fa fa84 	bl	80004d8 <__aeabi_dmul>
 8005fd0:	2602      	movs	r6, #2
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd8:	4d64      	ldr	r5, [pc, #400]	@ (800616c <_dtoa_r+0x524>)
 8005fda:	1124      	asrs	r4, r4, #4
 8005fdc:	2c00      	cmp	r4, #0
 8005fde:	f040 80b2 	bne.w	8006146 <_dtoa_r+0x4fe>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1d3      	bne.n	8005f8e <_dtoa_r+0x346>
 8005fe6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80b7 	beq.w	8006160 <_dtoa_r+0x518>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	@ (8006170 <_dtoa_r+0x528>)
 8005ffa:	f7fa fcdf 	bl	80009bc <__aeabi_dcmplt>
 8005ffe:	2800      	cmp	r0, #0
 8006000:	f000 80ae 	beq.w	8006160 <_dtoa_r+0x518>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80aa 	beq.w	8006160 <_dtoa_r+0x518>
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd37      	ble.n	8006082 <_dtoa_r+0x43a>
 8006012:	1e7b      	subs	r3, r7, #1
 8006014:	4620      	mov	r0, r4
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	2200      	movs	r2, #0
 800601a:	4629      	mov	r1, r5
 800601c:	4b55      	ldr	r3, [pc, #340]	@ (8006174 <_dtoa_r+0x52c>)
 800601e:	f7fa fa5b 	bl	80004d8 <__aeabi_dmul>
 8006022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006026:	9c08      	ldr	r4, [sp, #32]
 8006028:	3601      	adds	r6, #1
 800602a:	4630      	mov	r0, r6
 800602c:	f7fa f9ea 	bl	8000404 <__aeabi_i2d>
 8006030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006034:	f7fa fa50 	bl	80004d8 <__aeabi_dmul>
 8006038:	2200      	movs	r2, #0
 800603a:	4b4f      	ldr	r3, [pc, #316]	@ (8006178 <_dtoa_r+0x530>)
 800603c:	f7fa f896 	bl	800016c <__adddf3>
 8006040:	4605      	mov	r5, r0
 8006042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006046:	2c00      	cmp	r4, #0
 8006048:	f040 809a 	bne.w	8006180 <_dtoa_r+0x538>
 800604c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006050:	2200      	movs	r2, #0
 8006052:	4b4a      	ldr	r3, [pc, #296]	@ (800617c <_dtoa_r+0x534>)
 8006054:	f7fa f888 	bl	8000168 <__aeabi_dsub>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006060:	462a      	mov	r2, r5
 8006062:	4633      	mov	r3, r6
 8006064:	f7fa fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 8006068:	2800      	cmp	r0, #0
 800606a:	f040 828e 	bne.w	800658a <_dtoa_r+0x942>
 800606e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006072:	462a      	mov	r2, r5
 8006074:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006078:	f7fa fca0 	bl	80009bc <__aeabi_dcmplt>
 800607c:	2800      	cmp	r0, #0
 800607e:	f040 8127 	bne.w	80062d0 <_dtoa_r+0x688>
 8006082:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006086:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800608a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800608c:	2b00      	cmp	r3, #0
 800608e:	f2c0 8163 	blt.w	8006358 <_dtoa_r+0x710>
 8006092:	2f0e      	cmp	r7, #14
 8006094:	f300 8160 	bgt.w	8006358 <_dtoa_r+0x710>
 8006098:	4b33      	ldr	r3, [pc, #204]	@ (8006168 <_dtoa_r+0x520>)
 800609a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800609e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	da03      	bge.n	80060b4 <_dtoa_r+0x46c>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f340 8100 	ble.w	80062b4 <_dtoa_r+0x66c>
 80060b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060b8:	4656      	mov	r6, sl
 80060ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060be:	4620      	mov	r0, r4
 80060c0:	4629      	mov	r1, r5
 80060c2:	f7fa fb33 	bl	800072c <__aeabi_ddiv>
 80060c6:	f7fa fcb7 	bl	8000a38 <__aeabi_d2iz>
 80060ca:	4680      	mov	r8, r0
 80060cc:	f7fa f99a 	bl	8000404 <__aeabi_i2d>
 80060d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060d4:	f7fa fa00 	bl	80004d8 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4620      	mov	r0, r4
 80060de:	4629      	mov	r1, r5
 80060e0:	f7fa f842 	bl	8000168 <__aeabi_dsub>
 80060e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060e8:	9d07      	ldr	r5, [sp, #28]
 80060ea:	f806 4b01 	strb.w	r4, [r6], #1
 80060ee:	eba6 040a 	sub.w	r4, r6, sl
 80060f2:	42a5      	cmp	r5, r4
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	f040 8116 	bne.w	8006328 <_dtoa_r+0x6e0>
 80060fc:	f7fa f836 	bl	800016c <__adddf3>
 8006100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	f7fa fc76 	bl	80009f8 <__aeabi_dcmpgt>
 800610c:	2800      	cmp	r0, #0
 800610e:	f040 80f8 	bne.w	8006302 <_dtoa_r+0x6ba>
 8006112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	f7fa fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800611e:	b118      	cbz	r0, 8006128 <_dtoa_r+0x4e0>
 8006120:	f018 0f01 	tst.w	r8, #1
 8006124:	f040 80ed 	bne.w	8006302 <_dtoa_r+0x6ba>
 8006128:	4649      	mov	r1, r9
 800612a:	4658      	mov	r0, fp
 800612c:	f000 fc92 	bl	8006a54 <_Bfree>
 8006130:	2300      	movs	r3, #0
 8006132:	7033      	strb	r3, [r6, #0]
 8006134:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006136:	3701      	adds	r7, #1
 8006138:	601f      	str	r7, [r3, #0]
 800613a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8320 	beq.w	8006782 <_dtoa_r+0xb3a>
 8006142:	601e      	str	r6, [r3, #0]
 8006144:	e31d      	b.n	8006782 <_dtoa_r+0xb3a>
 8006146:	07e2      	lsls	r2, r4, #31
 8006148:	d505      	bpl.n	8006156 <_dtoa_r+0x50e>
 800614a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800614e:	f7fa f9c3 	bl	80004d8 <__aeabi_dmul>
 8006152:	2301      	movs	r3, #1
 8006154:	3601      	adds	r6, #1
 8006156:	1064      	asrs	r4, r4, #1
 8006158:	3508      	adds	r5, #8
 800615a:	e73f      	b.n	8005fdc <_dtoa_r+0x394>
 800615c:	2602      	movs	r6, #2
 800615e:	e742      	b.n	8005fe6 <_dtoa_r+0x39e>
 8006160:	9c07      	ldr	r4, [sp, #28]
 8006162:	9704      	str	r7, [sp, #16]
 8006164:	e761      	b.n	800602a <_dtoa_r+0x3e2>
 8006166:	bf00      	nop
 8006168:	0800b108 	.word	0x0800b108
 800616c:	0800b0e0 	.word	0x0800b0e0
 8006170:	3ff00000 	.word	0x3ff00000
 8006174:	40240000 	.word	0x40240000
 8006178:	401c0000 	.word	0x401c0000
 800617c:	40140000 	.word	0x40140000
 8006180:	4b70      	ldr	r3, [pc, #448]	@ (8006344 <_dtoa_r+0x6fc>)
 8006182:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006188:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800618c:	4454      	add	r4, sl
 800618e:	2900      	cmp	r1, #0
 8006190:	d045      	beq.n	800621e <_dtoa_r+0x5d6>
 8006192:	2000      	movs	r0, #0
 8006194:	496c      	ldr	r1, [pc, #432]	@ (8006348 <_dtoa_r+0x700>)
 8006196:	f7fa fac9 	bl	800072c <__aeabi_ddiv>
 800619a:	4633      	mov	r3, r6
 800619c:	462a      	mov	r2, r5
 800619e:	f7f9 ffe3 	bl	8000168 <__aeabi_dsub>
 80061a2:	4656      	mov	r6, sl
 80061a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ac:	f7fa fc44 	bl	8000a38 <__aeabi_d2iz>
 80061b0:	4605      	mov	r5, r0
 80061b2:	f7fa f927 	bl	8000404 <__aeabi_i2d>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061be:	f7f9 ffd3 	bl	8000168 <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	3530      	adds	r5, #48	@ 0x30
 80061c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061d0:	f806 5b01 	strb.w	r5, [r6], #1
 80061d4:	f7fa fbf2 	bl	80009bc <__aeabi_dcmplt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d163      	bne.n	80062a4 <_dtoa_r+0x65c>
 80061dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061e0:	2000      	movs	r0, #0
 80061e2:	495a      	ldr	r1, [pc, #360]	@ (800634c <_dtoa_r+0x704>)
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061ec:	f7fa fbe6 	bl	80009bc <__aeabi_dcmplt>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	f040 8087 	bne.w	8006304 <_dtoa_r+0x6bc>
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	f43f af43 	beq.w	8006082 <_dtoa_r+0x43a>
 80061fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006200:	2200      	movs	r2, #0
 8006202:	4b53      	ldr	r3, [pc, #332]	@ (8006350 <_dtoa_r+0x708>)
 8006204:	f7fa f968 	bl	80004d8 <__aeabi_dmul>
 8006208:	2200      	movs	r2, #0
 800620a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800620e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006212:	4b4f      	ldr	r3, [pc, #316]	@ (8006350 <_dtoa_r+0x708>)
 8006214:	f7fa f960 	bl	80004d8 <__aeabi_dmul>
 8006218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621c:	e7c4      	b.n	80061a8 <_dtoa_r+0x560>
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	f7fa f959 	bl	80004d8 <__aeabi_dmul>
 8006226:	4656      	mov	r6, sl
 8006228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800622c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	f7fa fc01 	bl	8000a38 <__aeabi_d2iz>
 8006236:	4605      	mov	r5, r0
 8006238:	f7fa f8e4 	bl	8000404 <__aeabi_i2d>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006244:	f7f9 ff90 	bl	8000168 <__aeabi_dsub>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	3530      	adds	r5, #48	@ 0x30
 800624e:	f806 5b01 	strb.w	r5, [r6], #1
 8006252:	42a6      	cmp	r6, r4
 8006254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	d124      	bne.n	80062a8 <_dtoa_r+0x660>
 800625e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006262:	4b39      	ldr	r3, [pc, #228]	@ (8006348 <_dtoa_r+0x700>)
 8006264:	f7f9 ff82 	bl	800016c <__adddf3>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006270:	f7fa fbc2 	bl	80009f8 <__aeabi_dcmpgt>
 8006274:	2800      	cmp	r0, #0
 8006276:	d145      	bne.n	8006304 <_dtoa_r+0x6bc>
 8006278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800627c:	2000      	movs	r0, #0
 800627e:	4932      	ldr	r1, [pc, #200]	@ (8006348 <_dtoa_r+0x700>)
 8006280:	f7f9 ff72 	bl	8000168 <__aeabi_dsub>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628c:	f7fa fb96 	bl	80009bc <__aeabi_dcmplt>
 8006290:	2800      	cmp	r0, #0
 8006292:	f43f aef6 	beq.w	8006082 <_dtoa_r+0x43a>
 8006296:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006298:	1e73      	subs	r3, r6, #1
 800629a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800629c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80062a0:	2b30      	cmp	r3, #48	@ 0x30
 80062a2:	d0f8      	beq.n	8006296 <_dtoa_r+0x64e>
 80062a4:	9f04      	ldr	r7, [sp, #16]
 80062a6:	e73f      	b.n	8006128 <_dtoa_r+0x4e0>
 80062a8:	4b29      	ldr	r3, [pc, #164]	@ (8006350 <_dtoa_r+0x708>)
 80062aa:	f7fa f915 	bl	80004d8 <__aeabi_dmul>
 80062ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b2:	e7bc      	b.n	800622e <_dtoa_r+0x5e6>
 80062b4:	d10c      	bne.n	80062d0 <_dtoa_r+0x688>
 80062b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ba:	2200      	movs	r2, #0
 80062bc:	4b25      	ldr	r3, [pc, #148]	@ (8006354 <_dtoa_r+0x70c>)
 80062be:	f7fa f90b 	bl	80004d8 <__aeabi_dmul>
 80062c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062c6:	f7fa fb8d 	bl	80009e4 <__aeabi_dcmpge>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f000 815b 	beq.w	8006586 <_dtoa_r+0x93e>
 80062d0:	2400      	movs	r4, #0
 80062d2:	4625      	mov	r5, r4
 80062d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062d6:	4656      	mov	r6, sl
 80062d8:	43db      	mvns	r3, r3
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	2700      	movs	r7, #0
 80062de:	4621      	mov	r1, r4
 80062e0:	4658      	mov	r0, fp
 80062e2:	f000 fbb7 	bl	8006a54 <_Bfree>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	d0dc      	beq.n	80062a4 <_dtoa_r+0x65c>
 80062ea:	b12f      	cbz	r7, 80062f8 <_dtoa_r+0x6b0>
 80062ec:	42af      	cmp	r7, r5
 80062ee:	d003      	beq.n	80062f8 <_dtoa_r+0x6b0>
 80062f0:	4639      	mov	r1, r7
 80062f2:	4658      	mov	r0, fp
 80062f4:	f000 fbae 	bl	8006a54 <_Bfree>
 80062f8:	4629      	mov	r1, r5
 80062fa:	4658      	mov	r0, fp
 80062fc:	f000 fbaa 	bl	8006a54 <_Bfree>
 8006300:	e7d0      	b.n	80062a4 <_dtoa_r+0x65c>
 8006302:	9704      	str	r7, [sp, #16]
 8006304:	4633      	mov	r3, r6
 8006306:	461e      	mov	r6, r3
 8006308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800630c:	2a39      	cmp	r2, #57	@ 0x39
 800630e:	d107      	bne.n	8006320 <_dtoa_r+0x6d8>
 8006310:	459a      	cmp	sl, r3
 8006312:	d1f8      	bne.n	8006306 <_dtoa_r+0x6be>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	3201      	adds	r2, #1
 8006318:	9204      	str	r2, [sp, #16]
 800631a:	2230      	movs	r2, #48	@ 0x30
 800631c:	f88a 2000 	strb.w	r2, [sl]
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	3201      	adds	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e7bd      	b.n	80062a4 <_dtoa_r+0x65c>
 8006328:	2200      	movs	r2, #0
 800632a:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <_dtoa_r+0x708>)
 800632c:	f7fa f8d4 	bl	80004d8 <__aeabi_dmul>
 8006330:	2200      	movs	r2, #0
 8006332:	2300      	movs	r3, #0
 8006334:	4604      	mov	r4, r0
 8006336:	460d      	mov	r5, r1
 8006338:	f7fa fb36 	bl	80009a8 <__aeabi_dcmpeq>
 800633c:	2800      	cmp	r0, #0
 800633e:	f43f aebc 	beq.w	80060ba <_dtoa_r+0x472>
 8006342:	e6f1      	b.n	8006128 <_dtoa_r+0x4e0>
 8006344:	0800b108 	.word	0x0800b108
 8006348:	3fe00000 	.word	0x3fe00000
 800634c:	3ff00000 	.word	0x3ff00000
 8006350:	40240000 	.word	0x40240000
 8006354:	40140000 	.word	0x40140000
 8006358:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800635a:	2a00      	cmp	r2, #0
 800635c:	f000 80db 	beq.w	8006516 <_dtoa_r+0x8ce>
 8006360:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006362:	2a01      	cmp	r2, #1
 8006364:	f300 80bf 	bgt.w	80064e6 <_dtoa_r+0x89e>
 8006368:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800636a:	2a00      	cmp	r2, #0
 800636c:	f000 80b7 	beq.w	80064de <_dtoa_r+0x896>
 8006370:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006374:	4646      	mov	r6, r8
 8006376:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800637a:	2101      	movs	r1, #1
 800637c:	441a      	add	r2, r3
 800637e:	4658      	mov	r0, fp
 8006380:	4498      	add	r8, r3
 8006382:	9209      	str	r2, [sp, #36]	@ 0x24
 8006384:	f000 fc64 	bl	8006c50 <__i2b>
 8006388:	4605      	mov	r5, r0
 800638a:	b15e      	cbz	r6, 80063a4 <_dtoa_r+0x75c>
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	dd08      	ble.n	80063a4 <_dtoa_r+0x75c>
 8006392:	42b3      	cmp	r3, r6
 8006394:	bfa8      	it	ge
 8006396:	4633      	movge	r3, r6
 8006398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800639a:	eba8 0803 	sub.w	r8, r8, r3
 800639e:	1af6      	subs	r6, r6, r3
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a6:	b1f3      	cbz	r3, 80063e6 <_dtoa_r+0x79e>
 80063a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80b7 	beq.w	800651e <_dtoa_r+0x8d6>
 80063b0:	b18c      	cbz	r4, 80063d6 <_dtoa_r+0x78e>
 80063b2:	4629      	mov	r1, r5
 80063b4:	4622      	mov	r2, r4
 80063b6:	4658      	mov	r0, fp
 80063b8:	f000 fd08 	bl	8006dcc <__pow5mult>
 80063bc:	464a      	mov	r2, r9
 80063be:	4601      	mov	r1, r0
 80063c0:	4605      	mov	r5, r0
 80063c2:	4658      	mov	r0, fp
 80063c4:	f000 fc5a 	bl	8006c7c <__multiply>
 80063c8:	4649      	mov	r1, r9
 80063ca:	9004      	str	r0, [sp, #16]
 80063cc:	4658      	mov	r0, fp
 80063ce:	f000 fb41 	bl	8006a54 <_Bfree>
 80063d2:	9b04      	ldr	r3, [sp, #16]
 80063d4:	4699      	mov	r9, r3
 80063d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063d8:	1b1a      	subs	r2, r3, r4
 80063da:	d004      	beq.n	80063e6 <_dtoa_r+0x79e>
 80063dc:	4649      	mov	r1, r9
 80063de:	4658      	mov	r0, fp
 80063e0:	f000 fcf4 	bl	8006dcc <__pow5mult>
 80063e4:	4681      	mov	r9, r0
 80063e6:	2101      	movs	r1, #1
 80063e8:	4658      	mov	r0, fp
 80063ea:	f000 fc31 	bl	8006c50 <__i2b>
 80063ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063f0:	4604      	mov	r4, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 81c9 	beq.w	800678a <_dtoa_r+0xb42>
 80063f8:	461a      	mov	r2, r3
 80063fa:	4601      	mov	r1, r0
 80063fc:	4658      	mov	r0, fp
 80063fe:	f000 fce5 	bl	8006dcc <__pow5mult>
 8006402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006404:	4604      	mov	r4, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	f300 808f 	bgt.w	800652a <_dtoa_r+0x8e2>
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 8087 	bne.w	8006522 <_dtoa_r+0x8da>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 8083 	bne.w	8006526 <_dtoa_r+0x8de>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006426:	0d1b      	lsrs	r3, r3, #20
 8006428:	051b      	lsls	r3, r3, #20
 800642a:	b12b      	cbz	r3, 8006438 <_dtoa_r+0x7f0>
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	3301      	adds	r3, #1
 8006434:	9309      	str	r3, [sp, #36]	@ 0x24
 8006436:	2301      	movs	r3, #1
 8006438:	930a      	str	r3, [sp, #40]	@ 0x28
 800643a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 81aa 	beq.w	8006796 <_dtoa_r+0xb4e>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006448:	6918      	ldr	r0, [r3, #16]
 800644a:	f000 fbb5 	bl	8006bb8 <__hi0bits>
 800644e:	f1c0 0020 	rsb	r0, r0, #32
 8006452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006454:	4418      	add	r0, r3
 8006456:	f010 001f 	ands.w	r0, r0, #31
 800645a:	d071      	beq.n	8006540 <_dtoa_r+0x8f8>
 800645c:	f1c0 0320 	rsb	r3, r0, #32
 8006460:	2b04      	cmp	r3, #4
 8006462:	dd65      	ble.n	8006530 <_dtoa_r+0x8e8>
 8006464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006466:	f1c0 001c 	rsb	r0, r0, #28
 800646a:	4403      	add	r3, r0
 800646c:	4480      	add	r8, r0
 800646e:	4406      	add	r6, r0
 8006470:	9309      	str	r3, [sp, #36]	@ 0x24
 8006472:	f1b8 0f00 	cmp.w	r8, #0
 8006476:	dd05      	ble.n	8006484 <_dtoa_r+0x83c>
 8006478:	4649      	mov	r1, r9
 800647a:	4642      	mov	r2, r8
 800647c:	4658      	mov	r0, fp
 800647e:	f000 fcff 	bl	8006e80 <__lshift>
 8006482:	4681      	mov	r9, r0
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	dd05      	ble.n	8006496 <_dtoa_r+0x84e>
 800648a:	4621      	mov	r1, r4
 800648c:	461a      	mov	r2, r3
 800648e:	4658      	mov	r0, fp
 8006490:	f000 fcf6 	bl	8006e80 <__lshift>
 8006494:	4604      	mov	r4, r0
 8006496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d053      	beq.n	8006544 <_dtoa_r+0x8fc>
 800649c:	4621      	mov	r1, r4
 800649e:	4648      	mov	r0, r9
 80064a0:	f000 fd5a 	bl	8006f58 <__mcmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	da4d      	bge.n	8006544 <_dtoa_r+0x8fc>
 80064a8:	1e7b      	subs	r3, r7, #1
 80064aa:	4649      	mov	r1, r9
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	220a      	movs	r2, #10
 80064b0:	2300      	movs	r3, #0
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 faf0 	bl	8006a98 <__multadd>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ba:	4681      	mov	r9, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 816c 	beq.w	800679a <_dtoa_r+0xb52>
 80064c2:	2300      	movs	r3, #0
 80064c4:	4629      	mov	r1, r5
 80064c6:	220a      	movs	r2, #10
 80064c8:	4658      	mov	r0, fp
 80064ca:	f000 fae5 	bl	8006a98 <__multadd>
 80064ce:	9b08      	ldr	r3, [sp, #32]
 80064d0:	4605      	mov	r5, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	dc61      	bgt.n	800659a <_dtoa_r+0x952>
 80064d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064d8:	2b02      	cmp	r3, #2
 80064da:	dc3b      	bgt.n	8006554 <_dtoa_r+0x90c>
 80064dc:	e05d      	b.n	800659a <_dtoa_r+0x952>
 80064de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064e4:	e746      	b.n	8006374 <_dtoa_r+0x72c>
 80064e6:	9b07      	ldr	r3, [sp, #28]
 80064e8:	1e5c      	subs	r4, r3, #1
 80064ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	bfbf      	itttt	lt
 80064f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80064f4:	1ae3      	sublt	r3, r4, r3
 80064f6:	18d2      	addlt	r2, r2, r3
 80064f8:	bfa8      	it	ge
 80064fa:	1b1c      	subge	r4, r3, r4
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	bfbe      	ittt	lt
 8006500:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006502:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006504:	2400      	movlt	r4, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	bfb5      	itete	lt
 800650a:	eba8 0603 	sublt.w	r6, r8, r3
 800650e:	4646      	movge	r6, r8
 8006510:	2300      	movlt	r3, #0
 8006512:	9b07      	ldrge	r3, [sp, #28]
 8006514:	e730      	b.n	8006378 <_dtoa_r+0x730>
 8006516:	4646      	mov	r6, r8
 8006518:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800651a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800651c:	e735      	b.n	800638a <_dtoa_r+0x742>
 800651e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006520:	e75c      	b.n	80063dc <_dtoa_r+0x794>
 8006522:	2300      	movs	r3, #0
 8006524:	e788      	b.n	8006438 <_dtoa_r+0x7f0>
 8006526:	9b02      	ldr	r3, [sp, #8]
 8006528:	e786      	b.n	8006438 <_dtoa_r+0x7f0>
 800652a:	2300      	movs	r3, #0
 800652c:	930a      	str	r3, [sp, #40]	@ 0x28
 800652e:	e788      	b.n	8006442 <_dtoa_r+0x7fa>
 8006530:	d09f      	beq.n	8006472 <_dtoa_r+0x82a>
 8006532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006534:	331c      	adds	r3, #28
 8006536:	441a      	add	r2, r3
 8006538:	4498      	add	r8, r3
 800653a:	441e      	add	r6, r3
 800653c:	9209      	str	r2, [sp, #36]	@ 0x24
 800653e:	e798      	b.n	8006472 <_dtoa_r+0x82a>
 8006540:	4603      	mov	r3, r0
 8006542:	e7f6      	b.n	8006532 <_dtoa_r+0x8ea>
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	9704      	str	r7, [sp, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	dc20      	bgt.n	800658e <_dtoa_r+0x946>
 800654c:	9308      	str	r3, [sp, #32]
 800654e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006550:	2b02      	cmp	r3, #2
 8006552:	dd1e      	ble.n	8006592 <_dtoa_r+0x94a>
 8006554:	9b08      	ldr	r3, [sp, #32]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f47f aebc 	bne.w	80062d4 <_dtoa_r+0x68c>
 800655c:	4621      	mov	r1, r4
 800655e:	2205      	movs	r2, #5
 8006560:	4658      	mov	r0, fp
 8006562:	f000 fa99 	bl	8006a98 <__multadd>
 8006566:	4601      	mov	r1, r0
 8006568:	4604      	mov	r4, r0
 800656a:	4648      	mov	r0, r9
 800656c:	f000 fcf4 	bl	8006f58 <__mcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	f77f aeaf 	ble.w	80062d4 <_dtoa_r+0x68c>
 8006576:	2331      	movs	r3, #49	@ 0x31
 8006578:	4656      	mov	r6, sl
 800657a:	f806 3b01 	strb.w	r3, [r6], #1
 800657e:	9b04      	ldr	r3, [sp, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	e6aa      	b.n	80062dc <_dtoa_r+0x694>
 8006586:	9c07      	ldr	r4, [sp, #28]
 8006588:	9704      	str	r7, [sp, #16]
 800658a:	4625      	mov	r5, r4
 800658c:	e7f3      	b.n	8006576 <_dtoa_r+0x92e>
 800658e:	9b07      	ldr	r3, [sp, #28]
 8006590:	9308      	str	r3, [sp, #32]
 8006592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8104 	beq.w	80067a2 <_dtoa_r+0xb5a>
 800659a:	2e00      	cmp	r6, #0
 800659c:	dd05      	ble.n	80065aa <_dtoa_r+0x962>
 800659e:	4629      	mov	r1, r5
 80065a0:	4632      	mov	r2, r6
 80065a2:	4658      	mov	r0, fp
 80065a4:	f000 fc6c 	bl	8006e80 <__lshift>
 80065a8:	4605      	mov	r5, r0
 80065aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d05a      	beq.n	8006666 <_dtoa_r+0xa1e>
 80065b0:	4658      	mov	r0, fp
 80065b2:	6869      	ldr	r1, [r5, #4]
 80065b4:	f000 fa0e 	bl	80069d4 <_Balloc>
 80065b8:	4606      	mov	r6, r0
 80065ba:	b928      	cbnz	r0, 80065c8 <_dtoa_r+0x980>
 80065bc:	4602      	mov	r2, r0
 80065be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065c2:	4b83      	ldr	r3, [pc, #524]	@ (80067d0 <_dtoa_r+0xb88>)
 80065c4:	f7ff bb54 	b.w	8005c70 <_dtoa_r+0x28>
 80065c8:	692a      	ldr	r2, [r5, #16]
 80065ca:	f105 010c 	add.w	r1, r5, #12
 80065ce:	3202      	adds	r2, #2
 80065d0:	0092      	lsls	r2, r2, #2
 80065d2:	300c      	adds	r0, #12
 80065d4:	f7ff fa9d 	bl	8005b12 <memcpy>
 80065d8:	2201      	movs	r2, #1
 80065da:	4631      	mov	r1, r6
 80065dc:	4658      	mov	r0, fp
 80065de:	f000 fc4f 	bl	8006e80 <__lshift>
 80065e2:	462f      	mov	r7, r5
 80065e4:	4605      	mov	r5, r0
 80065e6:	f10a 0301 	add.w	r3, sl, #1
 80065ea:	9307      	str	r3, [sp, #28]
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	4453      	add	r3, sl
 80065f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065fa:	9b07      	ldr	r3, [sp, #28]
 80065fc:	4621      	mov	r1, r4
 80065fe:	3b01      	subs	r3, #1
 8006600:	4648      	mov	r0, r9
 8006602:	9302      	str	r3, [sp, #8]
 8006604:	f7ff fa98 	bl	8005b38 <quorem>
 8006608:	4639      	mov	r1, r7
 800660a:	9008      	str	r0, [sp, #32]
 800660c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006610:	4648      	mov	r0, r9
 8006612:	f000 fca1 	bl	8006f58 <__mcmp>
 8006616:	462a      	mov	r2, r5
 8006618:	9009      	str	r0, [sp, #36]	@ 0x24
 800661a:	4621      	mov	r1, r4
 800661c:	4658      	mov	r0, fp
 800661e:	f000 fcb7 	bl	8006f90 <__mdiff>
 8006622:	68c2      	ldr	r2, [r0, #12]
 8006624:	4606      	mov	r6, r0
 8006626:	bb02      	cbnz	r2, 800666a <_dtoa_r+0xa22>
 8006628:	4601      	mov	r1, r0
 800662a:	4648      	mov	r0, r9
 800662c:	f000 fc94 	bl	8006f58 <__mcmp>
 8006630:	4602      	mov	r2, r0
 8006632:	4631      	mov	r1, r6
 8006634:	4658      	mov	r0, fp
 8006636:	920c      	str	r2, [sp, #48]	@ 0x30
 8006638:	f000 fa0c 	bl	8006a54 <_Bfree>
 800663c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800663e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006640:	9e07      	ldr	r6, [sp, #28]
 8006642:	ea43 0102 	orr.w	r1, r3, r2
 8006646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006648:	4319      	orrs	r1, r3
 800664a:	d110      	bne.n	800666e <_dtoa_r+0xa26>
 800664c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006650:	d029      	beq.n	80066a6 <_dtoa_r+0xa5e>
 8006652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd02      	ble.n	800665e <_dtoa_r+0xa16>
 8006658:	9b08      	ldr	r3, [sp, #32]
 800665a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800665e:	9b02      	ldr	r3, [sp, #8]
 8006660:	f883 8000 	strb.w	r8, [r3]
 8006664:	e63b      	b.n	80062de <_dtoa_r+0x696>
 8006666:	4628      	mov	r0, r5
 8006668:	e7bb      	b.n	80065e2 <_dtoa_r+0x99a>
 800666a:	2201      	movs	r2, #1
 800666c:	e7e1      	b.n	8006632 <_dtoa_r+0x9ea>
 800666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	db04      	blt.n	800667e <_dtoa_r+0xa36>
 8006674:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006676:	430b      	orrs	r3, r1
 8006678:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800667a:	430b      	orrs	r3, r1
 800667c:	d120      	bne.n	80066c0 <_dtoa_r+0xa78>
 800667e:	2a00      	cmp	r2, #0
 8006680:	dded      	ble.n	800665e <_dtoa_r+0xa16>
 8006682:	4649      	mov	r1, r9
 8006684:	2201      	movs	r2, #1
 8006686:	4658      	mov	r0, fp
 8006688:	f000 fbfa 	bl	8006e80 <__lshift>
 800668c:	4621      	mov	r1, r4
 800668e:	4681      	mov	r9, r0
 8006690:	f000 fc62 	bl	8006f58 <__mcmp>
 8006694:	2800      	cmp	r0, #0
 8006696:	dc03      	bgt.n	80066a0 <_dtoa_r+0xa58>
 8006698:	d1e1      	bne.n	800665e <_dtoa_r+0xa16>
 800669a:	f018 0f01 	tst.w	r8, #1
 800669e:	d0de      	beq.n	800665e <_dtoa_r+0xa16>
 80066a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066a4:	d1d8      	bne.n	8006658 <_dtoa_r+0xa10>
 80066a6:	2339      	movs	r3, #57	@ 0x39
 80066a8:	9a02      	ldr	r2, [sp, #8]
 80066aa:	7013      	strb	r3, [r2, #0]
 80066ac:	4633      	mov	r3, r6
 80066ae:	461e      	mov	r6, r3
 80066b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	2a39      	cmp	r2, #57	@ 0x39
 80066b8:	d052      	beq.n	8006760 <_dtoa_r+0xb18>
 80066ba:	3201      	adds	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e60e      	b.n	80062de <_dtoa_r+0x696>
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	dd07      	ble.n	80066d4 <_dtoa_r+0xa8c>
 80066c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066c8:	d0ed      	beq.n	80066a6 <_dtoa_r+0xa5e>
 80066ca:	9a02      	ldr	r2, [sp, #8]
 80066cc:	f108 0301 	add.w	r3, r8, #1
 80066d0:	7013      	strb	r3, [r2, #0]
 80066d2:	e604      	b.n	80062de <_dtoa_r+0x696>
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066de:	4293      	cmp	r3, r2
 80066e0:	d028      	beq.n	8006734 <_dtoa_r+0xaec>
 80066e2:	4649      	mov	r1, r9
 80066e4:	2300      	movs	r3, #0
 80066e6:	220a      	movs	r2, #10
 80066e8:	4658      	mov	r0, fp
 80066ea:	f000 f9d5 	bl	8006a98 <__multadd>
 80066ee:	42af      	cmp	r7, r5
 80066f0:	4681      	mov	r9, r0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	f04f 020a 	mov.w	r2, #10
 80066fa:	4639      	mov	r1, r7
 80066fc:	4658      	mov	r0, fp
 80066fe:	d107      	bne.n	8006710 <_dtoa_r+0xac8>
 8006700:	f000 f9ca 	bl	8006a98 <__multadd>
 8006704:	4607      	mov	r7, r0
 8006706:	4605      	mov	r5, r0
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	e774      	b.n	80065fa <_dtoa_r+0x9b2>
 8006710:	f000 f9c2 	bl	8006a98 <__multadd>
 8006714:	4629      	mov	r1, r5
 8006716:	4607      	mov	r7, r0
 8006718:	2300      	movs	r3, #0
 800671a:	220a      	movs	r2, #10
 800671c:	4658      	mov	r0, fp
 800671e:	f000 f9bb 	bl	8006a98 <__multadd>
 8006722:	4605      	mov	r5, r0
 8006724:	e7f0      	b.n	8006708 <_dtoa_r+0xac0>
 8006726:	9b08      	ldr	r3, [sp, #32]
 8006728:	2700      	movs	r7, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfcc      	ite	gt
 800672e:	461e      	movgt	r6, r3
 8006730:	2601      	movle	r6, #1
 8006732:	4456      	add	r6, sl
 8006734:	4649      	mov	r1, r9
 8006736:	2201      	movs	r2, #1
 8006738:	4658      	mov	r0, fp
 800673a:	f000 fba1 	bl	8006e80 <__lshift>
 800673e:	4621      	mov	r1, r4
 8006740:	4681      	mov	r9, r0
 8006742:	f000 fc09 	bl	8006f58 <__mcmp>
 8006746:	2800      	cmp	r0, #0
 8006748:	dcb0      	bgt.n	80066ac <_dtoa_r+0xa64>
 800674a:	d102      	bne.n	8006752 <_dtoa_r+0xb0a>
 800674c:	f018 0f01 	tst.w	r8, #1
 8006750:	d1ac      	bne.n	80066ac <_dtoa_r+0xa64>
 8006752:	4633      	mov	r3, r6
 8006754:	461e      	mov	r6, r3
 8006756:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800675a:	2a30      	cmp	r2, #48	@ 0x30
 800675c:	d0fa      	beq.n	8006754 <_dtoa_r+0xb0c>
 800675e:	e5be      	b.n	80062de <_dtoa_r+0x696>
 8006760:	459a      	cmp	sl, r3
 8006762:	d1a4      	bne.n	80066ae <_dtoa_r+0xa66>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	3301      	adds	r3, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	2331      	movs	r3, #49	@ 0x31
 800676c:	f88a 3000 	strb.w	r3, [sl]
 8006770:	e5b5      	b.n	80062de <_dtoa_r+0x696>
 8006772:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006774:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067d4 <_dtoa_r+0xb8c>
 8006778:	b11b      	cbz	r3, 8006782 <_dtoa_r+0xb3a>
 800677a:	f10a 0308 	add.w	r3, sl, #8
 800677e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006780:	6013      	str	r3, [r2, #0]
 8006782:	4650      	mov	r0, sl
 8006784:	b017      	add	sp, #92	@ 0x5c
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800678c:	2b01      	cmp	r3, #1
 800678e:	f77f ae3d 	ble.w	800640c <_dtoa_r+0x7c4>
 8006792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006794:	930a      	str	r3, [sp, #40]	@ 0x28
 8006796:	2001      	movs	r0, #1
 8006798:	e65b      	b.n	8006452 <_dtoa_r+0x80a>
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f77f aed6 	ble.w	800654e <_dtoa_r+0x906>
 80067a2:	4656      	mov	r6, sl
 80067a4:	4621      	mov	r1, r4
 80067a6:	4648      	mov	r0, r9
 80067a8:	f7ff f9c6 	bl	8005b38 <quorem>
 80067ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067b0:	9b08      	ldr	r3, [sp, #32]
 80067b2:	f806 8b01 	strb.w	r8, [r6], #1
 80067b6:	eba6 020a 	sub.w	r2, r6, sl
 80067ba:	4293      	cmp	r3, r2
 80067bc:	ddb3      	ble.n	8006726 <_dtoa_r+0xade>
 80067be:	4649      	mov	r1, r9
 80067c0:	2300      	movs	r3, #0
 80067c2:	220a      	movs	r2, #10
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 f967 	bl	8006a98 <__multadd>
 80067ca:	4681      	mov	r9, r0
 80067cc:	e7ea      	b.n	80067a4 <_dtoa_r+0xb5c>
 80067ce:	bf00      	nop
 80067d0:	0800b067 	.word	0x0800b067
 80067d4:	0800afeb 	.word	0x0800afeb

080067d8 <_free_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4605      	mov	r5, r0
 80067dc:	2900      	cmp	r1, #0
 80067de:	d040      	beq.n	8006862 <_free_r+0x8a>
 80067e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e4:	1f0c      	subs	r4, r1, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	18e4      	addlt	r4, r4, r3
 80067ec:	f000 f8e6 	bl	80069bc <__malloc_lock>
 80067f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006864 <_free_r+0x8c>)
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	b933      	cbnz	r3, 8006804 <_free_r+0x2c>
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	6014      	str	r4, [r2, #0]
 80067fa:	4628      	mov	r0, r5
 80067fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006800:	f000 b8e2 	b.w	80069c8 <__malloc_unlock>
 8006804:	42a3      	cmp	r3, r4
 8006806:	d908      	bls.n	800681a <_free_r+0x42>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	1821      	adds	r1, r4, r0
 800680c:	428b      	cmp	r3, r1
 800680e:	bf01      	itttt	eq
 8006810:	6819      	ldreq	r1, [r3, #0]
 8006812:	685b      	ldreq	r3, [r3, #4]
 8006814:	1809      	addeq	r1, r1, r0
 8006816:	6021      	streq	r1, [r4, #0]
 8006818:	e7ed      	b.n	80067f6 <_free_r+0x1e>
 800681a:	461a      	mov	r2, r3
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	b10b      	cbz	r3, 8006824 <_free_r+0x4c>
 8006820:	42a3      	cmp	r3, r4
 8006822:	d9fa      	bls.n	800681a <_free_r+0x42>
 8006824:	6811      	ldr	r1, [r2, #0]
 8006826:	1850      	adds	r0, r2, r1
 8006828:	42a0      	cmp	r0, r4
 800682a:	d10b      	bne.n	8006844 <_free_r+0x6c>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	4401      	add	r1, r0
 8006830:	1850      	adds	r0, r2, r1
 8006832:	4283      	cmp	r3, r0
 8006834:	6011      	str	r1, [r2, #0]
 8006836:	d1e0      	bne.n	80067fa <_free_r+0x22>
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4408      	add	r0, r1
 800683e:	6010      	str	r0, [r2, #0]
 8006840:	6053      	str	r3, [r2, #4]
 8006842:	e7da      	b.n	80067fa <_free_r+0x22>
 8006844:	d902      	bls.n	800684c <_free_r+0x74>
 8006846:	230c      	movs	r3, #12
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	e7d6      	b.n	80067fa <_free_r+0x22>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	1821      	adds	r1, r4, r0
 8006850:	428b      	cmp	r3, r1
 8006852:	bf01      	itttt	eq
 8006854:	6819      	ldreq	r1, [r3, #0]
 8006856:	685b      	ldreq	r3, [r3, #4]
 8006858:	1809      	addeq	r1, r1, r0
 800685a:	6021      	streq	r1, [r4, #0]
 800685c:	6063      	str	r3, [r4, #4]
 800685e:	6054      	str	r4, [r2, #4]
 8006860:	e7cb      	b.n	80067fa <_free_r+0x22>
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	200008e0 	.word	0x200008e0

08006868 <malloc>:
 8006868:	4b02      	ldr	r3, [pc, #8]	@ (8006874 <malloc+0xc>)
 800686a:	4601      	mov	r1, r0
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	f000 b825 	b.w	80068bc <_malloc_r>
 8006872:	bf00      	nop
 8006874:	200000b0 	.word	0x200000b0

08006878 <sbrk_aligned>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4e0f      	ldr	r6, [pc, #60]	@ (80068b8 <sbrk_aligned+0x40>)
 800687c:	460c      	mov	r4, r1
 800687e:	6831      	ldr	r1, [r6, #0]
 8006880:	4605      	mov	r5, r0
 8006882:	b911      	cbnz	r1, 800688a <sbrk_aligned+0x12>
 8006884:	f001 fddc 	bl	8008440 <_sbrk_r>
 8006888:	6030      	str	r0, [r6, #0]
 800688a:	4621      	mov	r1, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f001 fdd7 	bl	8008440 <_sbrk_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d103      	bne.n	800689e <sbrk_aligned+0x26>
 8006896:	f04f 34ff 	mov.w	r4, #4294967295
 800689a:	4620      	mov	r0, r4
 800689c:	bd70      	pop	{r4, r5, r6, pc}
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d0f8      	beq.n	800689a <sbrk_aligned+0x22>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4628      	mov	r0, r5
 80068ac:	f001 fdc8 	bl	8008440 <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1f2      	bne.n	800689a <sbrk_aligned+0x22>
 80068b4:	e7ef      	b.n	8006896 <sbrk_aligned+0x1e>
 80068b6:	bf00      	nop
 80068b8:	200008dc 	.word	0x200008dc

080068bc <_malloc_r>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	1ccd      	adds	r5, r1, #3
 80068c2:	f025 0503 	bic.w	r5, r5, #3
 80068c6:	3508      	adds	r5, #8
 80068c8:	2d0c      	cmp	r5, #12
 80068ca:	bf38      	it	cc
 80068cc:	250c      	movcc	r5, #12
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	4606      	mov	r6, r0
 80068d2:	db01      	blt.n	80068d8 <_malloc_r+0x1c>
 80068d4:	42a9      	cmp	r1, r5
 80068d6:	d904      	bls.n	80068e2 <_malloc_r+0x26>
 80068d8:	230c      	movs	r3, #12
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	2000      	movs	r0, #0
 80068de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069b8 <_malloc_r+0xfc>
 80068e6:	f000 f869 	bl	80069bc <__malloc_lock>
 80068ea:	f8d8 3000 	ldr.w	r3, [r8]
 80068ee:	461c      	mov	r4, r3
 80068f0:	bb44      	cbnz	r4, 8006944 <_malloc_r+0x88>
 80068f2:	4629      	mov	r1, r5
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff ffbf 	bl	8006878 <sbrk_aligned>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	4604      	mov	r4, r0
 80068fe:	d158      	bne.n	80069b2 <_malloc_r+0xf6>
 8006900:	f8d8 4000 	ldr.w	r4, [r8]
 8006904:	4627      	mov	r7, r4
 8006906:	2f00      	cmp	r7, #0
 8006908:	d143      	bne.n	8006992 <_malloc_r+0xd6>
 800690a:	2c00      	cmp	r4, #0
 800690c:	d04b      	beq.n	80069a6 <_malloc_r+0xea>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	4639      	mov	r1, r7
 8006912:	4630      	mov	r0, r6
 8006914:	eb04 0903 	add.w	r9, r4, r3
 8006918:	f001 fd92 	bl	8008440 <_sbrk_r>
 800691c:	4581      	cmp	r9, r0
 800691e:	d142      	bne.n	80069a6 <_malloc_r+0xea>
 8006920:	6821      	ldr	r1, [r4, #0]
 8006922:	4630      	mov	r0, r6
 8006924:	1a6d      	subs	r5, r5, r1
 8006926:	4629      	mov	r1, r5
 8006928:	f7ff ffa6 	bl	8006878 <sbrk_aligned>
 800692c:	3001      	adds	r0, #1
 800692e:	d03a      	beq.n	80069a6 <_malloc_r+0xea>
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	442b      	add	r3, r5
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	f8d8 3000 	ldr.w	r3, [r8]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	bb62      	cbnz	r2, 8006998 <_malloc_r+0xdc>
 800693e:	f8c8 7000 	str.w	r7, [r8]
 8006942:	e00f      	b.n	8006964 <_malloc_r+0xa8>
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	1b52      	subs	r2, r2, r5
 8006948:	d420      	bmi.n	800698c <_malloc_r+0xd0>
 800694a:	2a0b      	cmp	r2, #11
 800694c:	d917      	bls.n	800697e <_malloc_r+0xc2>
 800694e:	1961      	adds	r1, r4, r5
 8006950:	42a3      	cmp	r3, r4
 8006952:	6025      	str	r5, [r4, #0]
 8006954:	bf18      	it	ne
 8006956:	6059      	strne	r1, [r3, #4]
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	bf08      	it	eq
 800695c:	f8c8 1000 	streq.w	r1, [r8]
 8006960:	5162      	str	r2, [r4, r5]
 8006962:	604b      	str	r3, [r1, #4]
 8006964:	4630      	mov	r0, r6
 8006966:	f000 f82f 	bl	80069c8 <__malloc_unlock>
 800696a:	f104 000b 	add.w	r0, r4, #11
 800696e:	1d23      	adds	r3, r4, #4
 8006970:	f020 0007 	bic.w	r0, r0, #7
 8006974:	1ac2      	subs	r2, r0, r3
 8006976:	bf1c      	itt	ne
 8006978:	1a1b      	subne	r3, r3, r0
 800697a:	50a3      	strne	r3, [r4, r2]
 800697c:	e7af      	b.n	80068de <_malloc_r+0x22>
 800697e:	6862      	ldr	r2, [r4, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	bf0c      	ite	eq
 8006984:	f8c8 2000 	streq.w	r2, [r8]
 8006988:	605a      	strne	r2, [r3, #4]
 800698a:	e7eb      	b.n	8006964 <_malloc_r+0xa8>
 800698c:	4623      	mov	r3, r4
 800698e:	6864      	ldr	r4, [r4, #4]
 8006990:	e7ae      	b.n	80068f0 <_malloc_r+0x34>
 8006992:	463c      	mov	r4, r7
 8006994:	687f      	ldr	r7, [r7, #4]
 8006996:	e7b6      	b.n	8006906 <_malloc_r+0x4a>
 8006998:	461a      	mov	r2, r3
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	42a3      	cmp	r3, r4
 800699e:	d1fb      	bne.n	8006998 <_malloc_r+0xdc>
 80069a0:	2300      	movs	r3, #0
 80069a2:	6053      	str	r3, [r2, #4]
 80069a4:	e7de      	b.n	8006964 <_malloc_r+0xa8>
 80069a6:	230c      	movs	r3, #12
 80069a8:	4630      	mov	r0, r6
 80069aa:	6033      	str	r3, [r6, #0]
 80069ac:	f000 f80c 	bl	80069c8 <__malloc_unlock>
 80069b0:	e794      	b.n	80068dc <_malloc_r+0x20>
 80069b2:	6005      	str	r5, [r0, #0]
 80069b4:	e7d6      	b.n	8006964 <_malloc_r+0xa8>
 80069b6:	bf00      	nop
 80069b8:	200008e0 	.word	0x200008e0

080069bc <__malloc_lock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__malloc_lock+0x8>)
 80069be:	f7ff b898 	b.w	8005af2 <__retarget_lock_acquire_recursive>
 80069c2:	bf00      	nop
 80069c4:	200008d8 	.word	0x200008d8

080069c8 <__malloc_unlock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_unlock+0x8>)
 80069ca:	f7ff b893 	b.w	8005af4 <__retarget_lock_release_recursive>
 80069ce:	bf00      	nop
 80069d0:	200008d8 	.word	0x200008d8

080069d4 <_Balloc>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	69c6      	ldr	r6, [r0, #28]
 80069d8:	4604      	mov	r4, r0
 80069da:	460d      	mov	r5, r1
 80069dc:	b976      	cbnz	r6, 80069fc <_Balloc+0x28>
 80069de:	2010      	movs	r0, #16
 80069e0:	f7ff ff42 	bl	8006868 <malloc>
 80069e4:	4602      	mov	r2, r0
 80069e6:	61e0      	str	r0, [r4, #28]
 80069e8:	b920      	cbnz	r0, 80069f4 <_Balloc+0x20>
 80069ea:	216b      	movs	r1, #107	@ 0x6b
 80069ec:	4b17      	ldr	r3, [pc, #92]	@ (8006a4c <_Balloc+0x78>)
 80069ee:	4818      	ldr	r0, [pc, #96]	@ (8006a50 <_Balloc+0x7c>)
 80069f0:	f001 fd3c 	bl	800846c <__assert_func>
 80069f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069f8:	6006      	str	r6, [r0, #0]
 80069fa:	60c6      	str	r6, [r0, #12]
 80069fc:	69e6      	ldr	r6, [r4, #28]
 80069fe:	68f3      	ldr	r3, [r6, #12]
 8006a00:	b183      	cbz	r3, 8006a24 <_Balloc+0x50>
 8006a02:	69e3      	ldr	r3, [r4, #28]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a0a:	b9b8      	cbnz	r0, 8006a3c <_Balloc+0x68>
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8006a12:	1d72      	adds	r2, r6, #5
 8006a14:	4620      	mov	r0, r4
 8006a16:	0092      	lsls	r2, r2, #2
 8006a18:	f001 fd46 	bl	80084a8 <_calloc_r>
 8006a1c:	b160      	cbz	r0, 8006a38 <_Balloc+0x64>
 8006a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a22:	e00e      	b.n	8006a42 <_Balloc+0x6e>
 8006a24:	2221      	movs	r2, #33	@ 0x21
 8006a26:	2104      	movs	r1, #4
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f001 fd3d 	bl	80084a8 <_calloc_r>
 8006a2e:	69e3      	ldr	r3, [r4, #28]
 8006a30:	60f0      	str	r0, [r6, #12]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e4      	bne.n	8006a02 <_Balloc+0x2e>
 8006a38:	2000      	movs	r0, #0
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	6802      	ldr	r2, [r0, #0]
 8006a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a42:	2300      	movs	r3, #0
 8006a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a48:	e7f7      	b.n	8006a3a <_Balloc+0x66>
 8006a4a:	bf00      	nop
 8006a4c:	0800aff8 	.word	0x0800aff8
 8006a50:	0800b078 	.word	0x0800b078

08006a54 <_Bfree>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	69c6      	ldr	r6, [r0, #28]
 8006a58:	4605      	mov	r5, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	b976      	cbnz	r6, 8006a7c <_Bfree+0x28>
 8006a5e:	2010      	movs	r0, #16
 8006a60:	f7ff ff02 	bl	8006868 <malloc>
 8006a64:	4602      	mov	r2, r0
 8006a66:	61e8      	str	r0, [r5, #28]
 8006a68:	b920      	cbnz	r0, 8006a74 <_Bfree+0x20>
 8006a6a:	218f      	movs	r1, #143	@ 0x8f
 8006a6c:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <_Bfree+0x3c>)
 8006a6e:	4809      	ldr	r0, [pc, #36]	@ (8006a94 <_Bfree+0x40>)
 8006a70:	f001 fcfc 	bl	800846c <__assert_func>
 8006a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a78:	6006      	str	r6, [r0, #0]
 8006a7a:	60c6      	str	r6, [r0, #12]
 8006a7c:	b13c      	cbz	r4, 8006a8e <_Bfree+0x3a>
 8006a7e:	69eb      	ldr	r3, [r5, #28]
 8006a80:	6862      	ldr	r2, [r4, #4]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a88:	6021      	str	r1, [r4, #0]
 8006a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	0800aff8 	.word	0x0800aff8
 8006a94:	0800b078 	.word	0x0800b078

08006a98 <__multadd>:
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9c:	4607      	mov	r7, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	461e      	mov	r6, r3
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	690d      	ldr	r5, [r1, #16]
 8006aa6:	f101 0c14 	add.w	ip, r1, #20
 8006aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8006aae:	3001      	adds	r0, #1
 8006ab0:	b299      	uxth	r1, r3
 8006ab2:	fb02 6101 	mla	r1, r2, r1, r6
 8006ab6:	0c1e      	lsrs	r6, r3, #16
 8006ab8:	0c0b      	lsrs	r3, r1, #16
 8006aba:	fb02 3306 	mla	r3, r2, r6, r3
 8006abe:	b289      	uxth	r1, r1
 8006ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ac4:	4285      	cmp	r5, r0
 8006ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006aca:	f84c 1b04 	str.w	r1, [ip], #4
 8006ace:	dcec      	bgt.n	8006aaa <__multadd+0x12>
 8006ad0:	b30e      	cbz	r6, 8006b16 <__multadd+0x7e>
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	42ab      	cmp	r3, r5
 8006ad6:	dc19      	bgt.n	8006b0c <__multadd+0x74>
 8006ad8:	6861      	ldr	r1, [r4, #4]
 8006ada:	4638      	mov	r0, r7
 8006adc:	3101      	adds	r1, #1
 8006ade:	f7ff ff79 	bl	80069d4 <_Balloc>
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	b928      	cbnz	r0, 8006af2 <__multadd+0x5a>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	21ba      	movs	r1, #186	@ 0xba
 8006aea:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <__multadd+0x84>)
 8006aec:	480c      	ldr	r0, [pc, #48]	@ (8006b20 <__multadd+0x88>)
 8006aee:	f001 fcbd 	bl	800846c <__assert_func>
 8006af2:	6922      	ldr	r2, [r4, #16]
 8006af4:	f104 010c 	add.w	r1, r4, #12
 8006af8:	3202      	adds	r2, #2
 8006afa:	0092      	lsls	r2, r2, #2
 8006afc:	300c      	adds	r0, #12
 8006afe:	f7ff f808 	bl	8005b12 <memcpy>
 8006b02:	4621      	mov	r1, r4
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff ffa5 	bl	8006a54 <_Bfree>
 8006b0a:	4644      	mov	r4, r8
 8006b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b10:	3501      	adds	r5, #1
 8006b12:	615e      	str	r6, [r3, #20]
 8006b14:	6125      	str	r5, [r4, #16]
 8006b16:	4620      	mov	r0, r4
 8006b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b1c:	0800b067 	.word	0x0800b067
 8006b20:	0800b078 	.word	0x0800b078

08006b24 <__s2b>:
 8006b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b28:	4615      	mov	r5, r2
 8006b2a:	2209      	movs	r2, #9
 8006b2c:	461f      	mov	r7, r3
 8006b2e:	3308      	adds	r3, #8
 8006b30:	460c      	mov	r4, r1
 8006b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b36:	4606      	mov	r6, r0
 8006b38:	2201      	movs	r2, #1
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	db09      	blt.n	8006b54 <__s2b+0x30>
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7ff ff47 	bl	80069d4 <_Balloc>
 8006b46:	b940      	cbnz	r0, 8006b5a <__s2b+0x36>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	21d3      	movs	r1, #211	@ 0xd3
 8006b4c:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <__s2b+0x8c>)
 8006b4e:	4819      	ldr	r0, [pc, #100]	@ (8006bb4 <__s2b+0x90>)
 8006b50:	f001 fc8c 	bl	800846c <__assert_func>
 8006b54:	0052      	lsls	r2, r2, #1
 8006b56:	3101      	adds	r1, #1
 8006b58:	e7f0      	b.n	8006b3c <__s2b+0x18>
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	2d09      	cmp	r5, #9
 8006b5e:	6143      	str	r3, [r0, #20]
 8006b60:	f04f 0301 	mov.w	r3, #1
 8006b64:	6103      	str	r3, [r0, #16]
 8006b66:	dd16      	ble.n	8006b96 <__s2b+0x72>
 8006b68:	f104 0909 	add.w	r9, r4, #9
 8006b6c:	46c8      	mov	r8, r9
 8006b6e:	442c      	add	r4, r5
 8006b70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b74:	4601      	mov	r1, r0
 8006b76:	220a      	movs	r2, #10
 8006b78:	4630      	mov	r0, r6
 8006b7a:	3b30      	subs	r3, #48	@ 0x30
 8006b7c:	f7ff ff8c 	bl	8006a98 <__multadd>
 8006b80:	45a0      	cmp	r8, r4
 8006b82:	d1f5      	bne.n	8006b70 <__s2b+0x4c>
 8006b84:	f1a5 0408 	sub.w	r4, r5, #8
 8006b88:	444c      	add	r4, r9
 8006b8a:	1b2d      	subs	r5, r5, r4
 8006b8c:	1963      	adds	r3, r4, r5
 8006b8e:	42bb      	cmp	r3, r7
 8006b90:	db04      	blt.n	8006b9c <__s2b+0x78>
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	2509      	movs	r5, #9
 8006b98:	340a      	adds	r4, #10
 8006b9a:	e7f6      	b.n	8006b8a <__s2b+0x66>
 8006b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ba0:	4601      	mov	r1, r0
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	3b30      	subs	r3, #48	@ 0x30
 8006ba8:	f7ff ff76 	bl	8006a98 <__multadd>
 8006bac:	e7ee      	b.n	8006b8c <__s2b+0x68>
 8006bae:	bf00      	nop
 8006bb0:	0800b067 	.word	0x0800b067
 8006bb4:	0800b078 	.word	0x0800b078

08006bb8 <__hi0bits>:
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006bbe:	bf3a      	itte	cc
 8006bc0:	0403      	lslcc	r3, r0, #16
 8006bc2:	2010      	movcc	r0, #16
 8006bc4:	2000      	movcs	r0, #0
 8006bc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bca:	bf3c      	itt	cc
 8006bcc:	021b      	lslcc	r3, r3, #8
 8006bce:	3008      	addcc	r0, #8
 8006bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd4:	bf3c      	itt	cc
 8006bd6:	011b      	lslcc	r3, r3, #4
 8006bd8:	3004      	addcc	r0, #4
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bde:	bf3c      	itt	cc
 8006be0:	009b      	lslcc	r3, r3, #2
 8006be2:	3002      	addcc	r0, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	db05      	blt.n	8006bf4 <__hi0bits+0x3c>
 8006be8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bec:	f100 0001 	add.w	r0, r0, #1
 8006bf0:	bf08      	it	eq
 8006bf2:	2020      	moveq	r0, #32
 8006bf4:	4770      	bx	lr

08006bf6 <__lo0bits>:
 8006bf6:	6803      	ldr	r3, [r0, #0]
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	f013 0007 	ands.w	r0, r3, #7
 8006bfe:	d00b      	beq.n	8006c18 <__lo0bits+0x22>
 8006c00:	07d9      	lsls	r1, r3, #31
 8006c02:	d421      	bmi.n	8006c48 <__lo0bits+0x52>
 8006c04:	0798      	lsls	r0, r3, #30
 8006c06:	bf49      	itett	mi
 8006c08:	085b      	lsrmi	r3, r3, #1
 8006c0a:	089b      	lsrpl	r3, r3, #2
 8006c0c:	2001      	movmi	r0, #1
 8006c0e:	6013      	strmi	r3, [r2, #0]
 8006c10:	bf5c      	itt	pl
 8006c12:	2002      	movpl	r0, #2
 8006c14:	6013      	strpl	r3, [r2, #0]
 8006c16:	4770      	bx	lr
 8006c18:	b299      	uxth	r1, r3
 8006c1a:	b909      	cbnz	r1, 8006c20 <__lo0bits+0x2a>
 8006c1c:	2010      	movs	r0, #16
 8006c1e:	0c1b      	lsrs	r3, r3, #16
 8006c20:	b2d9      	uxtb	r1, r3
 8006c22:	b909      	cbnz	r1, 8006c28 <__lo0bits+0x32>
 8006c24:	3008      	adds	r0, #8
 8006c26:	0a1b      	lsrs	r3, r3, #8
 8006c28:	0719      	lsls	r1, r3, #28
 8006c2a:	bf04      	itt	eq
 8006c2c:	091b      	lsreq	r3, r3, #4
 8006c2e:	3004      	addeq	r0, #4
 8006c30:	0799      	lsls	r1, r3, #30
 8006c32:	bf04      	itt	eq
 8006c34:	089b      	lsreq	r3, r3, #2
 8006c36:	3002      	addeq	r0, #2
 8006c38:	07d9      	lsls	r1, r3, #31
 8006c3a:	d403      	bmi.n	8006c44 <__lo0bits+0x4e>
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	f100 0001 	add.w	r0, r0, #1
 8006c42:	d003      	beq.n	8006c4c <__lo0bits+0x56>
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4770      	bx	lr
 8006c48:	2000      	movs	r0, #0
 8006c4a:	4770      	bx	lr
 8006c4c:	2020      	movs	r0, #32
 8006c4e:	4770      	bx	lr

08006c50 <__i2b>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	460c      	mov	r4, r1
 8006c54:	2101      	movs	r1, #1
 8006c56:	f7ff febd 	bl	80069d4 <_Balloc>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	b928      	cbnz	r0, 8006c6a <__i2b+0x1a>
 8006c5e:	f240 1145 	movw	r1, #325	@ 0x145
 8006c62:	4b04      	ldr	r3, [pc, #16]	@ (8006c74 <__i2b+0x24>)
 8006c64:	4804      	ldr	r0, [pc, #16]	@ (8006c78 <__i2b+0x28>)
 8006c66:	f001 fc01 	bl	800846c <__assert_func>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	6144      	str	r4, [r0, #20]
 8006c6e:	6103      	str	r3, [r0, #16]
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	bf00      	nop
 8006c74:	0800b067 	.word	0x0800b067
 8006c78:	0800b078 	.word	0x0800b078

08006c7c <__multiply>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	4614      	mov	r4, r2
 8006c82:	690a      	ldr	r2, [r1, #16]
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	460f      	mov	r7, r1
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	bfa2      	ittt	ge
 8006c8c:	4623      	movge	r3, r4
 8006c8e:	460c      	movge	r4, r1
 8006c90:	461f      	movge	r7, r3
 8006c92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	6861      	ldr	r1, [r4, #4]
 8006c9e:	eb0a 0609 	add.w	r6, sl, r9
 8006ca2:	42b3      	cmp	r3, r6
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	bfb8      	it	lt
 8006ca8:	3101      	addlt	r1, #1
 8006caa:	f7ff fe93 	bl	80069d4 <_Balloc>
 8006cae:	b930      	cbnz	r0, 8006cbe <__multiply+0x42>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006cb6:	4b43      	ldr	r3, [pc, #268]	@ (8006dc4 <__multiply+0x148>)
 8006cb8:	4843      	ldr	r0, [pc, #268]	@ (8006dc8 <__multiply+0x14c>)
 8006cba:	f001 fbd7 	bl	800846c <__assert_func>
 8006cbe:	f100 0514 	add.w	r5, r0, #20
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cca:	4543      	cmp	r3, r8
 8006ccc:	d321      	bcc.n	8006d12 <__multiply+0x96>
 8006cce:	f107 0114 	add.w	r1, r7, #20
 8006cd2:	f104 0214 	add.w	r2, r4, #20
 8006cd6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006cda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006cde:	9302      	str	r3, [sp, #8]
 8006ce0:	1b13      	subs	r3, r2, r4
 8006ce2:	3b15      	subs	r3, #21
 8006ce4:	f023 0303 	bic.w	r3, r3, #3
 8006ce8:	3304      	adds	r3, #4
 8006cea:	f104 0715 	add.w	r7, r4, #21
 8006cee:	42ba      	cmp	r2, r7
 8006cf0:	bf38      	it	cc
 8006cf2:	2304      	movcc	r3, #4
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9b02      	ldr	r3, [sp, #8]
 8006cf8:	9103      	str	r1, [sp, #12]
 8006cfa:	428b      	cmp	r3, r1
 8006cfc:	d80c      	bhi.n	8006d18 <__multiply+0x9c>
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	dd03      	ble.n	8006d0a <__multiply+0x8e>
 8006d02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d05a      	beq.n	8006dc0 <__multiply+0x144>
 8006d0a:	6106      	str	r6, [r0, #16]
 8006d0c:	b005      	add	sp, #20
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	f843 2b04 	str.w	r2, [r3], #4
 8006d16:	e7d8      	b.n	8006cca <__multiply+0x4e>
 8006d18:	f8b1 a000 	ldrh.w	sl, [r1]
 8006d1c:	f1ba 0f00 	cmp.w	sl, #0
 8006d20:	d023      	beq.n	8006d6a <__multiply+0xee>
 8006d22:	46a9      	mov	r9, r5
 8006d24:	f04f 0c00 	mov.w	ip, #0
 8006d28:	f104 0e14 	add.w	lr, r4, #20
 8006d2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d30:	f8d9 3000 	ldr.w	r3, [r9]
 8006d34:	fa1f fb87 	uxth.w	fp, r7
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d3e:	4463      	add	r3, ip
 8006d40:	f8d9 c000 	ldr.w	ip, [r9]
 8006d44:	0c3f      	lsrs	r7, r7, #16
 8006d46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d4a:	fb0a c707 	mla	r7, sl, r7, ip
 8006d4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d58:	4572      	cmp	r2, lr
 8006d5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d5e:	f849 3b04 	str.w	r3, [r9], #4
 8006d62:	d8e3      	bhi.n	8006d2c <__multiply+0xb0>
 8006d64:	9b01      	ldr	r3, [sp, #4]
 8006d66:	f845 c003 	str.w	ip, [r5, r3]
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	3104      	adds	r1, #4
 8006d6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d72:	f1b9 0f00 	cmp.w	r9, #0
 8006d76:	d021      	beq.n	8006dbc <__multiply+0x140>
 8006d78:	46ae      	mov	lr, r5
 8006d7a:	f04f 0a00 	mov.w	sl, #0
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	f104 0c14 	add.w	ip, r4, #20
 8006d84:	f8bc b000 	ldrh.w	fp, [ip]
 8006d88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	fb09 770b 	mla	r7, r9, fp, r7
 8006d92:	4457      	add	r7, sl
 8006d94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d98:	f84e 3b04 	str.w	r3, [lr], #4
 8006d9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006da0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006da4:	f8be 3000 	ldrh.w	r3, [lr]
 8006da8:	4562      	cmp	r2, ip
 8006daa:	fb09 330a 	mla	r3, r9, sl, r3
 8006dae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006db2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006db6:	d8e5      	bhi.n	8006d84 <__multiply+0x108>
 8006db8:	9f01      	ldr	r7, [sp, #4]
 8006dba:	51eb      	str	r3, [r5, r7]
 8006dbc:	3504      	adds	r5, #4
 8006dbe:	e79a      	b.n	8006cf6 <__multiply+0x7a>
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	e79c      	b.n	8006cfe <__multiply+0x82>
 8006dc4:	0800b067 	.word	0x0800b067
 8006dc8:	0800b078 	.word	0x0800b078

08006dcc <__pow5mult>:
 8006dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	4615      	mov	r5, r2
 8006dd2:	f012 0203 	ands.w	r2, r2, #3
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	460e      	mov	r6, r1
 8006dda:	d007      	beq.n	8006dec <__pow5mult+0x20>
 8006ddc:	4c25      	ldr	r4, [pc, #148]	@ (8006e74 <__pow5mult+0xa8>)
 8006dde:	3a01      	subs	r2, #1
 8006de0:	2300      	movs	r3, #0
 8006de2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006de6:	f7ff fe57 	bl	8006a98 <__multadd>
 8006dea:	4606      	mov	r6, r0
 8006dec:	10ad      	asrs	r5, r5, #2
 8006dee:	d03d      	beq.n	8006e6c <__pow5mult+0xa0>
 8006df0:	69fc      	ldr	r4, [r7, #28]
 8006df2:	b97c      	cbnz	r4, 8006e14 <__pow5mult+0x48>
 8006df4:	2010      	movs	r0, #16
 8006df6:	f7ff fd37 	bl	8006868 <malloc>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	61f8      	str	r0, [r7, #28]
 8006dfe:	b928      	cbnz	r0, 8006e0c <__pow5mult+0x40>
 8006e00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e04:	4b1c      	ldr	r3, [pc, #112]	@ (8006e78 <__pow5mult+0xac>)
 8006e06:	481d      	ldr	r0, [pc, #116]	@ (8006e7c <__pow5mult+0xb0>)
 8006e08:	f001 fb30 	bl	800846c <__assert_func>
 8006e0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e10:	6004      	str	r4, [r0, #0]
 8006e12:	60c4      	str	r4, [r0, #12]
 8006e14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006e18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e1c:	b94c      	cbnz	r4, 8006e32 <__pow5mult+0x66>
 8006e1e:	f240 2171 	movw	r1, #625	@ 0x271
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff ff14 	bl	8006c50 <__i2b>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	07eb      	lsls	r3, r5, #31
 8006e38:	d50a      	bpl.n	8006e50 <__pow5mult+0x84>
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	4638      	mov	r0, r7
 8006e40:	f7ff ff1c 	bl	8006c7c <__multiply>
 8006e44:	4680      	mov	r8, r0
 8006e46:	4631      	mov	r1, r6
 8006e48:	4638      	mov	r0, r7
 8006e4a:	f7ff fe03 	bl	8006a54 <_Bfree>
 8006e4e:	4646      	mov	r6, r8
 8006e50:	106d      	asrs	r5, r5, #1
 8006e52:	d00b      	beq.n	8006e6c <__pow5mult+0xa0>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	b938      	cbnz	r0, 8006e68 <__pow5mult+0x9c>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ff0d 	bl	8006c7c <__multiply>
 8006e62:	6020      	str	r0, [r4, #0]
 8006e64:	f8c0 9000 	str.w	r9, [r0]
 8006e68:	4604      	mov	r4, r0
 8006e6a:	e7e4      	b.n	8006e36 <__pow5mult+0x6a>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	bf00      	nop
 8006e74:	0800b0d4 	.word	0x0800b0d4
 8006e78:	0800aff8 	.word	0x0800aff8
 8006e7c:	0800b078 	.word	0x0800b078

08006e80 <__lshift>:
 8006e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	460c      	mov	r4, r1
 8006e86:	4607      	mov	r7, r0
 8006e88:	4691      	mov	r9, r2
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	6849      	ldr	r1, [r1, #4]
 8006e8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e98:	f108 0601 	add.w	r6, r8, #1
 8006e9c:	42b3      	cmp	r3, r6
 8006e9e:	db0b      	blt.n	8006eb8 <__lshift+0x38>
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff fd97 	bl	80069d4 <_Balloc>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b948      	cbnz	r0, 8006ebe <__lshift+0x3e>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006eb0:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <__lshift+0xd0>)
 8006eb2:	4828      	ldr	r0, [pc, #160]	@ (8006f54 <__lshift+0xd4>)
 8006eb4:	f001 fada 	bl	800846c <__assert_func>
 8006eb8:	3101      	adds	r1, #1
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	e7ee      	b.n	8006e9c <__lshift+0x1c>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f100 0114 	add.w	r1, r0, #20
 8006ec4:	f100 0210 	add.w	r2, r0, #16
 8006ec8:	4618      	mov	r0, r3
 8006eca:	4553      	cmp	r3, sl
 8006ecc:	db33      	blt.n	8006f36 <__lshift+0xb6>
 8006ece:	6920      	ldr	r0, [r4, #16]
 8006ed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ed4:	f104 0314 	add.w	r3, r4, #20
 8006ed8:	f019 091f 	ands.w	r9, r9, #31
 8006edc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ee4:	d02b      	beq.n	8006f3e <__lshift+0xbe>
 8006ee6:	468a      	mov	sl, r1
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f1c9 0e20 	rsb	lr, r9, #32
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ef4:	4310      	orrs	r0, r2
 8006ef6:	f84a 0b04 	str.w	r0, [sl], #4
 8006efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006efe:	459c      	cmp	ip, r3
 8006f00:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f04:	d8f3      	bhi.n	8006eee <__lshift+0x6e>
 8006f06:	ebac 0304 	sub.w	r3, ip, r4
 8006f0a:	3b15      	subs	r3, #21
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	3304      	adds	r3, #4
 8006f12:	f104 0015 	add.w	r0, r4, #21
 8006f16:	4584      	cmp	ip, r0
 8006f18:	bf38      	it	cc
 8006f1a:	2304      	movcc	r3, #4
 8006f1c:	50ca      	str	r2, [r1, r3]
 8006f1e:	b10a      	cbz	r2, 8006f24 <__lshift+0xa4>
 8006f20:	f108 0602 	add.w	r6, r8, #2
 8006f24:	3e01      	subs	r6, #1
 8006f26:	4638      	mov	r0, r7
 8006f28:	4621      	mov	r1, r4
 8006f2a:	612e      	str	r6, [r5, #16]
 8006f2c:	f7ff fd92 	bl	8006a54 <_Bfree>
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f36:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	e7c5      	b.n	8006eca <__lshift+0x4a>
 8006f3e:	3904      	subs	r1, #4
 8006f40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f44:	459c      	cmp	ip, r3
 8006f46:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f4a:	d8f9      	bhi.n	8006f40 <__lshift+0xc0>
 8006f4c:	e7ea      	b.n	8006f24 <__lshift+0xa4>
 8006f4e:	bf00      	nop
 8006f50:	0800b067 	.word	0x0800b067
 8006f54:	0800b078 	.word	0x0800b078

08006f58 <__mcmp>:
 8006f58:	4603      	mov	r3, r0
 8006f5a:	690a      	ldr	r2, [r1, #16]
 8006f5c:	6900      	ldr	r0, [r0, #16]
 8006f5e:	b530      	push	{r4, r5, lr}
 8006f60:	1a80      	subs	r0, r0, r2
 8006f62:	d10e      	bne.n	8006f82 <__mcmp+0x2a>
 8006f64:	3314      	adds	r3, #20
 8006f66:	3114      	adds	r1, #20
 8006f68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f78:	4295      	cmp	r5, r2
 8006f7a:	d003      	beq.n	8006f84 <__mcmp+0x2c>
 8006f7c:	d205      	bcs.n	8006f8a <__mcmp+0x32>
 8006f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f82:	bd30      	pop	{r4, r5, pc}
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d3f3      	bcc.n	8006f70 <__mcmp+0x18>
 8006f88:	e7fb      	b.n	8006f82 <__mcmp+0x2a>
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	e7f9      	b.n	8006f82 <__mcmp+0x2a>
	...

08006f90 <__mdiff>:
 8006f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	4689      	mov	r9, r1
 8006f96:	4606      	mov	r6, r0
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4648      	mov	r0, r9
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	f7ff ffdb 	bl	8006f58 <__mcmp>
 8006fa2:	1e05      	subs	r5, r0, #0
 8006fa4:	d112      	bne.n	8006fcc <__mdiff+0x3c>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4630      	mov	r0, r6
 8006faa:	f7ff fd13 	bl	80069d4 <_Balloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <__mdiff+0x2e>
 8006fb2:	f240 2137 	movw	r1, #567	@ 0x237
 8006fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80070b0 <__mdiff+0x120>)
 8006fb8:	483e      	ldr	r0, [pc, #248]	@ (80070b4 <__mdiff+0x124>)
 8006fba:	f001 fa57 	bl	800846c <__assert_func>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	b003      	add	sp, #12
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	bfbc      	itt	lt
 8006fce:	464b      	movlt	r3, r9
 8006fd0:	46a1      	movlt	r9, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fd8:	bfba      	itte	lt
 8006fda:	461c      	movlt	r4, r3
 8006fdc:	2501      	movlt	r5, #1
 8006fde:	2500      	movge	r5, #0
 8006fe0:	f7ff fcf8 	bl	80069d4 <_Balloc>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	b918      	cbnz	r0, 8006ff0 <__mdiff+0x60>
 8006fe8:	f240 2145 	movw	r1, #581	@ 0x245
 8006fec:	4b30      	ldr	r3, [pc, #192]	@ (80070b0 <__mdiff+0x120>)
 8006fee:	e7e3      	b.n	8006fb8 <__mdiff+0x28>
 8006ff0:	f100 0b14 	add.w	fp, r0, #20
 8006ff4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ff8:	f109 0310 	add.w	r3, r9, #16
 8006ffc:	60c5      	str	r5, [r0, #12]
 8006ffe:	f04f 0c00 	mov.w	ip, #0
 8007002:	f109 0514 	add.w	r5, r9, #20
 8007006:	46d9      	mov	r9, fp
 8007008:	6926      	ldr	r6, [r4, #16]
 800700a:	f104 0e14 	add.w	lr, r4, #20
 800700e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007012:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800701e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007022:	b281      	uxth	r1, r0
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	fa1f f38a 	uxth.w	r3, sl
 800702a:	1a5b      	subs	r3, r3, r1
 800702c:	0c00      	lsrs	r0, r0, #16
 800702e:	4463      	add	r3, ip
 8007030:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007034:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007038:	b29b      	uxth	r3, r3
 800703a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800703e:	4576      	cmp	r6, lr
 8007040:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007044:	f849 3b04 	str.w	r3, [r9], #4
 8007048:	d8e6      	bhi.n	8007018 <__mdiff+0x88>
 800704a:	1b33      	subs	r3, r6, r4
 800704c:	3b15      	subs	r3, #21
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	3415      	adds	r4, #21
 8007054:	3304      	adds	r3, #4
 8007056:	42a6      	cmp	r6, r4
 8007058:	bf38      	it	cc
 800705a:	2304      	movcc	r3, #4
 800705c:	441d      	add	r5, r3
 800705e:	445b      	add	r3, fp
 8007060:	461e      	mov	r6, r3
 8007062:	462c      	mov	r4, r5
 8007064:	4544      	cmp	r4, r8
 8007066:	d30e      	bcc.n	8007086 <__mdiff+0xf6>
 8007068:	f108 0103 	add.w	r1, r8, #3
 800706c:	1b49      	subs	r1, r1, r5
 800706e:	f021 0103 	bic.w	r1, r1, #3
 8007072:	3d03      	subs	r5, #3
 8007074:	45a8      	cmp	r8, r5
 8007076:	bf38      	it	cc
 8007078:	2100      	movcc	r1, #0
 800707a:	440b      	add	r3, r1
 800707c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007080:	b199      	cbz	r1, 80070aa <__mdiff+0x11a>
 8007082:	6117      	str	r7, [r2, #16]
 8007084:	e79e      	b.n	8006fc4 <__mdiff+0x34>
 8007086:	46e6      	mov	lr, ip
 8007088:	f854 1b04 	ldr.w	r1, [r4], #4
 800708c:	fa1f fc81 	uxth.w	ip, r1
 8007090:	44f4      	add	ip, lr
 8007092:	0c08      	lsrs	r0, r1, #16
 8007094:	4471      	add	r1, lr
 8007096:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800709a:	b289      	uxth	r1, r1
 800709c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80070a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070a4:	f846 1b04 	str.w	r1, [r6], #4
 80070a8:	e7dc      	b.n	8007064 <__mdiff+0xd4>
 80070aa:	3f01      	subs	r7, #1
 80070ac:	e7e6      	b.n	800707c <__mdiff+0xec>
 80070ae:	bf00      	nop
 80070b0:	0800b067 	.word	0x0800b067
 80070b4:	0800b078 	.word	0x0800b078

080070b8 <__ulp>:
 80070b8:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <__ulp+0x3c>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dc08      	bgt.n	80070d6 <__ulp+0x1e>
 80070c4:	425b      	negs	r3, r3
 80070c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80070ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80070ce:	da04      	bge.n	80070da <__ulp+0x22>
 80070d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80070d4:	4113      	asrs	r3, r2
 80070d6:	2200      	movs	r2, #0
 80070d8:	e008      	b.n	80070ec <__ulp+0x34>
 80070da:	f1a2 0314 	sub.w	r3, r2, #20
 80070de:	2b1e      	cmp	r3, #30
 80070e0:	bfd6      	itet	le
 80070e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070e6:	2201      	movgt	r2, #1
 80070e8:	40da      	lsrle	r2, r3
 80070ea:	2300      	movs	r3, #0
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	7ff00000 	.word	0x7ff00000

080070f8 <__b2d>:
 80070f8:	6902      	ldr	r2, [r0, #16]
 80070fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fc:	f100 0614 	add.w	r6, r0, #20
 8007100:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007104:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007108:	4f1e      	ldr	r7, [pc, #120]	@ (8007184 <__b2d+0x8c>)
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff fd54 	bl	8006bb8 <__hi0bits>
 8007110:	4603      	mov	r3, r0
 8007112:	f1c0 0020 	rsb	r0, r0, #32
 8007116:	2b0a      	cmp	r3, #10
 8007118:	f1a2 0504 	sub.w	r5, r2, #4
 800711c:	6008      	str	r0, [r1, #0]
 800711e:	dc12      	bgt.n	8007146 <__b2d+0x4e>
 8007120:	42ae      	cmp	r6, r5
 8007122:	bf2c      	ite	cs
 8007124:	2200      	movcs	r2, #0
 8007126:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800712a:	f1c3 0c0b 	rsb	ip, r3, #11
 800712e:	3315      	adds	r3, #21
 8007130:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007134:	fa04 f303 	lsl.w	r3, r4, r3
 8007138:	fa22 f20c 	lsr.w	r2, r2, ip
 800713c:	ea4e 0107 	orr.w	r1, lr, r7
 8007140:	431a      	orrs	r2, r3
 8007142:	4610      	mov	r0, r2
 8007144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007146:	42ae      	cmp	r6, r5
 8007148:	bf36      	itet	cc
 800714a:	f1a2 0508 	subcc.w	r5, r2, #8
 800714e:	2200      	movcs	r2, #0
 8007150:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007154:	3b0b      	subs	r3, #11
 8007156:	d012      	beq.n	800717e <__b2d+0x86>
 8007158:	f1c3 0720 	rsb	r7, r3, #32
 800715c:	fa22 f107 	lsr.w	r1, r2, r7
 8007160:	409c      	lsls	r4, r3
 8007162:	430c      	orrs	r4, r1
 8007164:	42b5      	cmp	r5, r6
 8007166:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800716a:	bf94      	ite	ls
 800716c:	2400      	movls	r4, #0
 800716e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007172:	409a      	lsls	r2, r3
 8007174:	40fc      	lsrs	r4, r7
 8007176:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800717a:	4322      	orrs	r2, r4
 800717c:	e7e1      	b.n	8007142 <__b2d+0x4a>
 800717e:	ea44 0107 	orr.w	r1, r4, r7
 8007182:	e7de      	b.n	8007142 <__b2d+0x4a>
 8007184:	3ff00000 	.word	0x3ff00000

08007188 <__d2b>:
 8007188:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800718c:	2101      	movs	r1, #1
 800718e:	4690      	mov	r8, r2
 8007190:	4699      	mov	r9, r3
 8007192:	9e08      	ldr	r6, [sp, #32]
 8007194:	f7ff fc1e 	bl	80069d4 <_Balloc>
 8007198:	4604      	mov	r4, r0
 800719a:	b930      	cbnz	r0, 80071aa <__d2b+0x22>
 800719c:	4602      	mov	r2, r0
 800719e:	f240 310f 	movw	r1, #783	@ 0x30f
 80071a2:	4b23      	ldr	r3, [pc, #140]	@ (8007230 <__d2b+0xa8>)
 80071a4:	4823      	ldr	r0, [pc, #140]	@ (8007234 <__d2b+0xac>)
 80071a6:	f001 f961 	bl	800846c <__assert_func>
 80071aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80071b2:	b10d      	cbz	r5, 80071b8 <__d2b+0x30>
 80071b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f1b8 0300 	subs.w	r3, r8, #0
 80071be:	d024      	beq.n	800720a <__d2b+0x82>
 80071c0:	4668      	mov	r0, sp
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	f7ff fd17 	bl	8006bf6 <__lo0bits>
 80071c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80071cc:	b1d8      	cbz	r0, 8007206 <__d2b+0x7e>
 80071ce:	f1c0 0320 	rsb	r3, r0, #32
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	430b      	orrs	r3, r1
 80071d8:	40c2      	lsrs	r2, r0
 80071da:	6163      	str	r3, [r4, #20]
 80071dc:	9201      	str	r2, [sp, #4]
 80071de:	9b01      	ldr	r3, [sp, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bf0c      	ite	eq
 80071e4:	2201      	moveq	r2, #1
 80071e6:	2202      	movne	r2, #2
 80071e8:	61a3      	str	r3, [r4, #24]
 80071ea:	6122      	str	r2, [r4, #16]
 80071ec:	b1ad      	cbz	r5, 800721a <__d2b+0x92>
 80071ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071f2:	4405      	add	r5, r0
 80071f4:	6035      	str	r5, [r6, #0]
 80071f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fc:	6018      	str	r0, [r3, #0]
 80071fe:	4620      	mov	r0, r4
 8007200:	b002      	add	sp, #8
 8007202:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007206:	6161      	str	r1, [r4, #20]
 8007208:	e7e9      	b.n	80071de <__d2b+0x56>
 800720a:	a801      	add	r0, sp, #4
 800720c:	f7ff fcf3 	bl	8006bf6 <__lo0bits>
 8007210:	9b01      	ldr	r3, [sp, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	6163      	str	r3, [r4, #20]
 8007216:	3020      	adds	r0, #32
 8007218:	e7e7      	b.n	80071ea <__d2b+0x62>
 800721a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800721e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007222:	6030      	str	r0, [r6, #0]
 8007224:	6918      	ldr	r0, [r3, #16]
 8007226:	f7ff fcc7 	bl	8006bb8 <__hi0bits>
 800722a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800722e:	e7e4      	b.n	80071fa <__d2b+0x72>
 8007230:	0800b067 	.word	0x0800b067
 8007234:	0800b078 	.word	0x0800b078

08007238 <__ratio>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	b085      	sub	sp, #20
 800723e:	e9cd 1000 	strd	r1, r0, [sp]
 8007242:	a902      	add	r1, sp, #8
 8007244:	f7ff ff58 	bl	80070f8 <__b2d>
 8007248:	468b      	mov	fp, r1
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	9800      	ldr	r0, [sp, #0]
 8007250:	a903      	add	r1, sp, #12
 8007252:	f7ff ff51 	bl	80070f8 <__b2d>
 8007256:	460d      	mov	r5, r1
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	4689      	mov	r9, r1
 800725c:	6919      	ldr	r1, [r3, #16]
 800725e:	9b00      	ldr	r3, [sp, #0]
 8007260:	4604      	mov	r4, r0
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	4630      	mov	r0, r6
 8007266:	1ac9      	subs	r1, r1, r3
 8007268:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfcd      	iteet	gt
 8007276:	463a      	movgt	r2, r7
 8007278:	462a      	movle	r2, r5
 800727a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800727e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007282:	bfd8      	it	le
 8007284:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007288:	464b      	mov	r3, r9
 800728a:	4622      	mov	r2, r4
 800728c:	4659      	mov	r1, fp
 800728e:	f7f9 fa4d 	bl	800072c <__aeabi_ddiv>
 8007292:	b005      	add	sp, #20
 8007294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007298 <__copybits>:
 8007298:	3901      	subs	r1, #1
 800729a:	b570      	push	{r4, r5, r6, lr}
 800729c:	1149      	asrs	r1, r1, #5
 800729e:	6914      	ldr	r4, [r2, #16]
 80072a0:	3101      	adds	r1, #1
 80072a2:	f102 0314 	add.w	r3, r2, #20
 80072a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80072aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072ae:	1f05      	subs	r5, r0, #4
 80072b0:	42a3      	cmp	r3, r4
 80072b2:	d30c      	bcc.n	80072ce <__copybits+0x36>
 80072b4:	1aa3      	subs	r3, r4, r2
 80072b6:	3b11      	subs	r3, #17
 80072b8:	f023 0303 	bic.w	r3, r3, #3
 80072bc:	3211      	adds	r2, #17
 80072be:	42a2      	cmp	r2, r4
 80072c0:	bf88      	it	hi
 80072c2:	2300      	movhi	r3, #0
 80072c4:	4418      	add	r0, r3
 80072c6:	2300      	movs	r3, #0
 80072c8:	4288      	cmp	r0, r1
 80072ca:	d305      	bcc.n	80072d8 <__copybits+0x40>
 80072cc:	bd70      	pop	{r4, r5, r6, pc}
 80072ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80072d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80072d6:	e7eb      	b.n	80072b0 <__copybits+0x18>
 80072d8:	f840 3b04 	str.w	r3, [r0], #4
 80072dc:	e7f4      	b.n	80072c8 <__copybits+0x30>

080072de <__any_on>:
 80072de:	f100 0214 	add.w	r2, r0, #20
 80072e2:	6900      	ldr	r0, [r0, #16]
 80072e4:	114b      	asrs	r3, r1, #5
 80072e6:	4298      	cmp	r0, r3
 80072e8:	b510      	push	{r4, lr}
 80072ea:	db11      	blt.n	8007310 <__any_on+0x32>
 80072ec:	dd0a      	ble.n	8007304 <__any_on+0x26>
 80072ee:	f011 011f 	ands.w	r1, r1, #31
 80072f2:	d007      	beq.n	8007304 <__any_on+0x26>
 80072f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072f8:	fa24 f001 	lsr.w	r0, r4, r1
 80072fc:	fa00 f101 	lsl.w	r1, r0, r1
 8007300:	428c      	cmp	r4, r1
 8007302:	d10b      	bne.n	800731c <__any_on+0x3e>
 8007304:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007308:	4293      	cmp	r3, r2
 800730a:	d803      	bhi.n	8007314 <__any_on+0x36>
 800730c:	2000      	movs	r0, #0
 800730e:	bd10      	pop	{r4, pc}
 8007310:	4603      	mov	r3, r0
 8007312:	e7f7      	b.n	8007304 <__any_on+0x26>
 8007314:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007318:	2900      	cmp	r1, #0
 800731a:	d0f5      	beq.n	8007308 <__any_on+0x2a>
 800731c:	2001      	movs	r0, #1
 800731e:	e7f6      	b.n	800730e <__any_on+0x30>

08007320 <sulp>:
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007324:	460f      	mov	r7, r1
 8007326:	4690      	mov	r8, r2
 8007328:	f7ff fec6 	bl	80070b8 <__ulp>
 800732c:	4604      	mov	r4, r0
 800732e:	460d      	mov	r5, r1
 8007330:	f1b8 0f00 	cmp.w	r8, #0
 8007334:	d011      	beq.n	800735a <sulp+0x3a>
 8007336:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800733a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800733e:	2b00      	cmp	r3, #0
 8007340:	dd0b      	ble.n	800735a <sulp+0x3a>
 8007342:	2400      	movs	r4, #0
 8007344:	051b      	lsls	r3, r3, #20
 8007346:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800734a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	f7f9 f8c1 	bl	80004d8 <__aeabi_dmul>
 8007356:	4604      	mov	r4, r0
 8007358:	460d      	mov	r5, r1
 800735a:	4620      	mov	r0, r4
 800735c:	4629      	mov	r1, r5
 800735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007362:	0000      	movs	r0, r0
 8007364:	0000      	movs	r0, r0
	...

08007368 <_strtod_l>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	b09f      	sub	sp, #124	@ 0x7c
 800736e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007370:	2200      	movs	r2, #0
 8007372:	460c      	mov	r4, r1
 8007374:	921a      	str	r2, [sp, #104]	@ 0x68
 8007376:	f04f 0a00 	mov.w	sl, #0
 800737a:	f04f 0b00 	mov.w	fp, #0
 800737e:	460a      	mov	r2, r1
 8007380:	9005      	str	r0, [sp, #20]
 8007382:	9219      	str	r2, [sp, #100]	@ 0x64
 8007384:	7811      	ldrb	r1, [r2, #0]
 8007386:	292b      	cmp	r1, #43	@ 0x2b
 8007388:	d048      	beq.n	800741c <_strtod_l+0xb4>
 800738a:	d836      	bhi.n	80073fa <_strtod_l+0x92>
 800738c:	290d      	cmp	r1, #13
 800738e:	d830      	bhi.n	80073f2 <_strtod_l+0x8a>
 8007390:	2908      	cmp	r1, #8
 8007392:	d830      	bhi.n	80073f6 <_strtod_l+0x8e>
 8007394:	2900      	cmp	r1, #0
 8007396:	d039      	beq.n	800740c <_strtod_l+0xa4>
 8007398:	2200      	movs	r2, #0
 800739a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800739c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800739e:	782a      	ldrb	r2, [r5, #0]
 80073a0:	2a30      	cmp	r2, #48	@ 0x30
 80073a2:	f040 80b1 	bne.w	8007508 <_strtod_l+0x1a0>
 80073a6:	786a      	ldrb	r2, [r5, #1]
 80073a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073ac:	2a58      	cmp	r2, #88	@ 0x58
 80073ae:	d16c      	bne.n	800748a <_strtod_l+0x122>
 80073b0:	9302      	str	r3, [sp, #8]
 80073b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073b4:	4a8e      	ldr	r2, [pc, #568]	@ (80075f0 <_strtod_l+0x288>)
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	9805      	ldr	r0, [sp, #20]
 80073be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073c0:	a919      	add	r1, sp, #100	@ 0x64
 80073c2:	f001 f8ed 	bl	80085a0 <__gethex>
 80073c6:	f010 060f 	ands.w	r6, r0, #15
 80073ca:	4604      	mov	r4, r0
 80073cc:	d005      	beq.n	80073da <_strtod_l+0x72>
 80073ce:	2e06      	cmp	r6, #6
 80073d0:	d126      	bne.n	8007420 <_strtod_l+0xb8>
 80073d2:	2300      	movs	r3, #0
 80073d4:	3501      	adds	r5, #1
 80073d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80073d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8584 	bne.w	8007eea <_strtod_l+0xb82>
 80073e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e4:	b1bb      	cbz	r3, 8007416 <_strtod_l+0xae>
 80073e6:	4650      	mov	r0, sl
 80073e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80073ec:	b01f      	add	sp, #124	@ 0x7c
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	2920      	cmp	r1, #32
 80073f4:	d1d0      	bne.n	8007398 <_strtod_l+0x30>
 80073f6:	3201      	adds	r2, #1
 80073f8:	e7c3      	b.n	8007382 <_strtod_l+0x1a>
 80073fa:	292d      	cmp	r1, #45	@ 0x2d
 80073fc:	d1cc      	bne.n	8007398 <_strtod_l+0x30>
 80073fe:	2101      	movs	r1, #1
 8007400:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007402:	1c51      	adds	r1, r2, #1
 8007404:	9119      	str	r1, [sp, #100]	@ 0x64
 8007406:	7852      	ldrb	r2, [r2, #1]
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1c7      	bne.n	800739c <_strtod_l+0x34>
 800740c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800740e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 8568 	bne.w	8007ee6 <_strtod_l+0xb7e>
 8007416:	4650      	mov	r0, sl
 8007418:	4659      	mov	r1, fp
 800741a:	e7e7      	b.n	80073ec <_strtod_l+0x84>
 800741c:	2100      	movs	r1, #0
 800741e:	e7ef      	b.n	8007400 <_strtod_l+0x98>
 8007420:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007422:	b13a      	cbz	r2, 8007434 <_strtod_l+0xcc>
 8007424:	2135      	movs	r1, #53	@ 0x35
 8007426:	a81c      	add	r0, sp, #112	@ 0x70
 8007428:	f7ff ff36 	bl	8007298 <__copybits>
 800742c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	f7ff fb10 	bl	8006a54 <_Bfree>
 8007434:	3e01      	subs	r6, #1
 8007436:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007438:	2e04      	cmp	r6, #4
 800743a:	d806      	bhi.n	800744a <_strtod_l+0xe2>
 800743c:	e8df f006 	tbb	[pc, r6]
 8007440:	201d0314 	.word	0x201d0314
 8007444:	14          	.byte	0x14
 8007445:	00          	.byte	0x00
 8007446:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800744a:	05e1      	lsls	r1, r4, #23
 800744c:	bf48      	it	mi
 800744e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007452:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007456:	0d1b      	lsrs	r3, r3, #20
 8007458:	051b      	lsls	r3, r3, #20
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1bd      	bne.n	80073da <_strtod_l+0x72>
 800745e:	f7fe fb1d 	bl	8005a9c <__errno>
 8007462:	2322      	movs	r3, #34	@ 0x22
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	e7b8      	b.n	80073da <_strtod_l+0x72>
 8007468:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800746c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007470:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007474:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007478:	e7e7      	b.n	800744a <_strtod_l+0xe2>
 800747a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80075f4 <_strtod_l+0x28c>
 800747e:	e7e4      	b.n	800744a <_strtod_l+0xe2>
 8007480:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007484:	f04f 3aff 	mov.w	sl, #4294967295
 8007488:	e7df      	b.n	800744a <_strtod_l+0xe2>
 800748a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b30      	cmp	r3, #48	@ 0x30
 8007494:	d0f9      	beq.n	800748a <_strtod_l+0x122>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d09f      	beq.n	80073da <_strtod_l+0x72>
 800749a:	2301      	movs	r3, #1
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a0:	220a      	movs	r2, #10
 80074a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80074a4:	2300      	movs	r3, #0
 80074a6:	461f      	mov	r7, r3
 80074a8:	9308      	str	r3, [sp, #32]
 80074aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80074ae:	7805      	ldrb	r5, [r0, #0]
 80074b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80074b4:	b2d9      	uxtb	r1, r3
 80074b6:	2909      	cmp	r1, #9
 80074b8:	d928      	bls.n	800750c <_strtod_l+0x1a4>
 80074ba:	2201      	movs	r2, #1
 80074bc:	494e      	ldr	r1, [pc, #312]	@ (80075f8 <_strtod_l+0x290>)
 80074be:	f000 ffad 	bl	800841c <strncmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d032      	beq.n	800752c <_strtod_l+0x1c4>
 80074c6:	2000      	movs	r0, #0
 80074c8:	462a      	mov	r2, r5
 80074ca:	4681      	mov	r9, r0
 80074cc:	463d      	mov	r5, r7
 80074ce:	4603      	mov	r3, r0
 80074d0:	2a65      	cmp	r2, #101	@ 0x65
 80074d2:	d001      	beq.n	80074d8 <_strtod_l+0x170>
 80074d4:	2a45      	cmp	r2, #69	@ 0x45
 80074d6:	d114      	bne.n	8007502 <_strtod_l+0x19a>
 80074d8:	b91d      	cbnz	r5, 80074e2 <_strtod_l+0x17a>
 80074da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074dc:	4302      	orrs	r2, r0
 80074de:	d095      	beq.n	800740c <_strtod_l+0xa4>
 80074e0:	2500      	movs	r5, #0
 80074e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074e4:	1c62      	adds	r2, r4, #1
 80074e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80074e8:	7862      	ldrb	r2, [r4, #1]
 80074ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80074ec:	d077      	beq.n	80075de <_strtod_l+0x276>
 80074ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80074f0:	d07b      	beq.n	80075ea <_strtod_l+0x282>
 80074f2:	f04f 0c00 	mov.w	ip, #0
 80074f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80074fa:	2909      	cmp	r1, #9
 80074fc:	f240 8082 	bls.w	8007604 <_strtod_l+0x29c>
 8007500:	9419      	str	r4, [sp, #100]	@ 0x64
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	e0a2      	b.n	800764e <_strtod_l+0x2e6>
 8007508:	2300      	movs	r3, #0
 800750a:	e7c7      	b.n	800749c <_strtod_l+0x134>
 800750c:	2f08      	cmp	r7, #8
 800750e:	bfd5      	itete	le
 8007510:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007512:	9908      	ldrgt	r1, [sp, #32]
 8007514:	fb02 3301 	mlale	r3, r2, r1, r3
 8007518:	fb02 3301 	mlagt	r3, r2, r1, r3
 800751c:	f100 0001 	add.w	r0, r0, #1
 8007520:	bfd4      	ite	le
 8007522:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007524:	9308      	strgt	r3, [sp, #32]
 8007526:	3701      	adds	r7, #1
 8007528:	9019      	str	r0, [sp, #100]	@ 0x64
 800752a:	e7bf      	b.n	80074ac <_strtod_l+0x144>
 800752c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	9219      	str	r2, [sp, #100]	@ 0x64
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	b37f      	cbz	r7, 8007596 <_strtod_l+0x22e>
 8007536:	4681      	mov	r9, r0
 8007538:	463d      	mov	r5, r7
 800753a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800753e:	2b09      	cmp	r3, #9
 8007540:	d912      	bls.n	8007568 <_strtod_l+0x200>
 8007542:	2301      	movs	r3, #1
 8007544:	e7c4      	b.n	80074d0 <_strtod_l+0x168>
 8007546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007548:	3001      	adds	r0, #1
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	9219      	str	r2, [sp, #100]	@ 0x64
 800754e:	785a      	ldrb	r2, [r3, #1]
 8007550:	2a30      	cmp	r2, #48	@ 0x30
 8007552:	d0f8      	beq.n	8007546 <_strtod_l+0x1de>
 8007554:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007558:	2b08      	cmp	r3, #8
 800755a:	f200 84cb 	bhi.w	8007ef4 <_strtod_l+0xb8c>
 800755e:	4681      	mov	r9, r0
 8007560:	2000      	movs	r0, #0
 8007562:	4605      	mov	r5, r0
 8007564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007566:	930c      	str	r3, [sp, #48]	@ 0x30
 8007568:	3a30      	subs	r2, #48	@ 0x30
 800756a:	f100 0301 	add.w	r3, r0, #1
 800756e:	d02a      	beq.n	80075c6 <_strtod_l+0x25e>
 8007570:	4499      	add	r9, r3
 8007572:	210a      	movs	r1, #10
 8007574:	462b      	mov	r3, r5
 8007576:	eb00 0c05 	add.w	ip, r0, r5
 800757a:	4563      	cmp	r3, ip
 800757c:	d10d      	bne.n	800759a <_strtod_l+0x232>
 800757e:	1c69      	adds	r1, r5, #1
 8007580:	4401      	add	r1, r0
 8007582:	4428      	add	r0, r5
 8007584:	2808      	cmp	r0, #8
 8007586:	dc16      	bgt.n	80075b6 <_strtod_l+0x24e>
 8007588:	230a      	movs	r3, #10
 800758a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800758c:	fb03 2300 	mla	r3, r3, r0, r2
 8007590:	930a      	str	r3, [sp, #40]	@ 0x28
 8007592:	2300      	movs	r3, #0
 8007594:	e018      	b.n	80075c8 <_strtod_l+0x260>
 8007596:	4638      	mov	r0, r7
 8007598:	e7da      	b.n	8007550 <_strtod_l+0x1e8>
 800759a:	2b08      	cmp	r3, #8
 800759c:	f103 0301 	add.w	r3, r3, #1
 80075a0:	dc03      	bgt.n	80075aa <_strtod_l+0x242>
 80075a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80075a4:	434e      	muls	r6, r1
 80075a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80075a8:	e7e7      	b.n	800757a <_strtod_l+0x212>
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	bfde      	ittt	le
 80075ae:	9e08      	ldrle	r6, [sp, #32]
 80075b0:	434e      	mulle	r6, r1
 80075b2:	9608      	strle	r6, [sp, #32]
 80075b4:	e7e1      	b.n	800757a <_strtod_l+0x212>
 80075b6:	280f      	cmp	r0, #15
 80075b8:	dceb      	bgt.n	8007592 <_strtod_l+0x22a>
 80075ba:	230a      	movs	r3, #10
 80075bc:	9808      	ldr	r0, [sp, #32]
 80075be:	fb03 2300 	mla	r3, r3, r0, r2
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	e7e5      	b.n	8007592 <_strtod_l+0x22a>
 80075c6:	4629      	mov	r1, r5
 80075c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075ca:	460d      	mov	r5, r1
 80075cc:	1c50      	adds	r0, r2, #1
 80075ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80075d0:	7852      	ldrb	r2, [r2, #1]
 80075d2:	4618      	mov	r0, r3
 80075d4:	e7b1      	b.n	800753a <_strtod_l+0x1d2>
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	2301      	movs	r3, #1
 80075dc:	e77d      	b.n	80074da <_strtod_l+0x172>
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	1ca2      	adds	r2, r4, #2
 80075e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80075e6:	78a2      	ldrb	r2, [r4, #2]
 80075e8:	e785      	b.n	80074f6 <_strtod_l+0x18e>
 80075ea:	f04f 0c01 	mov.w	ip, #1
 80075ee:	e7f8      	b.n	80075e2 <_strtod_l+0x27a>
 80075f0:	0800b1e8 	.word	0x0800b1e8
 80075f4:	7ff00000 	.word	0x7ff00000
 80075f8:	0800b1d0 	.word	0x0800b1d0
 80075fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075fe:	1c51      	adds	r1, r2, #1
 8007600:	9119      	str	r1, [sp, #100]	@ 0x64
 8007602:	7852      	ldrb	r2, [r2, #1]
 8007604:	2a30      	cmp	r2, #48	@ 0x30
 8007606:	d0f9      	beq.n	80075fc <_strtod_l+0x294>
 8007608:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800760c:	2908      	cmp	r1, #8
 800760e:	f63f af78 	bhi.w	8007502 <_strtod_l+0x19a>
 8007612:	f04f 080a 	mov.w	r8, #10
 8007616:	3a30      	subs	r2, #48	@ 0x30
 8007618:	920e      	str	r2, [sp, #56]	@ 0x38
 800761a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800761c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800761e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007620:	1c56      	adds	r6, r2, #1
 8007622:	9619      	str	r6, [sp, #100]	@ 0x64
 8007624:	7852      	ldrb	r2, [r2, #1]
 8007626:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800762a:	f1be 0f09 	cmp.w	lr, #9
 800762e:	d939      	bls.n	80076a4 <_strtod_l+0x33c>
 8007630:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007632:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007636:	1a76      	subs	r6, r6, r1
 8007638:	2e08      	cmp	r6, #8
 800763a:	dc03      	bgt.n	8007644 <_strtod_l+0x2dc>
 800763c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800763e:	4588      	cmp	r8, r1
 8007640:	bfa8      	it	ge
 8007642:	4688      	movge	r8, r1
 8007644:	f1bc 0f00 	cmp.w	ip, #0
 8007648:	d001      	beq.n	800764e <_strtod_l+0x2e6>
 800764a:	f1c8 0800 	rsb	r8, r8, #0
 800764e:	2d00      	cmp	r5, #0
 8007650:	d14e      	bne.n	80076f0 <_strtod_l+0x388>
 8007652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007654:	4308      	orrs	r0, r1
 8007656:	f47f aec0 	bne.w	80073da <_strtod_l+0x72>
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f aed6 	bne.w	800740c <_strtod_l+0xa4>
 8007660:	2a69      	cmp	r2, #105	@ 0x69
 8007662:	d028      	beq.n	80076b6 <_strtod_l+0x34e>
 8007664:	dc25      	bgt.n	80076b2 <_strtod_l+0x34a>
 8007666:	2a49      	cmp	r2, #73	@ 0x49
 8007668:	d025      	beq.n	80076b6 <_strtod_l+0x34e>
 800766a:	2a4e      	cmp	r2, #78	@ 0x4e
 800766c:	f47f aece 	bne.w	800740c <_strtod_l+0xa4>
 8007670:	499a      	ldr	r1, [pc, #616]	@ (80078dc <_strtod_l+0x574>)
 8007672:	a819      	add	r0, sp, #100	@ 0x64
 8007674:	f001 f9b6 	bl	80089e4 <__match>
 8007678:	2800      	cmp	r0, #0
 800767a:	f43f aec7 	beq.w	800740c <_strtod_l+0xa4>
 800767e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b28      	cmp	r3, #40	@ 0x28
 8007684:	d12e      	bne.n	80076e4 <_strtod_l+0x37c>
 8007686:	4996      	ldr	r1, [pc, #600]	@ (80078e0 <_strtod_l+0x578>)
 8007688:	aa1c      	add	r2, sp, #112	@ 0x70
 800768a:	a819      	add	r0, sp, #100	@ 0x64
 800768c:	f001 f9be 	bl	8008a0c <__hexnan>
 8007690:	2805      	cmp	r0, #5
 8007692:	d127      	bne.n	80076e4 <_strtod_l+0x37c>
 8007694:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007696:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800769a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800769e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80076a2:	e69a      	b.n	80073da <_strtod_l+0x72>
 80076a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80076a6:	fb08 2101 	mla	r1, r8, r1, r2
 80076aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80076ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80076b0:	e7b5      	b.n	800761e <_strtod_l+0x2b6>
 80076b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80076b4:	e7da      	b.n	800766c <_strtod_l+0x304>
 80076b6:	498b      	ldr	r1, [pc, #556]	@ (80078e4 <_strtod_l+0x57c>)
 80076b8:	a819      	add	r0, sp, #100	@ 0x64
 80076ba:	f001 f993 	bl	80089e4 <__match>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aea4 	beq.w	800740c <_strtod_l+0xa4>
 80076c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c6:	4988      	ldr	r1, [pc, #544]	@ (80078e8 <_strtod_l+0x580>)
 80076c8:	3b01      	subs	r3, #1
 80076ca:	a819      	add	r0, sp, #100	@ 0x64
 80076cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ce:	f001 f989 	bl	80089e4 <__match>
 80076d2:	b910      	cbnz	r0, 80076da <_strtod_l+0x372>
 80076d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d6:	3301      	adds	r3, #1
 80076d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80076da:	f04f 0a00 	mov.w	sl, #0
 80076de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80078ec <_strtod_l+0x584>
 80076e2:	e67a      	b.n	80073da <_strtod_l+0x72>
 80076e4:	4882      	ldr	r0, [pc, #520]	@ (80078f0 <_strtod_l+0x588>)
 80076e6:	f000 febb 	bl	8008460 <nan>
 80076ea:	4682      	mov	sl, r0
 80076ec:	468b      	mov	fp, r1
 80076ee:	e674      	b.n	80073da <_strtod_l+0x72>
 80076f0:	eba8 0309 	sub.w	r3, r8, r9
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	bf08      	it	eq
 80076f8:	462f      	moveq	r7, r5
 80076fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076fc:	2d10      	cmp	r5, #16
 80076fe:	462c      	mov	r4, r5
 8007700:	9309      	str	r3, [sp, #36]	@ 0x24
 8007702:	bfa8      	it	ge
 8007704:	2410      	movge	r4, #16
 8007706:	f7f8 fe6d 	bl	80003e4 <__aeabi_ui2d>
 800770a:	2d09      	cmp	r5, #9
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	dc11      	bgt.n	8007736 <_strtod_l+0x3ce>
 8007712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	f43f ae60 	beq.w	80073da <_strtod_l+0x72>
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	dd76      	ble.n	800780c <_strtod_l+0x4a4>
 800771e:	2b16      	cmp	r3, #22
 8007720:	dc5d      	bgt.n	80077de <_strtod_l+0x476>
 8007722:	4974      	ldr	r1, [pc, #464]	@ (80078f4 <_strtod_l+0x58c>)
 8007724:	4652      	mov	r2, sl
 8007726:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800772a:	465b      	mov	r3, fp
 800772c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007730:	f7f8 fed2 	bl	80004d8 <__aeabi_dmul>
 8007734:	e7d9      	b.n	80076ea <_strtod_l+0x382>
 8007736:	4b6f      	ldr	r3, [pc, #444]	@ (80078f4 <_strtod_l+0x58c>)
 8007738:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800773c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007740:	f7f8 feca 	bl	80004d8 <__aeabi_dmul>
 8007744:	4682      	mov	sl, r0
 8007746:	9808      	ldr	r0, [sp, #32]
 8007748:	468b      	mov	fp, r1
 800774a:	f7f8 fe4b 	bl	80003e4 <__aeabi_ui2d>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4650      	mov	r0, sl
 8007754:	4659      	mov	r1, fp
 8007756:	f7f8 fd09 	bl	800016c <__adddf3>
 800775a:	2d0f      	cmp	r5, #15
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	ddd7      	ble.n	8007712 <_strtod_l+0x3aa>
 8007762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007764:	1b2c      	subs	r4, r5, r4
 8007766:	441c      	add	r4, r3
 8007768:	2c00      	cmp	r4, #0
 800776a:	f340 8096 	ble.w	800789a <_strtod_l+0x532>
 800776e:	f014 030f 	ands.w	r3, r4, #15
 8007772:	d00a      	beq.n	800778a <_strtod_l+0x422>
 8007774:	495f      	ldr	r1, [pc, #380]	@ (80078f4 <_strtod_l+0x58c>)
 8007776:	4652      	mov	r2, sl
 8007778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800777c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007780:	465b      	mov	r3, fp
 8007782:	f7f8 fea9 	bl	80004d8 <__aeabi_dmul>
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	f034 040f 	bics.w	r4, r4, #15
 800778e:	d073      	beq.n	8007878 <_strtod_l+0x510>
 8007790:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007794:	dd48      	ble.n	8007828 <_strtod_l+0x4c0>
 8007796:	2400      	movs	r4, #0
 8007798:	46a0      	mov	r8, r4
 800779a:	46a1      	mov	r9, r4
 800779c:	940a      	str	r4, [sp, #40]	@ 0x28
 800779e:	2322      	movs	r3, #34	@ 0x22
 80077a0:	f04f 0a00 	mov.w	sl, #0
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80078ec <_strtod_l+0x584>
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f43f ae13 	beq.w	80073da <_strtod_l+0x72>
 80077b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077b6:	9805      	ldr	r0, [sp, #20]
 80077b8:	f7ff f94c 	bl	8006a54 <_Bfree>
 80077bc:	4649      	mov	r1, r9
 80077be:	9805      	ldr	r0, [sp, #20]
 80077c0:	f7ff f948 	bl	8006a54 <_Bfree>
 80077c4:	4641      	mov	r1, r8
 80077c6:	9805      	ldr	r0, [sp, #20]
 80077c8:	f7ff f944 	bl	8006a54 <_Bfree>
 80077cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ce:	9805      	ldr	r0, [sp, #20]
 80077d0:	f7ff f940 	bl	8006a54 <_Bfree>
 80077d4:	4621      	mov	r1, r4
 80077d6:	9805      	ldr	r0, [sp, #20]
 80077d8:	f7ff f93c 	bl	8006a54 <_Bfree>
 80077dc:	e5fd      	b.n	80073da <_strtod_l+0x72>
 80077de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077e4:	4293      	cmp	r3, r2
 80077e6:	dbbc      	blt.n	8007762 <_strtod_l+0x3fa>
 80077e8:	4c42      	ldr	r4, [pc, #264]	@ (80078f4 <_strtod_l+0x58c>)
 80077ea:	f1c5 050f 	rsb	r5, r5, #15
 80077ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077f2:	4652      	mov	r2, sl
 80077f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f8:	465b      	mov	r3, fp
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	1b5d      	subs	r5, r3, r5
 8007802:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007806:	e9d4 2300 	ldrd	r2, r3, [r4]
 800780a:	e791      	b.n	8007730 <_strtod_l+0x3c8>
 800780c:	3316      	adds	r3, #22
 800780e:	dba8      	blt.n	8007762 <_strtod_l+0x3fa>
 8007810:	4b38      	ldr	r3, [pc, #224]	@ (80078f4 <_strtod_l+0x58c>)
 8007812:	eba9 0808 	sub.w	r8, r9, r8
 8007816:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800781a:	4650      	mov	r0, sl
 800781c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007820:	4659      	mov	r1, fp
 8007822:	f7f8 ff83 	bl	800072c <__aeabi_ddiv>
 8007826:	e760      	b.n	80076ea <_strtod_l+0x382>
 8007828:	4b33      	ldr	r3, [pc, #204]	@ (80078f8 <_strtod_l+0x590>)
 800782a:	4650      	mov	r0, sl
 800782c:	9308      	str	r3, [sp, #32]
 800782e:	2300      	movs	r3, #0
 8007830:	4659      	mov	r1, fp
 8007832:	461e      	mov	r6, r3
 8007834:	1124      	asrs	r4, r4, #4
 8007836:	2c01      	cmp	r4, #1
 8007838:	dc21      	bgt.n	800787e <_strtod_l+0x516>
 800783a:	b10b      	cbz	r3, 8007840 <_strtod_l+0x4d8>
 800783c:	4682      	mov	sl, r0
 800783e:	468b      	mov	fp, r1
 8007840:	492d      	ldr	r1, [pc, #180]	@ (80078f8 <_strtod_l+0x590>)
 8007842:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007846:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800784a:	4652      	mov	r2, sl
 800784c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007850:	465b      	mov	r3, fp
 8007852:	f7f8 fe41 	bl	80004d8 <__aeabi_dmul>
 8007856:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <_strtod_l+0x584>)
 8007858:	460a      	mov	r2, r1
 800785a:	400b      	ands	r3, r1
 800785c:	4927      	ldr	r1, [pc, #156]	@ (80078fc <_strtod_l+0x594>)
 800785e:	4682      	mov	sl, r0
 8007860:	428b      	cmp	r3, r1
 8007862:	d898      	bhi.n	8007796 <_strtod_l+0x42e>
 8007864:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007868:	428b      	cmp	r3, r1
 800786a:	bf86      	itte	hi
 800786c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007870:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007900 <_strtod_l+0x598>
 8007874:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007878:	2300      	movs	r3, #0
 800787a:	9308      	str	r3, [sp, #32]
 800787c:	e07a      	b.n	8007974 <_strtod_l+0x60c>
 800787e:	07e2      	lsls	r2, r4, #31
 8007880:	d505      	bpl.n	800788e <_strtod_l+0x526>
 8007882:	9b08      	ldr	r3, [sp, #32]
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fe26 	bl	80004d8 <__aeabi_dmul>
 800788c:	2301      	movs	r3, #1
 800788e:	9a08      	ldr	r2, [sp, #32]
 8007890:	3601      	adds	r6, #1
 8007892:	3208      	adds	r2, #8
 8007894:	1064      	asrs	r4, r4, #1
 8007896:	9208      	str	r2, [sp, #32]
 8007898:	e7cd      	b.n	8007836 <_strtod_l+0x4ce>
 800789a:	d0ed      	beq.n	8007878 <_strtod_l+0x510>
 800789c:	4264      	negs	r4, r4
 800789e:	f014 020f 	ands.w	r2, r4, #15
 80078a2:	d00a      	beq.n	80078ba <_strtod_l+0x552>
 80078a4:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <_strtod_l+0x58c>)
 80078a6:	4650      	mov	r0, sl
 80078a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ac:	4659      	mov	r1, fp
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 ff3b 	bl	800072c <__aeabi_ddiv>
 80078b6:	4682      	mov	sl, r0
 80078b8:	468b      	mov	fp, r1
 80078ba:	1124      	asrs	r4, r4, #4
 80078bc:	d0dc      	beq.n	8007878 <_strtod_l+0x510>
 80078be:	2c1f      	cmp	r4, #31
 80078c0:	dd20      	ble.n	8007904 <_strtod_l+0x59c>
 80078c2:	2400      	movs	r4, #0
 80078c4:	46a0      	mov	r8, r4
 80078c6:	46a1      	mov	r9, r4
 80078c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80078ca:	2322      	movs	r3, #34	@ 0x22
 80078cc:	9a05      	ldr	r2, [sp, #20]
 80078ce:	f04f 0a00 	mov.w	sl, #0
 80078d2:	f04f 0b00 	mov.w	fp, #0
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e768      	b.n	80077ac <_strtod_l+0x444>
 80078da:	bf00      	nop
 80078dc:	0800afbf 	.word	0x0800afbf
 80078e0:	0800b1d4 	.word	0x0800b1d4
 80078e4:	0800afb7 	.word	0x0800afb7
 80078e8:	0800afee 	.word	0x0800afee
 80078ec:	7ff00000 	.word	0x7ff00000
 80078f0:	0800b37d 	.word	0x0800b37d
 80078f4:	0800b108 	.word	0x0800b108
 80078f8:	0800b0e0 	.word	0x0800b0e0
 80078fc:	7ca00000 	.word	0x7ca00000
 8007900:	7fefffff 	.word	0x7fefffff
 8007904:	f014 0310 	ands.w	r3, r4, #16
 8007908:	bf18      	it	ne
 800790a:	236a      	movne	r3, #106	@ 0x6a
 800790c:	4650      	mov	r0, sl
 800790e:	9308      	str	r3, [sp, #32]
 8007910:	4659      	mov	r1, fp
 8007912:	2300      	movs	r3, #0
 8007914:	4ea9      	ldr	r6, [pc, #676]	@ (8007bbc <_strtod_l+0x854>)
 8007916:	07e2      	lsls	r2, r4, #31
 8007918:	d504      	bpl.n	8007924 <_strtod_l+0x5bc>
 800791a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	2301      	movs	r3, #1
 8007924:	1064      	asrs	r4, r4, #1
 8007926:	f106 0608 	add.w	r6, r6, #8
 800792a:	d1f4      	bne.n	8007916 <_strtod_l+0x5ae>
 800792c:	b10b      	cbz	r3, 8007932 <_strtod_l+0x5ca>
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	b1b3      	cbz	r3, 8007964 <_strtod_l+0x5fc>
 8007936:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800793a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800793e:	2b00      	cmp	r3, #0
 8007940:	4659      	mov	r1, fp
 8007942:	dd0f      	ble.n	8007964 <_strtod_l+0x5fc>
 8007944:	2b1f      	cmp	r3, #31
 8007946:	dd57      	ble.n	80079f8 <_strtod_l+0x690>
 8007948:	2b34      	cmp	r3, #52	@ 0x34
 800794a:	bfd8      	it	le
 800794c:	f04f 33ff 	movle.w	r3, #4294967295
 8007950:	f04f 0a00 	mov.w	sl, #0
 8007954:	bfcf      	iteee	gt
 8007956:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800795a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800795e:	4093      	lslle	r3, r2
 8007960:	ea03 0b01 	andle.w	fp, r3, r1
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4650      	mov	r0, sl
 800796a:	4659      	mov	r1, fp
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	2800      	cmp	r0, #0
 8007972:	d1a6      	bne.n	80078c2 <_strtod_l+0x55a>
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	463a      	mov	r2, r7
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800797c:	462b      	mov	r3, r5
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f7ff f8d0 	bl	8006b24 <__s2b>
 8007984:	900a      	str	r0, [sp, #40]	@ 0x28
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f af05 	beq.w	8007796 <_strtod_l+0x42e>
 800798c:	2400      	movs	r4, #0
 800798e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007990:	eba9 0308 	sub.w	r3, r9, r8
 8007994:	2a00      	cmp	r2, #0
 8007996:	bfa8      	it	ge
 8007998:	2300      	movge	r3, #0
 800799a:	46a0      	mov	r8, r4
 800799c:	9312      	str	r3, [sp, #72]	@ 0x48
 800799e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80079a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a6:	9805      	ldr	r0, [sp, #20]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	f7ff f813 	bl	80069d4 <_Balloc>
 80079ae:	4681      	mov	r9, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f aef4 	beq.w	800779e <_strtod_l+0x436>
 80079b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b8:	300c      	adds	r0, #12
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	f103 010c 	add.w	r1, r3, #12
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	f7fe f8a5 	bl	8005b12 <memcpy>
 80079c8:	ab1c      	add	r3, sp, #112	@ 0x70
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	9805      	ldr	r0, [sp, #20]
 80079d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079da:	f7ff fbd5 	bl	8007188 <__d2b>
 80079de:	901a      	str	r0, [sp, #104]	@ 0x68
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f43f aedc 	beq.w	800779e <_strtod_l+0x436>
 80079e6:	2101      	movs	r1, #1
 80079e8:	9805      	ldr	r0, [sp, #20]
 80079ea:	f7ff f931 	bl	8006c50 <__i2b>
 80079ee:	4680      	mov	r8, r0
 80079f0:	b948      	cbnz	r0, 8007a06 <_strtod_l+0x69e>
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	e6d2      	b.n	800779e <_strtod_l+0x436>
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	ea03 0a0a 	and.w	sl, r3, sl
 8007a04:	e7ae      	b.n	8007964 <_strtod_l+0x5fc>
 8007a06:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a08:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	bfab      	itete	ge
 8007a0e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a10:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a12:	18ef      	addge	r7, r5, r3
 8007a14:	1b5e      	sublt	r6, r3, r5
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	bfa8      	it	ge
 8007a1a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a1c:	eba5 0503 	sub.w	r5, r5, r3
 8007a20:	4415      	add	r5, r2
 8007a22:	4b67      	ldr	r3, [pc, #412]	@ (8007bc0 <_strtod_l+0x858>)
 8007a24:	f105 35ff 	add.w	r5, r5, #4294967295
 8007a28:	bfb8      	it	lt
 8007a2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a32:	da50      	bge.n	8007ad6 <_strtod_l+0x76e>
 8007a34:	1b5b      	subs	r3, r3, r5
 8007a36:	2b1f      	cmp	r3, #31
 8007a38:	f04f 0101 	mov.w	r1, #1
 8007a3c:	eba2 0203 	sub.w	r2, r2, r3
 8007a40:	dc3d      	bgt.n	8007abe <_strtod_l+0x756>
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a4c:	18bd      	adds	r5, r7, r2
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	42af      	cmp	r7, r5
 8007a52:	4416      	add	r6, r2
 8007a54:	441e      	add	r6, r3
 8007a56:	463b      	mov	r3, r7
 8007a58:	bfa8      	it	ge
 8007a5a:	462b      	movge	r3, r5
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	bfa8      	it	ge
 8007a60:	4633      	movge	r3, r6
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfc2      	ittt	gt
 8007a66:	1aed      	subgt	r5, r5, r3
 8007a68:	1af6      	subgt	r6, r6, r3
 8007a6a:	1aff      	subgt	r7, r7, r3
 8007a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd16      	ble.n	8007aa0 <_strtod_l+0x738>
 8007a72:	4641      	mov	r1, r8
 8007a74:	461a      	mov	r2, r3
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f7ff f9a8 	bl	8006dcc <__pow5mult>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d0b7      	beq.n	80079f2 <_strtod_l+0x68a>
 8007a82:	4601      	mov	r1, r0
 8007a84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f7ff f8f8 	bl	8006c7c <__multiply>
 8007a8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae85 	beq.w	800779e <_strtod_l+0x436>
 8007a94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a96:	9805      	ldr	r0, [sp, #20]
 8007a98:	f7fe ffdc 	bl	8006a54 <_Bfree>
 8007a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	dc1d      	bgt.n	8007ae0 <_strtod_l+0x778>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dd23      	ble.n	8007af2 <_strtod_l+0x78a>
 8007aaa:	4649      	mov	r1, r9
 8007aac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f7ff f98c 	bl	8006dcc <__pow5mult>
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	b9e0      	cbnz	r0, 8007af2 <_strtod_l+0x78a>
 8007ab8:	f04f 0900 	mov.w	r9, #0
 8007abc:	e66f      	b.n	800779e <_strtod_l+0x436>
 8007abe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ac2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ac6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007aca:	35e2      	adds	r5, #226	@ 0xe2
 8007acc:	fa01 f305 	lsl.w	r3, r1, r5
 8007ad0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ad2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ad4:	e7ba      	b.n	8007a4c <_strtod_l+0x6e4>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ada:	2301      	movs	r3, #1
 8007adc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ade:	e7b5      	b.n	8007a4c <_strtod_l+0x6e4>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	f7ff f9cb 	bl	8006e80 <__lshift>
 8007aea:	901a      	str	r0, [sp, #104]	@ 0x68
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1d9      	bne.n	8007aa4 <_strtod_l+0x73c>
 8007af0:	e655      	b.n	800779e <_strtod_l+0x436>
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	dd07      	ble.n	8007b06 <_strtod_l+0x79e>
 8007af6:	4649      	mov	r1, r9
 8007af8:	4632      	mov	r2, r6
 8007afa:	9805      	ldr	r0, [sp, #20]
 8007afc:	f7ff f9c0 	bl	8006e80 <__lshift>
 8007b00:	4681      	mov	r9, r0
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0d8      	beq.n	8007ab8 <_strtod_l+0x750>
 8007b06:	2f00      	cmp	r7, #0
 8007b08:	dd08      	ble.n	8007b1c <_strtod_l+0x7b4>
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	463a      	mov	r2, r7
 8007b0e:	9805      	ldr	r0, [sp, #20]
 8007b10:	f7ff f9b6 	bl	8006e80 <__lshift>
 8007b14:	4680      	mov	r8, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f ae41 	beq.w	800779e <_strtod_l+0x436>
 8007b1c:	464a      	mov	r2, r9
 8007b1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b20:	9805      	ldr	r0, [sp, #20]
 8007b22:	f7ff fa35 	bl	8006f90 <__mdiff>
 8007b26:	4604      	mov	r4, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f ae38 	beq.w	800779e <_strtod_l+0x436>
 8007b2e:	68c3      	ldr	r3, [r0, #12]
 8007b30:	4641      	mov	r1, r8
 8007b32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b34:	2300      	movs	r3, #0
 8007b36:	60c3      	str	r3, [r0, #12]
 8007b38:	f7ff fa0e 	bl	8006f58 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	da45      	bge.n	8007bcc <_strtod_l+0x864>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	ea53 030a 	orrs.w	r3, r3, sl
 8007b46:	d16b      	bne.n	8007c20 <_strtod_l+0x8b8>
 8007b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d167      	bne.n	8007c20 <_strtod_l+0x8b8>
 8007b50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b54:	0d1b      	lsrs	r3, r3, #20
 8007b56:	051b      	lsls	r3, r3, #20
 8007b58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b5c:	d960      	bls.n	8007c20 <_strtod_l+0x8b8>
 8007b5e:	6963      	ldr	r3, [r4, #20]
 8007b60:	b913      	cbnz	r3, 8007b68 <_strtod_l+0x800>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	dd5b      	ble.n	8007c20 <_strtod_l+0x8b8>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	9805      	ldr	r0, [sp, #20]
 8007b6e:	f7ff f987 	bl	8006e80 <__lshift>
 8007b72:	4641      	mov	r1, r8
 8007b74:	4604      	mov	r4, r0
 8007b76:	f7ff f9ef 	bl	8006f58 <__mcmp>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	dd50      	ble.n	8007c20 <_strtod_l+0x8b8>
 8007b7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b82:	9a08      	ldr	r2, [sp, #32]
 8007b84:	0d1b      	lsrs	r3, r3, #20
 8007b86:	051b      	lsls	r3, r3, #20
 8007b88:	2a00      	cmp	r2, #0
 8007b8a:	d06a      	beq.n	8007c62 <_strtod_l+0x8fa>
 8007b8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b90:	d867      	bhi.n	8007c62 <_strtod_l+0x8fa>
 8007b92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b96:	f67f ae98 	bls.w	80078ca <_strtod_l+0x562>
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <_strtod_l+0x85c>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f7f8 fc99 	bl	80004d8 <__aeabi_dmul>
 8007ba6:	4b08      	ldr	r3, [pc, #32]	@ (8007bc8 <_strtod_l+0x860>)
 8007ba8:	4682      	mov	sl, r0
 8007baa:	400b      	ands	r3, r1
 8007bac:	468b      	mov	fp, r1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f47f ae00 	bne.w	80077b4 <_strtod_l+0x44c>
 8007bb4:	2322      	movs	r3, #34	@ 0x22
 8007bb6:	9a05      	ldr	r2, [sp, #20]
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	e5fb      	b.n	80077b4 <_strtod_l+0x44c>
 8007bbc:	0800b200 	.word	0x0800b200
 8007bc0:	fffffc02 	.word	0xfffffc02
 8007bc4:	39500000 	.word	0x39500000
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007bd0:	d165      	bne.n	8007c9e <_strtod_l+0x936>
 8007bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bd8:	b35a      	cbz	r2, 8007c32 <_strtod_l+0x8ca>
 8007bda:	4a99      	ldr	r2, [pc, #612]	@ (8007e40 <_strtod_l+0xad8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d12b      	bne.n	8007c38 <_strtod_l+0x8d0>
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	4651      	mov	r1, sl
 8007be4:	b303      	cbz	r3, 8007c28 <_strtod_l+0x8c0>
 8007be6:	465a      	mov	r2, fp
 8007be8:	4b96      	ldr	r3, [pc, #600]	@ (8007e44 <_strtod_l+0xadc>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf4:	d81b      	bhi.n	8007c2e <_strtod_l+0x8c6>
 8007bf6:	0d1b      	lsrs	r3, r3, #20
 8007bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d119      	bne.n	8007c38 <_strtod_l+0x8d0>
 8007c04:	4b90      	ldr	r3, [pc, #576]	@ (8007e48 <_strtod_l+0xae0>)
 8007c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d102      	bne.n	8007c12 <_strtod_l+0x8aa>
 8007c0c:	3101      	adds	r1, #1
 8007c0e:	f43f adc6 	beq.w	800779e <_strtod_l+0x436>
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	4b8b      	ldr	r3, [pc, #556]	@ (8007e44 <_strtod_l+0xadc>)
 8007c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1b9      	bne.n	8007b9a <_strtod_l+0x832>
 8007c26:	e5c5      	b.n	80077b4 <_strtod_l+0x44c>
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2c:	e7e8      	b.n	8007c00 <_strtod_l+0x898>
 8007c2e:	4613      	mov	r3, r2
 8007c30:	e7e6      	b.n	8007c00 <_strtod_l+0x898>
 8007c32:	ea53 030a 	orrs.w	r3, r3, sl
 8007c36:	d0a2      	beq.n	8007b7e <_strtod_l+0x816>
 8007c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c3a:	b1db      	cbz	r3, 8007c74 <_strtod_l+0x90c>
 8007c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c3e:	4213      	tst	r3, r2
 8007c40:	d0ee      	beq.n	8007c20 <_strtod_l+0x8b8>
 8007c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c44:	4650      	mov	r0, sl
 8007c46:	4659      	mov	r1, fp
 8007c48:	9a08      	ldr	r2, [sp, #32]
 8007c4a:	b1bb      	cbz	r3, 8007c7c <_strtod_l+0x914>
 8007c4c:	f7ff fb68 	bl	8007320 <sulp>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c58:	f7f8 fa88 	bl	800016c <__adddf3>
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	468b      	mov	fp, r1
 8007c60:	e7de      	b.n	8007c20 <_strtod_l+0x8b8>
 8007c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c6a:	f04f 3aff 	mov.w	sl, #4294967295
 8007c6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c72:	e7d5      	b.n	8007c20 <_strtod_l+0x8b8>
 8007c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c76:	ea13 0f0a 	tst.w	r3, sl
 8007c7a:	e7e1      	b.n	8007c40 <_strtod_l+0x8d8>
 8007c7c:	f7ff fb50 	bl	8007320 <sulp>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c88:	f7f8 fa6e 	bl	8000168 <__aeabi_dsub>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4682      	mov	sl, r0
 8007c92:	468b      	mov	fp, r1
 8007c94:	f7f8 fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d0c1      	beq.n	8007c20 <_strtod_l+0x8b8>
 8007c9c:	e615      	b.n	80078ca <_strtod_l+0x562>
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fac9 	bl	8007238 <__ratio>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	f7f8 fe8e 	bl	80009d0 <__aeabi_dcmple>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d06d      	beq.n	8007d94 <_strtod_l+0xa2c>
 8007cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d178      	bne.n	8007db0 <_strtod_l+0xa48>
 8007cbe:	f1ba 0f00 	cmp.w	sl, #0
 8007cc2:	d156      	bne.n	8007d72 <_strtod_l+0xa0a>
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d158      	bne.n	8007d80 <_strtod_l+0xa18>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e4c <_strtod_l+0xae4>)
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d157      	bne.n	8007d8e <_strtod_l+0xa26>
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e50 <_strtod_l+0xae8>)
 8007ce6:	f7f8 fbf7 	bl	80004d8 <__aeabi_dmul>
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cf2:	9606      	str	r6, [sp, #24]
 8007cf4:	9307      	str	r3, [sp, #28]
 8007cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfa:	4d52      	ldr	r5, [pc, #328]	@ (8007e44 <_strtod_l+0xadc>)
 8007cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d02:	401d      	ands	r5, r3
 8007d04:	4b53      	ldr	r3, [pc, #332]	@ (8007e54 <_strtod_l+0xaec>)
 8007d06:	429d      	cmp	r5, r3
 8007d08:	f040 80aa 	bne.w	8007e60 <_strtod_l+0xaf8>
 8007d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d14:	4659      	mov	r1, fp
 8007d16:	f7ff f9cf 	bl	80070b8 <__ulp>
 8007d1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d1e:	f7f8 fbdb 	bl	80004d8 <__aeabi_dmul>
 8007d22:	4652      	mov	r2, sl
 8007d24:	465b      	mov	r3, fp
 8007d26:	f7f8 fa21 	bl	800016c <__adddf3>
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4945      	ldr	r1, [pc, #276]	@ (8007e44 <_strtod_l+0xadc>)
 8007d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e58 <_strtod_l+0xaf0>)
 8007d30:	4019      	ands	r1, r3
 8007d32:	4291      	cmp	r1, r2
 8007d34:	4682      	mov	sl, r0
 8007d36:	d942      	bls.n	8007dbe <_strtod_l+0xa56>
 8007d38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d3a:	4b43      	ldr	r3, [pc, #268]	@ (8007e48 <_strtod_l+0xae0>)
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d103      	bne.n	8007d48 <_strtod_l+0x9e0>
 8007d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d42:	3301      	adds	r3, #1
 8007d44:	f43f ad2b 	beq.w	800779e <_strtod_l+0x436>
 8007d48:	f04f 3aff 	mov.w	sl, #4294967295
 8007d4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007e48 <_strtod_l+0xae0>
 8007d50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d52:	9805      	ldr	r0, [sp, #20]
 8007d54:	f7fe fe7e 	bl	8006a54 <_Bfree>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	9805      	ldr	r0, [sp, #20]
 8007d5c:	f7fe fe7a 	bl	8006a54 <_Bfree>
 8007d60:	4641      	mov	r1, r8
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	f7fe fe76 	bl	8006a54 <_Bfree>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	f7fe fe72 	bl	8006a54 <_Bfree>
 8007d70:	e618      	b.n	80079a4 <_strtod_l+0x63c>
 8007d72:	f1ba 0f01 	cmp.w	sl, #1
 8007d76:	d103      	bne.n	8007d80 <_strtod_l+0xa18>
 8007d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f43f ada5 	beq.w	80078ca <_strtod_l+0x562>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b36      	ldr	r3, [pc, #216]	@ (8007e5c <_strtod_l+0xaf4>)
 8007d84:	2600      	movs	r6, #0
 8007d86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d8a:	4f30      	ldr	r7, [pc, #192]	@ (8007e4c <_strtod_l+0xae4>)
 8007d8c:	e7b3      	b.n	8007cf6 <_strtod_l+0x98e>
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4f2f      	ldr	r7, [pc, #188]	@ (8007e50 <_strtod_l+0xae8>)
 8007d92:	e7ac      	b.n	8007cee <_strtod_l+0x986>
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <_strtod_l+0xae8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f8 fb9c 	bl	80004d8 <__aeabi_dmul>
 8007da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0a1      	beq.n	8007cee <_strtod_l+0x986>
 8007daa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dae:	e7a2      	b.n	8007cf6 <_strtod_l+0x98e>
 8007db0:	2200      	movs	r2, #0
 8007db2:	4b26      	ldr	r3, [pc, #152]	@ (8007e4c <_strtod_l+0xae4>)
 8007db4:	4616      	mov	r6, r2
 8007db6:	461f      	mov	r7, r3
 8007db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dbc:	e79b      	b.n	8007cf6 <_strtod_l+0x98e>
 8007dbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1c1      	bne.n	8007d50 <_strtod_l+0x9e8>
 8007dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	051b      	lsls	r3, r3, #20
 8007dd4:	429d      	cmp	r5, r3
 8007dd6:	d1bb      	bne.n	8007d50 <_strtod_l+0x9e8>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f9 f922 	bl	8001024 <__aeabi_d2lz>
 8007de0:	f7f8 fb4c 	bl	800047c <__aeabi_l2d>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 f9bc 	bl	8000168 <__aeabi_dsub>
 8007df0:	460b      	mov	r3, r1
 8007df2:	4602      	mov	r2, r0
 8007df4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007df8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dfe:	ea46 060a 	orr.w	r6, r6, sl
 8007e02:	431e      	orrs	r6, r3
 8007e04:	d069      	beq.n	8007eda <_strtod_l+0xb72>
 8007e06:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e30 <_strtod_l+0xac8>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f7f8 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f47f accf 	bne.w	80077b4 <_strtod_l+0x44c>
 8007e16:	a308      	add	r3, pc, #32	@ (adr r3, 8007e38 <_strtod_l+0xad0>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e20:	f7f8 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d093      	beq.n	8007d50 <_strtod_l+0x9e8>
 8007e28:	e4c4      	b.n	80077b4 <_strtod_l+0x44c>
 8007e2a:	bf00      	nop
 8007e2c:	f3af 8000 	nop.w
 8007e30:	94a03595 	.word	0x94a03595
 8007e34:	3fdfffff 	.word	0x3fdfffff
 8007e38:	35afe535 	.word	0x35afe535
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	000fffff 	.word	0x000fffff
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	7fefffff 	.word	0x7fefffff
 8007e4c:	3ff00000 	.word	0x3ff00000
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	7fe00000 	.word	0x7fe00000
 8007e58:	7c9fffff 	.word	0x7c9fffff
 8007e5c:	bff00000 	.word	0xbff00000
 8007e60:	9b08      	ldr	r3, [sp, #32]
 8007e62:	b323      	cbz	r3, 8007eae <_strtod_l+0xb46>
 8007e64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e68:	d821      	bhi.n	8007eae <_strtod_l+0xb46>
 8007e6a:	a327      	add	r3, pc, #156	@ (adr r3, 8007f08 <_strtod_l+0xba0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fdac 	bl	80009d0 <__aeabi_dcmple>
 8007e78:	b1a0      	cbz	r0, 8007ea4 <_strtod_l+0xb3c>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7f8 fe03 	bl	8000a88 <__aeabi_d2uiz>
 8007e82:	2801      	cmp	r0, #1
 8007e84:	bf38      	it	cc
 8007e86:	2001      	movcc	r0, #1
 8007e88:	f7f8 faac 	bl	80003e4 <__aeabi_ui2d>
 8007e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	b9fb      	cbnz	r3, 8007ed4 <_strtod_l+0xb6c>
 8007e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e98:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ea4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ea6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007eaa:	1b5b      	subs	r3, r3, r5
 8007eac:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007eb6:	f7ff f8ff 	bl	80070b8 <__ulp>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	f7f8 fb09 	bl	80004d8 <__aeabi_dmul>
 8007ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007eca:	f7f8 f94f 	bl	800016c <__adddf3>
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	e776      	b.n	8007dc2 <_strtod_l+0xa5a>
 8007ed4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ed8:	e7e0      	b.n	8007e9c <_strtod_l+0xb34>
 8007eda:	a30d      	add	r3, pc, #52	@ (adr r3, 8007f10 <_strtod_l+0xba8>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8007ee4:	e79e      	b.n	8007e24 <_strtod_l+0xabc>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	f7ff ba77 	b.w	80073e2 <_strtod_l+0x7a>
 8007ef4:	2a65      	cmp	r2, #101	@ 0x65
 8007ef6:	f43f ab6e 	beq.w	80075d6 <_strtod_l+0x26e>
 8007efa:	2a45      	cmp	r2, #69	@ 0x45
 8007efc:	f43f ab6b 	beq.w	80075d6 <_strtod_l+0x26e>
 8007f00:	2301      	movs	r3, #1
 8007f02:	f7ff bba6 	b.w	8007652 <_strtod_l+0x2ea>
 8007f06:	bf00      	nop
 8007f08:	ffc00000 	.word	0xffc00000
 8007f0c:	41dfffff 	.word	0x41dfffff
 8007f10:	94a03595 	.word	0x94a03595
 8007f14:	3fcfffff 	.word	0x3fcfffff

08007f18 <_strtod_r>:
 8007f18:	4b01      	ldr	r3, [pc, #4]	@ (8007f20 <_strtod_r+0x8>)
 8007f1a:	f7ff ba25 	b.w	8007368 <_strtod_l>
 8007f1e:	bf00      	nop
 8007f20:	20000100 	.word	0x20000100

08007f24 <_strtol_l.constprop.0>:
 8007f24:	2b24      	cmp	r3, #36	@ 0x24
 8007f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2a:	4686      	mov	lr, r0
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	d801      	bhi.n	8007f34 <_strtol_l.constprop.0+0x10>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <_strtol_l.constprop.0+0x1e>
 8007f34:	f7fd fdb2 	bl	8005a9c <__errno>
 8007f38:	2316      	movs	r3, #22
 8007f3a:	6003      	str	r3, [r0, #0]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	460d      	mov	r5, r1
 8007f44:	4833      	ldr	r0, [pc, #204]	@ (8008014 <_strtol_l.constprop.0+0xf0>)
 8007f46:	462a      	mov	r2, r5
 8007f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4c:	5d06      	ldrb	r6, [r0, r4]
 8007f4e:	f016 0608 	ands.w	r6, r6, #8
 8007f52:	d1f8      	bne.n	8007f46 <_strtol_l.constprop.0+0x22>
 8007f54:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f56:	d12d      	bne.n	8007fb4 <_strtol_l.constprop.0+0x90>
 8007f58:	2601      	movs	r6, #1
 8007f5a:	782c      	ldrb	r4, [r5, #0]
 8007f5c:	1c95      	adds	r5, r2, #2
 8007f5e:	f033 0210 	bics.w	r2, r3, #16
 8007f62:	d109      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007f64:	2c30      	cmp	r4, #48	@ 0x30
 8007f66:	d12a      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f68:	782a      	ldrb	r2, [r5, #0]
 8007f6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6e:	2a58      	cmp	r2, #88	@ 0x58
 8007f70:	d125      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f72:	2310      	movs	r3, #16
 8007f74:	786c      	ldrb	r4, [r5, #1]
 8007f76:	3502      	adds	r5, #2
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f82:	fbbc f9f3 	udiv	r9, ip, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f90:	2f09      	cmp	r7, #9
 8007f92:	d81b      	bhi.n	8007fcc <_strtol_l.constprop.0+0xa8>
 8007f94:	463c      	mov	r4, r7
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	dd27      	ble.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007f9a:	1c57      	adds	r7, r2, #1
 8007f9c:	d007      	beq.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007f9e:	4581      	cmp	r9, r0
 8007fa0:	d320      	bcc.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa2:	d101      	bne.n	8007fa8 <_strtol_l.constprop.0+0x84>
 8007fa4:	45a2      	cmp	sl, r4
 8007fa6:	db1d      	blt.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa8:	2201      	movs	r2, #1
 8007faa:	fb00 4003 	mla	r0, r0, r3, r4
 8007fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fb2:	e7eb      	b.n	8007f8c <_strtol_l.constprop.0+0x68>
 8007fb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fb6:	bf04      	itt	eq
 8007fb8:	782c      	ldrbeq	r4, [r5, #0]
 8007fba:	1c95      	addeq	r5, r2, #2
 8007fbc:	e7cf      	b.n	8007f5e <_strtol_l.constprop.0+0x3a>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1da      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fc2:	2c30      	cmp	r4, #48	@ 0x30
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2308      	moveq	r3, #8
 8007fc8:	230a      	movne	r3, #10
 8007fca:	e7d5      	b.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fd0:	2f19      	cmp	r7, #25
 8007fd2:	d801      	bhi.n	8007fd8 <_strtol_l.constprop.0+0xb4>
 8007fd4:	3c37      	subs	r4, #55	@ 0x37
 8007fd6:	e7de      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fdc:	2f19      	cmp	r7, #25
 8007fde:	d804      	bhi.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007fe0:	3c57      	subs	r4, #87	@ 0x57
 8007fe2:	e7d8      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	e7e1      	b.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007fea:	1c53      	adds	r3, r2, #1
 8007fec:	d108      	bne.n	8008000 <_strtol_l.constprop.0+0xdc>
 8007fee:	2322      	movs	r3, #34	@ 0x22
 8007ff0:	4660      	mov	r0, ip
 8007ff2:	f8ce 3000 	str.w	r3, [lr]
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d0a0      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8007ffc:	1e69      	subs	r1, r5, #1
 8007ffe:	e006      	b.n	800800e <_strtol_l.constprop.0+0xea>
 8008000:	b106      	cbz	r6, 8008004 <_strtol_l.constprop.0+0xe0>
 8008002:	4240      	negs	r0, r0
 8008004:	f1b8 0f00 	cmp.w	r8, #0
 8008008:	d099      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 800800a:	2a00      	cmp	r2, #0
 800800c:	d1f6      	bne.n	8007ffc <_strtol_l.constprop.0+0xd8>
 800800e:	f8c8 1000 	str.w	r1, [r8]
 8008012:	e794      	b.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8008014:	0800b229 	.word	0x0800b229

08008018 <_strtol_r>:
 8008018:	f7ff bf84 	b.w	8007f24 <_strtol_l.constprop.0>

0800801c <__ssputs_r>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	461f      	mov	r7, r3
 8008022:	688e      	ldr	r6, [r1, #8]
 8008024:	4682      	mov	sl, r0
 8008026:	42be      	cmp	r6, r7
 8008028:	460c      	mov	r4, r1
 800802a:	4690      	mov	r8, r2
 800802c:	680b      	ldr	r3, [r1, #0]
 800802e:	d82d      	bhi.n	800808c <__ssputs_r+0x70>
 8008030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008038:	d026      	beq.n	8008088 <__ssputs_r+0x6c>
 800803a:	6965      	ldr	r5, [r4, #20]
 800803c:	6909      	ldr	r1, [r1, #16]
 800803e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008042:	eba3 0901 	sub.w	r9, r3, r1
 8008046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800804a:	1c7b      	adds	r3, r7, #1
 800804c:	444b      	add	r3, r9
 800804e:	106d      	asrs	r5, r5, #1
 8008050:	429d      	cmp	r5, r3
 8008052:	bf38      	it	cc
 8008054:	461d      	movcc	r5, r3
 8008056:	0553      	lsls	r3, r2, #21
 8008058:	d527      	bpl.n	80080aa <__ssputs_r+0x8e>
 800805a:	4629      	mov	r1, r5
 800805c:	f7fe fc2e 	bl	80068bc <_malloc_r>
 8008060:	4606      	mov	r6, r0
 8008062:	b360      	cbz	r0, 80080be <__ssputs_r+0xa2>
 8008064:	464a      	mov	r2, r9
 8008066:	6921      	ldr	r1, [r4, #16]
 8008068:	f7fd fd53 	bl	8005b12 <memcpy>
 800806c:	89a3      	ldrh	r3, [r4, #12]
 800806e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008076:	81a3      	strh	r3, [r4, #12]
 8008078:	6126      	str	r6, [r4, #16]
 800807a:	444e      	add	r6, r9
 800807c:	6026      	str	r6, [r4, #0]
 800807e:	463e      	mov	r6, r7
 8008080:	6165      	str	r5, [r4, #20]
 8008082:	eba5 0509 	sub.w	r5, r5, r9
 8008086:	60a5      	str	r5, [r4, #8]
 8008088:	42be      	cmp	r6, r7
 800808a:	d900      	bls.n	800808e <__ssputs_r+0x72>
 800808c:	463e      	mov	r6, r7
 800808e:	4632      	mov	r2, r6
 8008090:	4641      	mov	r1, r8
 8008092:	6820      	ldr	r0, [r4, #0]
 8008094:	f7fd fc95 	bl	80059c2 <memmove>
 8008098:	2000      	movs	r0, #0
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	1b9b      	subs	r3, r3, r6
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	4433      	add	r3, r6
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080aa:	462a      	mov	r2, r5
 80080ac:	f000 fd5b 	bl	8008b66 <_realloc_r>
 80080b0:	4606      	mov	r6, r0
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d1e0      	bne.n	8008078 <__ssputs_r+0x5c>
 80080b6:	4650      	mov	r0, sl
 80080b8:	6921      	ldr	r1, [r4, #16]
 80080ba:	f7fe fb8d 	bl	80067d8 <_free_r>
 80080be:	230c      	movs	r3, #12
 80080c0:	f8ca 3000 	str.w	r3, [sl]
 80080c4:	89a3      	ldrh	r3, [r4, #12]
 80080c6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ce:	81a3      	strh	r3, [r4, #12]
 80080d0:	e7e9      	b.n	80080a6 <__ssputs_r+0x8a>
	...

080080d4 <_svfiprintf_r>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	4698      	mov	r8, r3
 80080da:	898b      	ldrh	r3, [r1, #12]
 80080dc:	4607      	mov	r7, r0
 80080de:	061b      	lsls	r3, r3, #24
 80080e0:	460d      	mov	r5, r1
 80080e2:	4614      	mov	r4, r2
 80080e4:	b09d      	sub	sp, #116	@ 0x74
 80080e6:	d510      	bpl.n	800810a <_svfiprintf_r+0x36>
 80080e8:	690b      	ldr	r3, [r1, #16]
 80080ea:	b973      	cbnz	r3, 800810a <_svfiprintf_r+0x36>
 80080ec:	2140      	movs	r1, #64	@ 0x40
 80080ee:	f7fe fbe5 	bl	80068bc <_malloc_r>
 80080f2:	6028      	str	r0, [r5, #0]
 80080f4:	6128      	str	r0, [r5, #16]
 80080f6:	b930      	cbnz	r0, 8008106 <_svfiprintf_r+0x32>
 80080f8:	230c      	movs	r3, #12
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	b01d      	add	sp, #116	@ 0x74
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	2340      	movs	r3, #64	@ 0x40
 8008108:	616b      	str	r3, [r5, #20]
 800810a:	2300      	movs	r3, #0
 800810c:	9309      	str	r3, [sp, #36]	@ 0x24
 800810e:	2320      	movs	r3, #32
 8008110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008114:	2330      	movs	r3, #48	@ 0x30
 8008116:	f04f 0901 	mov.w	r9, #1
 800811a:	f8cd 800c 	str.w	r8, [sp, #12]
 800811e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80082b8 <_svfiprintf_r+0x1e4>
 8008122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008126:	4623      	mov	r3, r4
 8008128:	469a      	mov	sl, r3
 800812a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812e:	b10a      	cbz	r2, 8008134 <_svfiprintf_r+0x60>
 8008130:	2a25      	cmp	r2, #37	@ 0x25
 8008132:	d1f9      	bne.n	8008128 <_svfiprintf_r+0x54>
 8008134:	ebba 0b04 	subs.w	fp, sl, r4
 8008138:	d00b      	beq.n	8008152 <_svfiprintf_r+0x7e>
 800813a:	465b      	mov	r3, fp
 800813c:	4622      	mov	r2, r4
 800813e:	4629      	mov	r1, r5
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ff6b 	bl	800801c <__ssputs_r>
 8008146:	3001      	adds	r0, #1
 8008148:	f000 80a7 	beq.w	800829a <_svfiprintf_r+0x1c6>
 800814c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800814e:	445a      	add	r2, fp
 8008150:	9209      	str	r2, [sp, #36]	@ 0x24
 8008152:	f89a 3000 	ldrb.w	r3, [sl]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 809f 	beq.w	800829a <_svfiprintf_r+0x1c6>
 800815c:	2300      	movs	r3, #0
 800815e:	f04f 32ff 	mov.w	r2, #4294967295
 8008162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008166:	f10a 0a01 	add.w	sl, sl, #1
 800816a:	9304      	str	r3, [sp, #16]
 800816c:	9307      	str	r3, [sp, #28]
 800816e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008172:	931a      	str	r3, [sp, #104]	@ 0x68
 8008174:	4654      	mov	r4, sl
 8008176:	2205      	movs	r2, #5
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	484e      	ldr	r0, [pc, #312]	@ (80082b8 <_svfiprintf_r+0x1e4>)
 800817e:	f7fd fcba 	bl	8005af6 <memchr>
 8008182:	9a04      	ldr	r2, [sp, #16]
 8008184:	b9d8      	cbnz	r0, 80081be <_svfiprintf_r+0xea>
 8008186:	06d0      	lsls	r0, r2, #27
 8008188:	bf44      	itt	mi
 800818a:	2320      	movmi	r3, #32
 800818c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008190:	0711      	lsls	r1, r2, #28
 8008192:	bf44      	itt	mi
 8008194:	232b      	movmi	r3, #43	@ 0x2b
 8008196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800819a:	f89a 3000 	ldrb.w	r3, [sl]
 800819e:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a0:	d015      	beq.n	80081ce <_svfiprintf_r+0xfa>
 80081a2:	4654      	mov	r4, sl
 80081a4:	2000      	movs	r0, #0
 80081a6:	f04f 0c0a 	mov.w	ip, #10
 80081aa:	9a07      	ldr	r2, [sp, #28]
 80081ac:	4621      	mov	r1, r4
 80081ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b2:	3b30      	subs	r3, #48	@ 0x30
 80081b4:	2b09      	cmp	r3, #9
 80081b6:	d94b      	bls.n	8008250 <_svfiprintf_r+0x17c>
 80081b8:	b1b0      	cbz	r0, 80081e8 <_svfiprintf_r+0x114>
 80081ba:	9207      	str	r2, [sp, #28]
 80081bc:	e014      	b.n	80081e8 <_svfiprintf_r+0x114>
 80081be:	eba0 0308 	sub.w	r3, r0, r8
 80081c2:	fa09 f303 	lsl.w	r3, r9, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	46a2      	mov	sl, r4
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	e7d2      	b.n	8008174 <_svfiprintf_r+0xa0>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	1d19      	adds	r1, r3, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	9103      	str	r1, [sp, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfbb      	ittet	lt
 80081da:	425b      	neglt	r3, r3
 80081dc:	f042 0202 	orrlt.w	r2, r2, #2
 80081e0:	9307      	strge	r3, [sp, #28]
 80081e2:	9307      	strlt	r3, [sp, #28]
 80081e4:	bfb8      	it	lt
 80081e6:	9204      	strlt	r2, [sp, #16]
 80081e8:	7823      	ldrb	r3, [r4, #0]
 80081ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ec:	d10a      	bne.n	8008204 <_svfiprintf_r+0x130>
 80081ee:	7863      	ldrb	r3, [r4, #1]
 80081f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f2:	d132      	bne.n	800825a <_svfiprintf_r+0x186>
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	3402      	adds	r4, #2
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80082bc <_svfiprintf_r+0x1e8>
 8008208:	2203      	movs	r2, #3
 800820a:	4650      	mov	r0, sl
 800820c:	7821      	ldrb	r1, [r4, #0]
 800820e:	f7fd fc72 	bl	8005af6 <memchr>
 8008212:	b138      	cbz	r0, 8008224 <_svfiprintf_r+0x150>
 8008214:	2240      	movs	r2, #64	@ 0x40
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	eba0 000a 	sub.w	r0, r0, sl
 800821c:	4082      	lsls	r2, r0
 800821e:	4313      	orrs	r3, r2
 8008220:	3401      	adds	r4, #1
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008228:	2206      	movs	r2, #6
 800822a:	4825      	ldr	r0, [pc, #148]	@ (80082c0 <_svfiprintf_r+0x1ec>)
 800822c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008230:	f7fd fc61 	bl	8005af6 <memchr>
 8008234:	2800      	cmp	r0, #0
 8008236:	d036      	beq.n	80082a6 <_svfiprintf_r+0x1d2>
 8008238:	4b22      	ldr	r3, [pc, #136]	@ (80082c4 <_svfiprintf_r+0x1f0>)
 800823a:	bb1b      	cbnz	r3, 8008284 <_svfiprintf_r+0x1b0>
 800823c:	9b03      	ldr	r3, [sp, #12]
 800823e:	3307      	adds	r3, #7
 8008240:	f023 0307 	bic.w	r3, r3, #7
 8008244:	3308      	adds	r3, #8
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824a:	4433      	add	r3, r6
 800824c:	9309      	str	r3, [sp, #36]	@ 0x24
 800824e:	e76a      	b.n	8008126 <_svfiprintf_r+0x52>
 8008250:	460c      	mov	r4, r1
 8008252:	2001      	movs	r0, #1
 8008254:	fb0c 3202 	mla	r2, ip, r2, r3
 8008258:	e7a8      	b.n	80081ac <_svfiprintf_r+0xd8>
 800825a:	2300      	movs	r3, #0
 800825c:	f04f 0c0a 	mov.w	ip, #10
 8008260:	4619      	mov	r1, r3
 8008262:	3401      	adds	r4, #1
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4620      	mov	r0, r4
 8008268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826c:	3a30      	subs	r2, #48	@ 0x30
 800826e:	2a09      	cmp	r2, #9
 8008270:	d903      	bls.n	800827a <_svfiprintf_r+0x1a6>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0c6      	beq.n	8008204 <_svfiprintf_r+0x130>
 8008276:	9105      	str	r1, [sp, #20]
 8008278:	e7c4      	b.n	8008204 <_svfiprintf_r+0x130>
 800827a:	4604      	mov	r4, r0
 800827c:	2301      	movs	r3, #1
 800827e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008282:	e7f0      	b.n	8008266 <_svfiprintf_r+0x192>
 8008284:	ab03      	add	r3, sp, #12
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	462a      	mov	r2, r5
 800828a:	4638      	mov	r0, r7
 800828c:	4b0e      	ldr	r3, [pc, #56]	@ (80082c8 <_svfiprintf_r+0x1f4>)
 800828e:	a904      	add	r1, sp, #16
 8008290:	f7fc fca4 	bl	8004bdc <_printf_float>
 8008294:	1c42      	adds	r2, r0, #1
 8008296:	4606      	mov	r6, r0
 8008298:	d1d6      	bne.n	8008248 <_svfiprintf_r+0x174>
 800829a:	89ab      	ldrh	r3, [r5, #12]
 800829c:	065b      	lsls	r3, r3, #25
 800829e:	f53f af2d 	bmi.w	80080fc <_svfiprintf_r+0x28>
 80082a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082a4:	e72c      	b.n	8008100 <_svfiprintf_r+0x2c>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4638      	mov	r0, r7
 80082ae:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <_svfiprintf_r+0x1f4>)
 80082b0:	a904      	add	r1, sp, #16
 80082b2:	f7fc ff31 	bl	8005118 <_printf_i>
 80082b6:	e7ed      	b.n	8008294 <_svfiprintf_r+0x1c0>
 80082b8:	0800b329 	.word	0x0800b329
 80082bc:	0800b32f 	.word	0x0800b32f
 80082c0:	0800b333 	.word	0x0800b333
 80082c4:	08004bdd 	.word	0x08004bdd
 80082c8:	0800801d 	.word	0x0800801d

080082cc <__sflush_r>:
 80082cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	0716      	lsls	r6, r2, #28
 80082d4:	4605      	mov	r5, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	d454      	bmi.n	8008384 <__sflush_r+0xb8>
 80082da:	684b      	ldr	r3, [r1, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dc02      	bgt.n	80082e6 <__sflush_r+0x1a>
 80082e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd48      	ble.n	8008378 <__sflush_r+0xac>
 80082e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	d045      	beq.n	8008378 <__sflush_r+0xac>
 80082ec:	2300      	movs	r3, #0
 80082ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082f2:	682f      	ldr	r7, [r5, #0]
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	d030      	beq.n	800835c <__sflush_r+0x90>
 80082fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	0759      	lsls	r1, r3, #29
 8008300:	d505      	bpl.n	800830e <__sflush_r+0x42>
 8008302:	6863      	ldr	r3, [r4, #4]
 8008304:	1ad2      	subs	r2, r2, r3
 8008306:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008308:	b10b      	cbz	r3, 800830e <__sflush_r+0x42>
 800830a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800830c:	1ad2      	subs	r2, r2, r3
 800830e:	2300      	movs	r3, #0
 8008310:	4628      	mov	r0, r5
 8008312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008314:	6a21      	ldr	r1, [r4, #32]
 8008316:	47b0      	blx	r6
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	d106      	bne.n	800832c <__sflush_r+0x60>
 800831e:	6829      	ldr	r1, [r5, #0]
 8008320:	291d      	cmp	r1, #29
 8008322:	d82b      	bhi.n	800837c <__sflush_r+0xb0>
 8008324:	4a28      	ldr	r2, [pc, #160]	@ (80083c8 <__sflush_r+0xfc>)
 8008326:	410a      	asrs	r2, r1
 8008328:	07d6      	lsls	r6, r2, #31
 800832a:	d427      	bmi.n	800837c <__sflush_r+0xb0>
 800832c:	2200      	movs	r2, #0
 800832e:	6062      	str	r2, [r4, #4]
 8008330:	6922      	ldr	r2, [r4, #16]
 8008332:	04d9      	lsls	r1, r3, #19
 8008334:	6022      	str	r2, [r4, #0]
 8008336:	d504      	bpl.n	8008342 <__sflush_r+0x76>
 8008338:	1c42      	adds	r2, r0, #1
 800833a:	d101      	bne.n	8008340 <__sflush_r+0x74>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	b903      	cbnz	r3, 8008342 <__sflush_r+0x76>
 8008340:	6560      	str	r0, [r4, #84]	@ 0x54
 8008342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008344:	602f      	str	r7, [r5, #0]
 8008346:	b1b9      	cbz	r1, 8008378 <__sflush_r+0xac>
 8008348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800834c:	4299      	cmp	r1, r3
 800834e:	d002      	beq.n	8008356 <__sflush_r+0x8a>
 8008350:	4628      	mov	r0, r5
 8008352:	f7fe fa41 	bl	80067d8 <_free_r>
 8008356:	2300      	movs	r3, #0
 8008358:	6363      	str	r3, [r4, #52]	@ 0x34
 800835a:	e00d      	b.n	8008378 <__sflush_r+0xac>
 800835c:	2301      	movs	r3, #1
 800835e:	4628      	mov	r0, r5
 8008360:	47b0      	blx	r6
 8008362:	4602      	mov	r2, r0
 8008364:	1c50      	adds	r0, r2, #1
 8008366:	d1c9      	bne.n	80082fc <__sflush_r+0x30>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0c6      	beq.n	80082fc <__sflush_r+0x30>
 800836e:	2b1d      	cmp	r3, #29
 8008370:	d001      	beq.n	8008376 <__sflush_r+0xaa>
 8008372:	2b16      	cmp	r3, #22
 8008374:	d11d      	bne.n	80083b2 <__sflush_r+0xe6>
 8008376:	602f      	str	r7, [r5, #0]
 8008378:	2000      	movs	r0, #0
 800837a:	e021      	b.n	80083c0 <__sflush_r+0xf4>
 800837c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008380:	b21b      	sxth	r3, r3
 8008382:	e01a      	b.n	80083ba <__sflush_r+0xee>
 8008384:	690f      	ldr	r7, [r1, #16]
 8008386:	2f00      	cmp	r7, #0
 8008388:	d0f6      	beq.n	8008378 <__sflush_r+0xac>
 800838a:	0793      	lsls	r3, r2, #30
 800838c:	bf18      	it	ne
 800838e:	2300      	movne	r3, #0
 8008390:	680e      	ldr	r6, [r1, #0]
 8008392:	bf08      	it	eq
 8008394:	694b      	ldreq	r3, [r1, #20]
 8008396:	1bf6      	subs	r6, r6, r7
 8008398:	600f      	str	r7, [r1, #0]
 800839a:	608b      	str	r3, [r1, #8]
 800839c:	2e00      	cmp	r6, #0
 800839e:	ddeb      	ble.n	8008378 <__sflush_r+0xac>
 80083a0:	4633      	mov	r3, r6
 80083a2:	463a      	mov	r2, r7
 80083a4:	4628      	mov	r0, r5
 80083a6:	6a21      	ldr	r1, [r4, #32]
 80083a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80083ac:	47e0      	blx	ip
 80083ae:	2800      	cmp	r0, #0
 80083b0:	dc07      	bgt.n	80083c2 <__sflush_r+0xf6>
 80083b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ba:	f04f 30ff 	mov.w	r0, #4294967295
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c2:	4407      	add	r7, r0
 80083c4:	1a36      	subs	r6, r6, r0
 80083c6:	e7e9      	b.n	800839c <__sflush_r+0xd0>
 80083c8:	dfbffffe 	.word	0xdfbffffe

080083cc <_fflush_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	690b      	ldr	r3, [r1, #16]
 80083d0:	4605      	mov	r5, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	b913      	cbnz	r3, 80083dc <_fflush_r+0x10>
 80083d6:	2500      	movs	r5, #0
 80083d8:	4628      	mov	r0, r5
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	b118      	cbz	r0, 80083e6 <_fflush_r+0x1a>
 80083de:	6a03      	ldr	r3, [r0, #32]
 80083e0:	b90b      	cbnz	r3, 80083e6 <_fflush_r+0x1a>
 80083e2:	f7fd fa55 	bl	8005890 <__sinit>
 80083e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f3      	beq.n	80083d6 <_fflush_r+0xa>
 80083ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083f0:	07d0      	lsls	r0, r2, #31
 80083f2:	d404      	bmi.n	80083fe <_fflush_r+0x32>
 80083f4:	0599      	lsls	r1, r3, #22
 80083f6:	d402      	bmi.n	80083fe <_fflush_r+0x32>
 80083f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083fa:	f7fd fb7a 	bl	8005af2 <__retarget_lock_acquire_recursive>
 80083fe:	4628      	mov	r0, r5
 8008400:	4621      	mov	r1, r4
 8008402:	f7ff ff63 	bl	80082cc <__sflush_r>
 8008406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008408:	4605      	mov	r5, r0
 800840a:	07da      	lsls	r2, r3, #31
 800840c:	d4e4      	bmi.n	80083d8 <_fflush_r+0xc>
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	059b      	lsls	r3, r3, #22
 8008412:	d4e1      	bmi.n	80083d8 <_fflush_r+0xc>
 8008414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008416:	f7fd fb6d 	bl	8005af4 <__retarget_lock_release_recursive>
 800841a:	e7dd      	b.n	80083d8 <_fflush_r+0xc>

0800841c <strncmp>:
 800841c:	b510      	push	{r4, lr}
 800841e:	b16a      	cbz	r2, 800843c <strncmp+0x20>
 8008420:	3901      	subs	r1, #1
 8008422:	1884      	adds	r4, r0, r2
 8008424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008428:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800842c:	429a      	cmp	r2, r3
 800842e:	d103      	bne.n	8008438 <strncmp+0x1c>
 8008430:	42a0      	cmp	r0, r4
 8008432:	d001      	beq.n	8008438 <strncmp+0x1c>
 8008434:	2a00      	cmp	r2, #0
 8008436:	d1f5      	bne.n	8008424 <strncmp+0x8>
 8008438:	1ad0      	subs	r0, r2, r3
 800843a:	bd10      	pop	{r4, pc}
 800843c:	4610      	mov	r0, r2
 800843e:	e7fc      	b.n	800843a <strncmp+0x1e>

08008440 <_sbrk_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	2300      	movs	r3, #0
 8008444:	4d05      	ldr	r5, [pc, #20]	@ (800845c <_sbrk_r+0x1c>)
 8008446:	4604      	mov	r4, r0
 8008448:	4608      	mov	r0, r1
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	f7f9 ffbe 	bl	80023cc <_sbrk>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	d102      	bne.n	800845a <_sbrk_r+0x1a>
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	b103      	cbz	r3, 800845a <_sbrk_r+0x1a>
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	bd38      	pop	{r3, r4, r5, pc}
 800845c:	200008d4 	.word	0x200008d4

08008460 <nan>:
 8008460:	2000      	movs	r0, #0
 8008462:	4901      	ldr	r1, [pc, #4]	@ (8008468 <nan+0x8>)
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	7ff80000 	.word	0x7ff80000

0800846c <__assert_func>:
 800846c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800846e:	4614      	mov	r4, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4b09      	ldr	r3, [pc, #36]	@ (8008498 <__assert_func+0x2c>)
 8008474:	4605      	mov	r5, r0
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68d8      	ldr	r0, [r3, #12]
 800847a:	b954      	cbnz	r4, 8008492 <__assert_func+0x26>
 800847c:	4b07      	ldr	r3, [pc, #28]	@ (800849c <__assert_func+0x30>)
 800847e:	461c      	mov	r4, r3
 8008480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008484:	9100      	str	r1, [sp, #0]
 8008486:	462b      	mov	r3, r5
 8008488:	4905      	ldr	r1, [pc, #20]	@ (80084a0 <__assert_func+0x34>)
 800848a:	f000 fba7 	bl	8008bdc <fiprintf>
 800848e:	f000 fbb7 	bl	8008c00 <abort>
 8008492:	4b04      	ldr	r3, [pc, #16]	@ (80084a4 <__assert_func+0x38>)
 8008494:	e7f4      	b.n	8008480 <__assert_func+0x14>
 8008496:	bf00      	nop
 8008498:	200000b0 	.word	0x200000b0
 800849c:	0800b37d 	.word	0x0800b37d
 80084a0:	0800b34f 	.word	0x0800b34f
 80084a4:	0800b342 	.word	0x0800b342

080084a8 <_calloc_r>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	fba1 5402 	umull	r5, r4, r1, r2
 80084ae:	b93c      	cbnz	r4, 80084c0 <_calloc_r+0x18>
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7fe fa03 	bl	80068bc <_malloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	b928      	cbnz	r0, 80084c6 <_calloc_r+0x1e>
 80084ba:	2600      	movs	r6, #0
 80084bc:	4630      	mov	r0, r6
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	220c      	movs	r2, #12
 80084c2:	6002      	str	r2, [r0, #0]
 80084c4:	e7f9      	b.n	80084ba <_calloc_r+0x12>
 80084c6:	462a      	mov	r2, r5
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7fd fa94 	bl	80059f6 <memset>
 80084ce:	e7f5      	b.n	80084bc <_calloc_r+0x14>

080084d0 <rshift>:
 80084d0:	6903      	ldr	r3, [r0, #16]
 80084d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084da:	f100 0414 	add.w	r4, r0, #20
 80084de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084e2:	dd46      	ble.n	8008572 <rshift+0xa2>
 80084e4:	f011 011f 	ands.w	r1, r1, #31
 80084e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084f0:	d10c      	bne.n	800850c <rshift+0x3c>
 80084f2:	4629      	mov	r1, r5
 80084f4:	f100 0710 	add.w	r7, r0, #16
 80084f8:	42b1      	cmp	r1, r6
 80084fa:	d335      	bcc.n	8008568 <rshift+0x98>
 80084fc:	1a9b      	subs	r3, r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	1eea      	subs	r2, r5, #3
 8008502:	4296      	cmp	r6, r2
 8008504:	bf38      	it	cc
 8008506:	2300      	movcc	r3, #0
 8008508:	4423      	add	r3, r4
 800850a:	e015      	b.n	8008538 <rshift+0x68>
 800850c:	46a1      	mov	r9, r4
 800850e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008512:	f1c1 0820 	rsb	r8, r1, #32
 8008516:	40cf      	lsrs	r7, r1
 8008518:	f105 0e04 	add.w	lr, r5, #4
 800851c:	4576      	cmp	r6, lr
 800851e:	46f4      	mov	ip, lr
 8008520:	d816      	bhi.n	8008550 <rshift+0x80>
 8008522:	1a9a      	subs	r2, r3, r2
 8008524:	0092      	lsls	r2, r2, #2
 8008526:	3a04      	subs	r2, #4
 8008528:	3501      	adds	r5, #1
 800852a:	42ae      	cmp	r6, r5
 800852c:	bf38      	it	cc
 800852e:	2200      	movcc	r2, #0
 8008530:	18a3      	adds	r3, r4, r2
 8008532:	50a7      	str	r7, [r4, r2]
 8008534:	b107      	cbz	r7, 8008538 <rshift+0x68>
 8008536:	3304      	adds	r3, #4
 8008538:	42a3      	cmp	r3, r4
 800853a:	eba3 0204 	sub.w	r2, r3, r4
 800853e:	bf08      	it	eq
 8008540:	2300      	moveq	r3, #0
 8008542:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008546:	6102      	str	r2, [r0, #16]
 8008548:	bf08      	it	eq
 800854a:	6143      	streq	r3, [r0, #20]
 800854c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008550:	f8dc c000 	ldr.w	ip, [ip]
 8008554:	fa0c fc08 	lsl.w	ip, ip, r8
 8008558:	ea4c 0707 	orr.w	r7, ip, r7
 800855c:	f849 7b04 	str.w	r7, [r9], #4
 8008560:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008564:	40cf      	lsrs	r7, r1
 8008566:	e7d9      	b.n	800851c <rshift+0x4c>
 8008568:	f851 cb04 	ldr.w	ip, [r1], #4
 800856c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008570:	e7c2      	b.n	80084f8 <rshift+0x28>
 8008572:	4623      	mov	r3, r4
 8008574:	e7e0      	b.n	8008538 <rshift+0x68>

08008576 <__hexdig_fun>:
 8008576:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800857a:	2b09      	cmp	r3, #9
 800857c:	d802      	bhi.n	8008584 <__hexdig_fun+0xe>
 800857e:	3820      	subs	r0, #32
 8008580:	b2c0      	uxtb	r0, r0
 8008582:	4770      	bx	lr
 8008584:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008588:	2b05      	cmp	r3, #5
 800858a:	d801      	bhi.n	8008590 <__hexdig_fun+0x1a>
 800858c:	3847      	subs	r0, #71	@ 0x47
 800858e:	e7f7      	b.n	8008580 <__hexdig_fun+0xa>
 8008590:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008594:	2b05      	cmp	r3, #5
 8008596:	d801      	bhi.n	800859c <__hexdig_fun+0x26>
 8008598:	3827      	subs	r0, #39	@ 0x27
 800859a:	e7f1      	b.n	8008580 <__hexdig_fun+0xa>
 800859c:	2000      	movs	r0, #0
 800859e:	4770      	bx	lr

080085a0 <__gethex>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	468a      	mov	sl, r1
 80085a6:	4690      	mov	r8, r2
 80085a8:	b085      	sub	sp, #20
 80085aa:	9302      	str	r3, [sp, #8]
 80085ac:	680b      	ldr	r3, [r1, #0]
 80085ae:	9001      	str	r0, [sp, #4]
 80085b0:	1c9c      	adds	r4, r3, #2
 80085b2:	46a1      	mov	r9, r4
 80085b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80085b8:	2830      	cmp	r0, #48	@ 0x30
 80085ba:	d0fa      	beq.n	80085b2 <__gethex+0x12>
 80085bc:	eba9 0303 	sub.w	r3, r9, r3
 80085c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80085c4:	f7ff ffd7 	bl	8008576 <__hexdig_fun>
 80085c8:	4605      	mov	r5, r0
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d168      	bne.n	80086a0 <__gethex+0x100>
 80085ce:	2201      	movs	r2, #1
 80085d0:	4648      	mov	r0, r9
 80085d2:	499f      	ldr	r1, [pc, #636]	@ (8008850 <__gethex+0x2b0>)
 80085d4:	f7ff ff22 	bl	800841c <strncmp>
 80085d8:	4607      	mov	r7, r0
 80085da:	2800      	cmp	r0, #0
 80085dc:	d167      	bne.n	80086ae <__gethex+0x10e>
 80085de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085e2:	4626      	mov	r6, r4
 80085e4:	f7ff ffc7 	bl	8008576 <__hexdig_fun>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d062      	beq.n	80086b2 <__gethex+0x112>
 80085ec:	4623      	mov	r3, r4
 80085ee:	7818      	ldrb	r0, [r3, #0]
 80085f0:	4699      	mov	r9, r3
 80085f2:	2830      	cmp	r0, #48	@ 0x30
 80085f4:	f103 0301 	add.w	r3, r3, #1
 80085f8:	d0f9      	beq.n	80085ee <__gethex+0x4e>
 80085fa:	f7ff ffbc 	bl	8008576 <__hexdig_fun>
 80085fe:	fab0 f580 	clz	r5, r0
 8008602:	f04f 0b01 	mov.w	fp, #1
 8008606:	096d      	lsrs	r5, r5, #5
 8008608:	464a      	mov	r2, r9
 800860a:	4616      	mov	r6, r2
 800860c:	7830      	ldrb	r0, [r6, #0]
 800860e:	3201      	adds	r2, #1
 8008610:	f7ff ffb1 	bl	8008576 <__hexdig_fun>
 8008614:	2800      	cmp	r0, #0
 8008616:	d1f8      	bne.n	800860a <__gethex+0x6a>
 8008618:	2201      	movs	r2, #1
 800861a:	4630      	mov	r0, r6
 800861c:	498c      	ldr	r1, [pc, #560]	@ (8008850 <__gethex+0x2b0>)
 800861e:	f7ff fefd 	bl	800841c <strncmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	d13f      	bne.n	80086a6 <__gethex+0x106>
 8008626:	b944      	cbnz	r4, 800863a <__gethex+0x9a>
 8008628:	1c74      	adds	r4, r6, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4616      	mov	r6, r2
 800862e:	7830      	ldrb	r0, [r6, #0]
 8008630:	3201      	adds	r2, #1
 8008632:	f7ff ffa0 	bl	8008576 <__hexdig_fun>
 8008636:	2800      	cmp	r0, #0
 8008638:	d1f8      	bne.n	800862c <__gethex+0x8c>
 800863a:	1ba4      	subs	r4, r4, r6
 800863c:	00a7      	lsls	r7, r4, #2
 800863e:	7833      	ldrb	r3, [r6, #0]
 8008640:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008644:	2b50      	cmp	r3, #80	@ 0x50
 8008646:	d13e      	bne.n	80086c6 <__gethex+0x126>
 8008648:	7873      	ldrb	r3, [r6, #1]
 800864a:	2b2b      	cmp	r3, #43	@ 0x2b
 800864c:	d033      	beq.n	80086b6 <__gethex+0x116>
 800864e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008650:	d034      	beq.n	80086bc <__gethex+0x11c>
 8008652:	2400      	movs	r4, #0
 8008654:	1c71      	adds	r1, r6, #1
 8008656:	7808      	ldrb	r0, [r1, #0]
 8008658:	f7ff ff8d 	bl	8008576 <__hexdig_fun>
 800865c:	1e43      	subs	r3, r0, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b18      	cmp	r3, #24
 8008662:	d830      	bhi.n	80086c6 <__gethex+0x126>
 8008664:	f1a0 0210 	sub.w	r2, r0, #16
 8008668:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800866c:	f7ff ff83 	bl	8008576 <__hexdig_fun>
 8008670:	f100 3cff 	add.w	ip, r0, #4294967295
 8008674:	fa5f fc8c 	uxtb.w	ip, ip
 8008678:	f1bc 0f18 	cmp.w	ip, #24
 800867c:	f04f 030a 	mov.w	r3, #10
 8008680:	d91e      	bls.n	80086c0 <__gethex+0x120>
 8008682:	b104      	cbz	r4, 8008686 <__gethex+0xe6>
 8008684:	4252      	negs	r2, r2
 8008686:	4417      	add	r7, r2
 8008688:	f8ca 1000 	str.w	r1, [sl]
 800868c:	b1ed      	cbz	r5, 80086ca <__gethex+0x12a>
 800868e:	f1bb 0f00 	cmp.w	fp, #0
 8008692:	bf0c      	ite	eq
 8008694:	2506      	moveq	r5, #6
 8008696:	2500      	movne	r5, #0
 8008698:	4628      	mov	r0, r5
 800869a:	b005      	add	sp, #20
 800869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	2500      	movs	r5, #0
 80086a2:	462c      	mov	r4, r5
 80086a4:	e7b0      	b.n	8008608 <__gethex+0x68>
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d1c7      	bne.n	800863a <__gethex+0x9a>
 80086aa:	4627      	mov	r7, r4
 80086ac:	e7c7      	b.n	800863e <__gethex+0x9e>
 80086ae:	464e      	mov	r6, r9
 80086b0:	462f      	mov	r7, r5
 80086b2:	2501      	movs	r5, #1
 80086b4:	e7c3      	b.n	800863e <__gethex+0x9e>
 80086b6:	2400      	movs	r4, #0
 80086b8:	1cb1      	adds	r1, r6, #2
 80086ba:	e7cc      	b.n	8008656 <__gethex+0xb6>
 80086bc:	2401      	movs	r4, #1
 80086be:	e7fb      	b.n	80086b8 <__gethex+0x118>
 80086c0:	fb03 0002 	mla	r0, r3, r2, r0
 80086c4:	e7ce      	b.n	8008664 <__gethex+0xc4>
 80086c6:	4631      	mov	r1, r6
 80086c8:	e7de      	b.n	8008688 <__gethex+0xe8>
 80086ca:	4629      	mov	r1, r5
 80086cc:	eba6 0309 	sub.w	r3, r6, r9
 80086d0:	3b01      	subs	r3, #1
 80086d2:	2b07      	cmp	r3, #7
 80086d4:	dc0a      	bgt.n	80086ec <__gethex+0x14c>
 80086d6:	9801      	ldr	r0, [sp, #4]
 80086d8:	f7fe f97c 	bl	80069d4 <_Balloc>
 80086dc:	4604      	mov	r4, r0
 80086de:	b940      	cbnz	r0, 80086f2 <__gethex+0x152>
 80086e0:	4602      	mov	r2, r0
 80086e2:	21e4      	movs	r1, #228	@ 0xe4
 80086e4:	4b5b      	ldr	r3, [pc, #364]	@ (8008854 <__gethex+0x2b4>)
 80086e6:	485c      	ldr	r0, [pc, #368]	@ (8008858 <__gethex+0x2b8>)
 80086e8:	f7ff fec0 	bl	800846c <__assert_func>
 80086ec:	3101      	adds	r1, #1
 80086ee:	105b      	asrs	r3, r3, #1
 80086f0:	e7ef      	b.n	80086d2 <__gethex+0x132>
 80086f2:	2300      	movs	r3, #0
 80086f4:	f100 0a14 	add.w	sl, r0, #20
 80086f8:	4655      	mov	r5, sl
 80086fa:	469b      	mov	fp, r3
 80086fc:	45b1      	cmp	r9, r6
 80086fe:	d337      	bcc.n	8008770 <__gethex+0x1d0>
 8008700:	f845 bb04 	str.w	fp, [r5], #4
 8008704:	eba5 050a 	sub.w	r5, r5, sl
 8008708:	10ad      	asrs	r5, r5, #2
 800870a:	6125      	str	r5, [r4, #16]
 800870c:	4658      	mov	r0, fp
 800870e:	f7fe fa53 	bl	8006bb8 <__hi0bits>
 8008712:	016d      	lsls	r5, r5, #5
 8008714:	f8d8 6000 	ldr.w	r6, [r8]
 8008718:	1a2d      	subs	r5, r5, r0
 800871a:	42b5      	cmp	r5, r6
 800871c:	dd54      	ble.n	80087c8 <__gethex+0x228>
 800871e:	1bad      	subs	r5, r5, r6
 8008720:	4629      	mov	r1, r5
 8008722:	4620      	mov	r0, r4
 8008724:	f7fe fddb 	bl	80072de <__any_on>
 8008728:	4681      	mov	r9, r0
 800872a:	b178      	cbz	r0, 800874c <__gethex+0x1ac>
 800872c:	f04f 0901 	mov.w	r9, #1
 8008730:	1e6b      	subs	r3, r5, #1
 8008732:	1159      	asrs	r1, r3, #5
 8008734:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008738:	f003 021f 	and.w	r2, r3, #31
 800873c:	fa09 f202 	lsl.w	r2, r9, r2
 8008740:	420a      	tst	r2, r1
 8008742:	d003      	beq.n	800874c <__gethex+0x1ac>
 8008744:	454b      	cmp	r3, r9
 8008746:	dc36      	bgt.n	80087b6 <__gethex+0x216>
 8008748:	f04f 0902 	mov.w	r9, #2
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff febe 	bl	80084d0 <rshift>
 8008754:	442f      	add	r7, r5
 8008756:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800875a:	42bb      	cmp	r3, r7
 800875c:	da42      	bge.n	80087e4 <__gethex+0x244>
 800875e:	4621      	mov	r1, r4
 8008760:	9801      	ldr	r0, [sp, #4]
 8008762:	f7fe f977 	bl	8006a54 <_Bfree>
 8008766:	2300      	movs	r3, #0
 8008768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800876a:	25a3      	movs	r5, #163	@ 0xa3
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e793      	b.n	8008698 <__gethex+0xf8>
 8008770:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008774:	2a2e      	cmp	r2, #46	@ 0x2e
 8008776:	d012      	beq.n	800879e <__gethex+0x1fe>
 8008778:	2b20      	cmp	r3, #32
 800877a:	d104      	bne.n	8008786 <__gethex+0x1e6>
 800877c:	f845 bb04 	str.w	fp, [r5], #4
 8008780:	f04f 0b00 	mov.w	fp, #0
 8008784:	465b      	mov	r3, fp
 8008786:	7830      	ldrb	r0, [r6, #0]
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	f7ff fef4 	bl	8008576 <__hexdig_fun>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	f000 000f 	and.w	r0, r0, #15
 8008794:	4098      	lsls	r0, r3
 8008796:	ea4b 0b00 	orr.w	fp, fp, r0
 800879a:	3304      	adds	r3, #4
 800879c:	e7ae      	b.n	80086fc <__gethex+0x15c>
 800879e:	45b1      	cmp	r9, r6
 80087a0:	d8ea      	bhi.n	8008778 <__gethex+0x1d8>
 80087a2:	2201      	movs	r2, #1
 80087a4:	4630      	mov	r0, r6
 80087a6:	492a      	ldr	r1, [pc, #168]	@ (8008850 <__gethex+0x2b0>)
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	f7ff fe37 	bl	800841c <strncmp>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d1e1      	bne.n	8008778 <__gethex+0x1d8>
 80087b4:	e7a2      	b.n	80086fc <__gethex+0x15c>
 80087b6:	4620      	mov	r0, r4
 80087b8:	1ea9      	subs	r1, r5, #2
 80087ba:	f7fe fd90 	bl	80072de <__any_on>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0c2      	beq.n	8008748 <__gethex+0x1a8>
 80087c2:	f04f 0903 	mov.w	r9, #3
 80087c6:	e7c1      	b.n	800874c <__gethex+0x1ac>
 80087c8:	da09      	bge.n	80087de <__gethex+0x23e>
 80087ca:	1b75      	subs	r5, r6, r5
 80087cc:	4621      	mov	r1, r4
 80087ce:	462a      	mov	r2, r5
 80087d0:	9801      	ldr	r0, [sp, #4]
 80087d2:	f7fe fb55 	bl	8006e80 <__lshift>
 80087d6:	4604      	mov	r4, r0
 80087d8:	1b7f      	subs	r7, r7, r5
 80087da:	f100 0a14 	add.w	sl, r0, #20
 80087de:	f04f 0900 	mov.w	r9, #0
 80087e2:	e7b8      	b.n	8008756 <__gethex+0x1b6>
 80087e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087e8:	42bd      	cmp	r5, r7
 80087ea:	dd6f      	ble.n	80088cc <__gethex+0x32c>
 80087ec:	1bed      	subs	r5, r5, r7
 80087ee:	42ae      	cmp	r6, r5
 80087f0:	dc34      	bgt.n	800885c <__gethex+0x2bc>
 80087f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d022      	beq.n	8008840 <__gethex+0x2a0>
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d024      	beq.n	8008848 <__gethex+0x2a8>
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d115      	bne.n	800882e <__gethex+0x28e>
 8008802:	42ae      	cmp	r6, r5
 8008804:	d113      	bne.n	800882e <__gethex+0x28e>
 8008806:	2e01      	cmp	r6, #1
 8008808:	d10b      	bne.n	8008822 <__gethex+0x282>
 800880a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800880e:	9a02      	ldr	r2, [sp, #8]
 8008810:	2562      	movs	r5, #98	@ 0x62
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	2301      	movs	r3, #1
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	f8ca 3000 	str.w	r3, [sl]
 800881c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800881e:	601c      	str	r4, [r3, #0]
 8008820:	e73a      	b.n	8008698 <__gethex+0xf8>
 8008822:	4620      	mov	r0, r4
 8008824:	1e71      	subs	r1, r6, #1
 8008826:	f7fe fd5a 	bl	80072de <__any_on>
 800882a:	2800      	cmp	r0, #0
 800882c:	d1ed      	bne.n	800880a <__gethex+0x26a>
 800882e:	4621      	mov	r1, r4
 8008830:	9801      	ldr	r0, [sp, #4]
 8008832:	f7fe f90f 	bl	8006a54 <_Bfree>
 8008836:	2300      	movs	r3, #0
 8008838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800883a:	2550      	movs	r5, #80	@ 0x50
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e72b      	b.n	8008698 <__gethex+0xf8>
 8008840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f3      	bne.n	800882e <__gethex+0x28e>
 8008846:	e7e0      	b.n	800880a <__gethex+0x26a>
 8008848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1dd      	bne.n	800880a <__gethex+0x26a>
 800884e:	e7ee      	b.n	800882e <__gethex+0x28e>
 8008850:	0800b1d0 	.word	0x0800b1d0
 8008854:	0800b067 	.word	0x0800b067
 8008858:	0800b37e 	.word	0x0800b37e
 800885c:	1e6f      	subs	r7, r5, #1
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	d130      	bne.n	80088c6 <__gethex+0x326>
 8008864:	b127      	cbz	r7, 8008870 <__gethex+0x2d0>
 8008866:	4639      	mov	r1, r7
 8008868:	4620      	mov	r0, r4
 800886a:	f7fe fd38 	bl	80072de <__any_on>
 800886e:	4681      	mov	r9, r0
 8008870:	2301      	movs	r3, #1
 8008872:	4629      	mov	r1, r5
 8008874:	1b76      	subs	r6, r6, r5
 8008876:	2502      	movs	r5, #2
 8008878:	117a      	asrs	r2, r7, #5
 800887a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800887e:	f007 071f 	and.w	r7, r7, #31
 8008882:	40bb      	lsls	r3, r7
 8008884:	4213      	tst	r3, r2
 8008886:	4620      	mov	r0, r4
 8008888:	bf18      	it	ne
 800888a:	f049 0902 	orrne.w	r9, r9, #2
 800888e:	f7ff fe1f 	bl	80084d0 <rshift>
 8008892:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	d047      	beq.n	800892c <__gethex+0x38c>
 800889c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d015      	beq.n	80088d0 <__gethex+0x330>
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d017      	beq.n	80088d8 <__gethex+0x338>
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d109      	bne.n	80088c0 <__gethex+0x320>
 80088ac:	f019 0f02 	tst.w	r9, #2
 80088b0:	d006      	beq.n	80088c0 <__gethex+0x320>
 80088b2:	f8da 3000 	ldr.w	r3, [sl]
 80088b6:	ea49 0903 	orr.w	r9, r9, r3
 80088ba:	f019 0f01 	tst.w	r9, #1
 80088be:	d10e      	bne.n	80088de <__gethex+0x33e>
 80088c0:	f045 0510 	orr.w	r5, r5, #16
 80088c4:	e032      	b.n	800892c <__gethex+0x38c>
 80088c6:	f04f 0901 	mov.w	r9, #1
 80088ca:	e7d1      	b.n	8008870 <__gethex+0x2d0>
 80088cc:	2501      	movs	r5, #1
 80088ce:	e7e2      	b.n	8008896 <__gethex+0x2f6>
 80088d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d2:	f1c3 0301 	rsb	r3, r3, #1
 80088d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f0      	beq.n	80088c0 <__gethex+0x320>
 80088de:	f04f 0c00 	mov.w	ip, #0
 80088e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088e6:	f104 0314 	add.w	r3, r4, #20
 80088ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088fc:	d01b      	beq.n	8008936 <__gethex+0x396>
 80088fe:	3201      	adds	r2, #1
 8008900:	6002      	str	r2, [r0, #0]
 8008902:	2d02      	cmp	r5, #2
 8008904:	f104 0314 	add.w	r3, r4, #20
 8008908:	d13c      	bne.n	8008984 <__gethex+0x3e4>
 800890a:	f8d8 2000 	ldr.w	r2, [r8]
 800890e:	3a01      	subs	r2, #1
 8008910:	42b2      	cmp	r2, r6
 8008912:	d109      	bne.n	8008928 <__gethex+0x388>
 8008914:	2201      	movs	r2, #1
 8008916:	1171      	asrs	r1, r6, #5
 8008918:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800891c:	f006 061f 	and.w	r6, r6, #31
 8008920:	fa02 f606 	lsl.w	r6, r2, r6
 8008924:	421e      	tst	r6, r3
 8008926:	d13a      	bne.n	800899e <__gethex+0x3fe>
 8008928:	f045 0520 	orr.w	r5, r5, #32
 800892c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800892e:	601c      	str	r4, [r3, #0]
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	601f      	str	r7, [r3, #0]
 8008934:	e6b0      	b.n	8008698 <__gethex+0xf8>
 8008936:	4299      	cmp	r1, r3
 8008938:	f843 cc04 	str.w	ip, [r3, #-4]
 800893c:	d8d9      	bhi.n	80088f2 <__gethex+0x352>
 800893e:	68a3      	ldr	r3, [r4, #8]
 8008940:	459b      	cmp	fp, r3
 8008942:	db17      	blt.n	8008974 <__gethex+0x3d4>
 8008944:	6861      	ldr	r1, [r4, #4]
 8008946:	9801      	ldr	r0, [sp, #4]
 8008948:	3101      	adds	r1, #1
 800894a:	f7fe f843 	bl	80069d4 <_Balloc>
 800894e:	4681      	mov	r9, r0
 8008950:	b918      	cbnz	r0, 800895a <__gethex+0x3ba>
 8008952:	4602      	mov	r2, r0
 8008954:	2184      	movs	r1, #132	@ 0x84
 8008956:	4b19      	ldr	r3, [pc, #100]	@ (80089bc <__gethex+0x41c>)
 8008958:	e6c5      	b.n	80086e6 <__gethex+0x146>
 800895a:	6922      	ldr	r2, [r4, #16]
 800895c:	f104 010c 	add.w	r1, r4, #12
 8008960:	3202      	adds	r2, #2
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	300c      	adds	r0, #12
 8008966:	f7fd f8d4 	bl	8005b12 <memcpy>
 800896a:	4621      	mov	r1, r4
 800896c:	9801      	ldr	r0, [sp, #4]
 800896e:	f7fe f871 	bl	8006a54 <_Bfree>
 8008972:	464c      	mov	r4, r9
 8008974:	6923      	ldr	r3, [r4, #16]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	6122      	str	r2, [r4, #16]
 800897a:	2201      	movs	r2, #1
 800897c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008980:	615a      	str	r2, [r3, #20]
 8008982:	e7be      	b.n	8008902 <__gethex+0x362>
 8008984:	6922      	ldr	r2, [r4, #16]
 8008986:	455a      	cmp	r2, fp
 8008988:	dd0b      	ble.n	80089a2 <__gethex+0x402>
 800898a:	2101      	movs	r1, #1
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff fd9f 	bl	80084d0 <rshift>
 8008992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008996:	3701      	adds	r7, #1
 8008998:	42bb      	cmp	r3, r7
 800899a:	f6ff aee0 	blt.w	800875e <__gethex+0x1be>
 800899e:	2501      	movs	r5, #1
 80089a0:	e7c2      	b.n	8008928 <__gethex+0x388>
 80089a2:	f016 061f 	ands.w	r6, r6, #31
 80089a6:	d0fa      	beq.n	800899e <__gethex+0x3fe>
 80089a8:	4453      	add	r3, sl
 80089aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089ae:	f7fe f903 	bl	8006bb8 <__hi0bits>
 80089b2:	f1c6 0620 	rsb	r6, r6, #32
 80089b6:	42b0      	cmp	r0, r6
 80089b8:	dbe7      	blt.n	800898a <__gethex+0x3ea>
 80089ba:	e7f0      	b.n	800899e <__gethex+0x3fe>
 80089bc:	0800b067 	.word	0x0800b067

080089c0 <L_shift>:
 80089c0:	f1c2 0208 	rsb	r2, r2, #8
 80089c4:	0092      	lsls	r2, r2, #2
 80089c6:	b570      	push	{r4, r5, r6, lr}
 80089c8:	f1c2 0620 	rsb	r6, r2, #32
 80089cc:	6843      	ldr	r3, [r0, #4]
 80089ce:	6804      	ldr	r4, [r0, #0]
 80089d0:	fa03 f506 	lsl.w	r5, r3, r6
 80089d4:	432c      	orrs	r4, r5
 80089d6:	40d3      	lsrs	r3, r2
 80089d8:	6004      	str	r4, [r0, #0]
 80089da:	f840 3f04 	str.w	r3, [r0, #4]!
 80089de:	4288      	cmp	r0, r1
 80089e0:	d3f4      	bcc.n	80089cc <L_shift+0xc>
 80089e2:	bd70      	pop	{r4, r5, r6, pc}

080089e4 <__match>:
 80089e4:	b530      	push	{r4, r5, lr}
 80089e6:	6803      	ldr	r3, [r0, #0]
 80089e8:	3301      	adds	r3, #1
 80089ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ee:	b914      	cbnz	r4, 80089f6 <__match+0x12>
 80089f0:	6003      	str	r3, [r0, #0]
 80089f2:	2001      	movs	r0, #1
 80089f4:	bd30      	pop	{r4, r5, pc}
 80089f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80089fe:	2d19      	cmp	r5, #25
 8008a00:	bf98      	it	ls
 8008a02:	3220      	addls	r2, #32
 8008a04:	42a2      	cmp	r2, r4
 8008a06:	d0f0      	beq.n	80089ea <__match+0x6>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e7f3      	b.n	80089f4 <__match+0x10>

08008a0c <__hexnan>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	2500      	movs	r5, #0
 8008a12:	680b      	ldr	r3, [r1, #0]
 8008a14:	4682      	mov	sl, r0
 8008a16:	115e      	asrs	r6, r3, #5
 8008a18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a1c:	f013 031f 	ands.w	r3, r3, #31
 8008a20:	bf18      	it	ne
 8008a22:	3604      	addne	r6, #4
 8008a24:	1f37      	subs	r7, r6, #4
 8008a26:	4690      	mov	r8, r2
 8008a28:	46b9      	mov	r9, r7
 8008a2a:	463c      	mov	r4, r7
 8008a2c:	46ab      	mov	fp, r5
 8008a2e:	b087      	sub	sp, #28
 8008a30:	6801      	ldr	r1, [r0, #0]
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a38:	9502      	str	r5, [sp, #8]
 8008a3a:	784a      	ldrb	r2, [r1, #1]
 8008a3c:	1c4b      	adds	r3, r1, #1
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	b342      	cbz	r2, 8008a94 <__hexnan+0x88>
 8008a42:	4610      	mov	r0, r2
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	9204      	str	r2, [sp, #16]
 8008a48:	f7ff fd95 	bl	8008576 <__hexdig_fun>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d151      	bne.n	8008af4 <__hexnan+0xe8>
 8008a50:	9a04      	ldr	r2, [sp, #16]
 8008a52:	9905      	ldr	r1, [sp, #20]
 8008a54:	2a20      	cmp	r2, #32
 8008a56:	d818      	bhi.n	8008a8a <__hexnan+0x7e>
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	459b      	cmp	fp, r3
 8008a5c:	dd13      	ble.n	8008a86 <__hexnan+0x7a>
 8008a5e:	454c      	cmp	r4, r9
 8008a60:	d206      	bcs.n	8008a70 <__hexnan+0x64>
 8008a62:	2d07      	cmp	r5, #7
 8008a64:	dc04      	bgt.n	8008a70 <__hexnan+0x64>
 8008a66:	462a      	mov	r2, r5
 8008a68:	4649      	mov	r1, r9
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7ff ffa8 	bl	80089c0 <L_shift>
 8008a70:	4544      	cmp	r4, r8
 8008a72:	d952      	bls.n	8008b1a <__hexnan+0x10e>
 8008a74:	2300      	movs	r3, #0
 8008a76:	f1a4 0904 	sub.w	r9, r4, #4
 8008a7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a7e:	461d      	mov	r5, r3
 8008a80:	464c      	mov	r4, r9
 8008a82:	f8cd b008 	str.w	fp, [sp, #8]
 8008a86:	9903      	ldr	r1, [sp, #12]
 8008a88:	e7d7      	b.n	8008a3a <__hexnan+0x2e>
 8008a8a:	2a29      	cmp	r2, #41	@ 0x29
 8008a8c:	d157      	bne.n	8008b3e <__hexnan+0x132>
 8008a8e:	3102      	adds	r1, #2
 8008a90:	f8ca 1000 	str.w	r1, [sl]
 8008a94:	f1bb 0f00 	cmp.w	fp, #0
 8008a98:	d051      	beq.n	8008b3e <__hexnan+0x132>
 8008a9a:	454c      	cmp	r4, r9
 8008a9c:	d206      	bcs.n	8008aac <__hexnan+0xa0>
 8008a9e:	2d07      	cmp	r5, #7
 8008aa0:	dc04      	bgt.n	8008aac <__hexnan+0xa0>
 8008aa2:	462a      	mov	r2, r5
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff ff8a 	bl	80089c0 <L_shift>
 8008aac:	4544      	cmp	r4, r8
 8008aae:	d936      	bls.n	8008b1e <__hexnan+0x112>
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	f1a8 0204 	sub.w	r2, r8, #4
 8008ab6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008aba:	429f      	cmp	r7, r3
 8008abc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ac0:	d2f9      	bcs.n	8008ab6 <__hexnan+0xaa>
 8008ac2:	1b3b      	subs	r3, r7, r4
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	3304      	adds	r3, #4
 8008aca:	3401      	adds	r4, #1
 8008acc:	3e03      	subs	r6, #3
 8008ace:	42b4      	cmp	r4, r6
 8008ad0:	bf88      	it	hi
 8008ad2:	2304      	movhi	r3, #4
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4443      	add	r3, r8
 8008ad8:	f843 2b04 	str.w	r2, [r3], #4
 8008adc:	429f      	cmp	r7, r3
 8008ade:	d2fb      	bcs.n	8008ad8 <__hexnan+0xcc>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	b91b      	cbnz	r3, 8008aec <__hexnan+0xe0>
 8008ae4:	4547      	cmp	r7, r8
 8008ae6:	d128      	bne.n	8008b3a <__hexnan+0x12e>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	603b      	str	r3, [r7, #0]
 8008aec:	2005      	movs	r0, #5
 8008aee:	b007      	add	sp, #28
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	3501      	adds	r5, #1
 8008af6:	2d08      	cmp	r5, #8
 8008af8:	f10b 0b01 	add.w	fp, fp, #1
 8008afc:	dd06      	ble.n	8008b0c <__hexnan+0x100>
 8008afe:	4544      	cmp	r4, r8
 8008b00:	d9c1      	bls.n	8008a86 <__hexnan+0x7a>
 8008b02:	2300      	movs	r3, #0
 8008b04:	2501      	movs	r5, #1
 8008b06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b0a:	3c04      	subs	r4, #4
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	f000 000f 	and.w	r0, r0, #15
 8008b12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b16:	6020      	str	r0, [r4, #0]
 8008b18:	e7b5      	b.n	8008a86 <__hexnan+0x7a>
 8008b1a:	2508      	movs	r5, #8
 8008b1c:	e7b3      	b.n	8008a86 <__hexnan+0x7a>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d0dd      	beq.n	8008ae0 <__hexnan+0xd4>
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	f1c3 0320 	rsb	r3, r3, #32
 8008b2c:	40da      	lsrs	r2, r3
 8008b2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b32:	4013      	ands	r3, r2
 8008b34:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b38:	e7d2      	b.n	8008ae0 <__hexnan+0xd4>
 8008b3a:	3f04      	subs	r7, #4
 8008b3c:	e7d0      	b.n	8008ae0 <__hexnan+0xd4>
 8008b3e:	2004      	movs	r0, #4
 8008b40:	e7d5      	b.n	8008aee <__hexnan+0xe2>

08008b42 <__ascii_mbtowc>:
 8008b42:	b082      	sub	sp, #8
 8008b44:	b901      	cbnz	r1, 8008b48 <__ascii_mbtowc+0x6>
 8008b46:	a901      	add	r1, sp, #4
 8008b48:	b142      	cbz	r2, 8008b5c <__ascii_mbtowc+0x1a>
 8008b4a:	b14b      	cbz	r3, 8008b60 <__ascii_mbtowc+0x1e>
 8008b4c:	7813      	ldrb	r3, [r2, #0]
 8008b4e:	600b      	str	r3, [r1, #0]
 8008b50:	7812      	ldrb	r2, [r2, #0]
 8008b52:	1e10      	subs	r0, r2, #0
 8008b54:	bf18      	it	ne
 8008b56:	2001      	movne	r0, #1
 8008b58:	b002      	add	sp, #8
 8008b5a:	4770      	bx	lr
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	e7fb      	b.n	8008b58 <__ascii_mbtowc+0x16>
 8008b60:	f06f 0001 	mvn.w	r0, #1
 8008b64:	e7f8      	b.n	8008b58 <__ascii_mbtowc+0x16>

08008b66 <_realloc_r>:
 8008b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b6a:	4680      	mov	r8, r0
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	460c      	mov	r4, r1
 8008b70:	b921      	cbnz	r1, 8008b7c <_realloc_r+0x16>
 8008b72:	4611      	mov	r1, r2
 8008b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b78:	f7fd bea0 	b.w	80068bc <_malloc_r>
 8008b7c:	b92a      	cbnz	r2, 8008b8a <_realloc_r+0x24>
 8008b7e:	f7fd fe2b 	bl	80067d8 <_free_r>
 8008b82:	2400      	movs	r4, #0
 8008b84:	4620      	mov	r0, r4
 8008b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8a:	f000 f840 	bl	8008c0e <_malloc_usable_size_r>
 8008b8e:	4285      	cmp	r5, r0
 8008b90:	4606      	mov	r6, r0
 8008b92:	d802      	bhi.n	8008b9a <_realloc_r+0x34>
 8008b94:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b98:	d8f4      	bhi.n	8008b84 <_realloc_r+0x1e>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	f7fd fe8d 	bl	80068bc <_malloc_r>
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d0ec      	beq.n	8008b82 <_realloc_r+0x1c>
 8008ba8:	42b5      	cmp	r5, r6
 8008baa:	462a      	mov	r2, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	bf28      	it	cs
 8008bb0:	4632      	movcs	r2, r6
 8008bb2:	f7fc ffae 	bl	8005b12 <memcpy>
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4640      	mov	r0, r8
 8008bba:	f7fd fe0d 	bl	80067d8 <_free_r>
 8008bbe:	463c      	mov	r4, r7
 8008bc0:	e7e0      	b.n	8008b84 <_realloc_r+0x1e>

08008bc2 <__ascii_wctomb>:
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	b141      	cbz	r1, 8008bda <__ascii_wctomb+0x18>
 8008bc8:	2aff      	cmp	r2, #255	@ 0xff
 8008bca:	d904      	bls.n	8008bd6 <__ascii_wctomb+0x14>
 8008bcc:	228a      	movs	r2, #138	@ 0x8a
 8008bce:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	4770      	bx	lr
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	700a      	strb	r2, [r1, #0]
 8008bda:	4770      	bx	lr

08008bdc <fiprintf>:
 8008bdc:	b40e      	push	{r1, r2, r3}
 8008bde:	b503      	push	{r0, r1, lr}
 8008be0:	4601      	mov	r1, r0
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	4805      	ldr	r0, [pc, #20]	@ (8008bfc <fiprintf+0x20>)
 8008be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f000 f83d 	bl	8008c6c <_vfiprintf_r>
 8008bf2:	b002      	add	sp, #8
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	200000b0 	.word	0x200000b0

08008c00 <abort>:
 8008c00:	2006      	movs	r0, #6
 8008c02:	b508      	push	{r3, lr}
 8008c04:	f000 fa06 	bl	8009014 <raise>
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7f9 fb6a 	bl	80022e2 <_exit>

08008c0e <_malloc_usable_size_r>:
 8008c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c12:	1f18      	subs	r0, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfbc      	itt	lt
 8008c18:	580b      	ldrlt	r3, [r1, r0]
 8008c1a:	18c0      	addlt	r0, r0, r3
 8008c1c:	4770      	bx	lr

08008c1e <__sfputc_r>:
 8008c1e:	6893      	ldr	r3, [r2, #8]
 8008c20:	b410      	push	{r4}
 8008c22:	3b01      	subs	r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	6093      	str	r3, [r2, #8]
 8008c28:	da07      	bge.n	8008c3a <__sfputc_r+0x1c>
 8008c2a:	6994      	ldr	r4, [r2, #24]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	db01      	blt.n	8008c34 <__sfputc_r+0x16>
 8008c30:	290a      	cmp	r1, #10
 8008c32:	d102      	bne.n	8008c3a <__sfputc_r+0x1c>
 8008c34:	bc10      	pop	{r4}
 8008c36:	f000 b931 	b.w	8008e9c <__swbuf_r>
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	1c58      	adds	r0, r3, #1
 8008c3e:	6010      	str	r0, [r2, #0]
 8008c40:	7019      	strb	r1, [r3, #0]
 8008c42:	4608      	mov	r0, r1
 8008c44:	bc10      	pop	{r4}
 8008c46:	4770      	bx	lr

08008c48 <__sfputs_r>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	4606      	mov	r6, r0
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	4614      	mov	r4, r2
 8008c50:	18d5      	adds	r5, r2, r3
 8008c52:	42ac      	cmp	r4, r5
 8008c54:	d101      	bne.n	8008c5a <__sfputs_r+0x12>
 8008c56:	2000      	movs	r0, #0
 8008c58:	e007      	b.n	8008c6a <__sfputs_r+0x22>
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c62:	f7ff ffdc 	bl	8008c1e <__sfputc_r>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d1f3      	bne.n	8008c52 <__sfputs_r+0xa>
 8008c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c6c <_vfiprintf_r>:
 8008c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	460d      	mov	r5, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	4698      	mov	r8, r3
 8008c76:	4606      	mov	r6, r0
 8008c78:	b09d      	sub	sp, #116	@ 0x74
 8008c7a:	b118      	cbz	r0, 8008c84 <_vfiprintf_r+0x18>
 8008c7c:	6a03      	ldr	r3, [r0, #32]
 8008c7e:	b90b      	cbnz	r3, 8008c84 <_vfiprintf_r+0x18>
 8008c80:	f7fc fe06 	bl	8005890 <__sinit>
 8008c84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c86:	07d9      	lsls	r1, r3, #31
 8008c88:	d405      	bmi.n	8008c96 <_vfiprintf_r+0x2a>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	059a      	lsls	r2, r3, #22
 8008c8e:	d402      	bmi.n	8008c96 <_vfiprintf_r+0x2a>
 8008c90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c92:	f7fc ff2e 	bl	8005af2 <__retarget_lock_acquire_recursive>
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	071b      	lsls	r3, r3, #28
 8008c9a:	d501      	bpl.n	8008ca0 <_vfiprintf_r+0x34>
 8008c9c:	692b      	ldr	r3, [r5, #16]
 8008c9e:	b99b      	cbnz	r3, 8008cc8 <_vfiprintf_r+0x5c>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 f938 	bl	8008f18 <__swsetup_r>
 8008ca8:	b170      	cbz	r0, 8008cc8 <_vfiprintf_r+0x5c>
 8008caa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cac:	07dc      	lsls	r4, r3, #31
 8008cae:	d504      	bpl.n	8008cba <_vfiprintf_r+0x4e>
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	b01d      	add	sp, #116	@ 0x74
 8008cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cba:	89ab      	ldrh	r3, [r5, #12]
 8008cbc:	0598      	lsls	r0, r3, #22
 8008cbe:	d4f7      	bmi.n	8008cb0 <_vfiprintf_r+0x44>
 8008cc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc2:	f7fc ff17 	bl	8005af4 <__retarget_lock_release_recursive>
 8008cc6:	e7f3      	b.n	8008cb0 <_vfiprintf_r+0x44>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ccc:	2320      	movs	r3, #32
 8008cce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cd2:	2330      	movs	r3, #48	@ 0x30
 8008cd4:	f04f 0901 	mov.w	r9, #1
 8008cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cdc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e88 <_vfiprintf_r+0x21c>
 8008ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	469a      	mov	sl, r3
 8008ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cec:	b10a      	cbz	r2, 8008cf2 <_vfiprintf_r+0x86>
 8008cee:	2a25      	cmp	r2, #37	@ 0x25
 8008cf0:	d1f9      	bne.n	8008ce6 <_vfiprintf_r+0x7a>
 8008cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf6:	d00b      	beq.n	8008d10 <_vfiprintf_r+0xa4>
 8008cf8:	465b      	mov	r3, fp
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ffa2 	bl	8008c48 <__sfputs_r>
 8008d04:	3001      	adds	r0, #1
 8008d06:	f000 80a7 	beq.w	8008e58 <_vfiprintf_r+0x1ec>
 8008d0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d0c:	445a      	add	r2, fp
 8008d0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d10:	f89a 3000 	ldrb.w	r3, [sl]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 809f 	beq.w	8008e58 <_vfiprintf_r+0x1ec>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d24:	f10a 0a01 	add.w	sl, sl, #1
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d30:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d32:	4654      	mov	r4, sl
 8008d34:	2205      	movs	r2, #5
 8008d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d3a:	4853      	ldr	r0, [pc, #332]	@ (8008e88 <_vfiprintf_r+0x21c>)
 8008d3c:	f7fc fedb 	bl	8005af6 <memchr>
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	b9d8      	cbnz	r0, 8008d7c <_vfiprintf_r+0x110>
 8008d44:	06d1      	lsls	r1, r2, #27
 8008d46:	bf44      	itt	mi
 8008d48:	2320      	movmi	r3, #32
 8008d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4e:	0713      	lsls	r3, r2, #28
 8008d50:	bf44      	itt	mi
 8008d52:	232b      	movmi	r3, #43	@ 0x2b
 8008d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d58:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5e:	d015      	beq.n	8008d8c <_vfiprintf_r+0x120>
 8008d60:	4654      	mov	r4, sl
 8008d62:	2000      	movs	r0, #0
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	9a07      	ldr	r2, [sp, #28]
 8008d6a:	4621      	mov	r1, r4
 8008d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d70:	3b30      	subs	r3, #48	@ 0x30
 8008d72:	2b09      	cmp	r3, #9
 8008d74:	d94b      	bls.n	8008e0e <_vfiprintf_r+0x1a2>
 8008d76:	b1b0      	cbz	r0, 8008da6 <_vfiprintf_r+0x13a>
 8008d78:	9207      	str	r2, [sp, #28]
 8008d7a:	e014      	b.n	8008da6 <_vfiprintf_r+0x13a>
 8008d7c:	eba0 0308 	sub.w	r3, r0, r8
 8008d80:	fa09 f303 	lsl.w	r3, r9, r3
 8008d84:	4313      	orrs	r3, r2
 8008d86:	46a2      	mov	sl, r4
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	e7d2      	b.n	8008d32 <_vfiprintf_r+0xc6>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	1d19      	adds	r1, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	9103      	str	r1, [sp, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bfbb      	ittet	lt
 8008d98:	425b      	neglt	r3, r3
 8008d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9e:	9307      	strge	r3, [sp, #28]
 8008da0:	9307      	strlt	r3, [sp, #28]
 8008da2:	bfb8      	it	lt
 8008da4:	9204      	strlt	r2, [sp, #16]
 8008da6:	7823      	ldrb	r3, [r4, #0]
 8008da8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008daa:	d10a      	bne.n	8008dc2 <_vfiprintf_r+0x156>
 8008dac:	7863      	ldrb	r3, [r4, #1]
 8008dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8008db0:	d132      	bne.n	8008e18 <_vfiprintf_r+0x1ac>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	3402      	adds	r4, #2
 8008db6:	1d1a      	adds	r2, r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	9203      	str	r2, [sp, #12]
 8008dbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc0:	9305      	str	r3, [sp, #20]
 8008dc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e8c <_vfiprintf_r+0x220>
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	4650      	mov	r0, sl
 8008dca:	7821      	ldrb	r1, [r4, #0]
 8008dcc:	f7fc fe93 	bl	8005af6 <memchr>
 8008dd0:	b138      	cbz	r0, 8008de2 <_vfiprintf_r+0x176>
 8008dd2:	2240      	movs	r2, #64	@ 0x40
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	eba0 000a 	sub.w	r0, r0, sl
 8008dda:	4082      	lsls	r2, r0
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	3401      	adds	r4, #1
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de6:	2206      	movs	r2, #6
 8008de8:	4829      	ldr	r0, [pc, #164]	@ (8008e90 <_vfiprintf_r+0x224>)
 8008dea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dee:	f7fc fe82 	bl	8005af6 <memchr>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d03f      	beq.n	8008e76 <_vfiprintf_r+0x20a>
 8008df6:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <_vfiprintf_r+0x228>)
 8008df8:	bb1b      	cbnz	r3, 8008e42 <_vfiprintf_r+0x1d6>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	f023 0307 	bic.w	r3, r3, #7
 8008e02:	3308      	adds	r3, #8
 8008e04:	9303      	str	r3, [sp, #12]
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	443b      	add	r3, r7
 8008e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0c:	e76a      	b.n	8008ce4 <_vfiprintf_r+0x78>
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e16:	e7a8      	b.n	8008d6a <_vfiprintf_r+0xfe>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f04f 0c0a 	mov.w	ip, #10
 8008e1e:	4619      	mov	r1, r3
 8008e20:	3401      	adds	r4, #1
 8008e22:	9305      	str	r3, [sp, #20]
 8008e24:	4620      	mov	r0, r4
 8008e26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e2a:	3a30      	subs	r2, #48	@ 0x30
 8008e2c:	2a09      	cmp	r2, #9
 8008e2e:	d903      	bls.n	8008e38 <_vfiprintf_r+0x1cc>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d0c6      	beq.n	8008dc2 <_vfiprintf_r+0x156>
 8008e34:	9105      	str	r1, [sp, #20]
 8008e36:	e7c4      	b.n	8008dc2 <_vfiprintf_r+0x156>
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e40:	e7f0      	b.n	8008e24 <_vfiprintf_r+0x1b8>
 8008e42:	ab03      	add	r3, sp, #12
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	462a      	mov	r2, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <_vfiprintf_r+0x22c>)
 8008e4c:	a904      	add	r1, sp, #16
 8008e4e:	f7fb fec5 	bl	8004bdc <_printf_float>
 8008e52:	4607      	mov	r7, r0
 8008e54:	1c78      	adds	r0, r7, #1
 8008e56:	d1d6      	bne.n	8008e06 <_vfiprintf_r+0x19a>
 8008e58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e5a:	07d9      	lsls	r1, r3, #31
 8008e5c:	d405      	bmi.n	8008e6a <_vfiprintf_r+0x1fe>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	059a      	lsls	r2, r3, #22
 8008e62:	d402      	bmi.n	8008e6a <_vfiprintf_r+0x1fe>
 8008e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e66:	f7fc fe45 	bl	8005af4 <__retarget_lock_release_recursive>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	065b      	lsls	r3, r3, #25
 8008e6e:	f53f af1f 	bmi.w	8008cb0 <_vfiprintf_r+0x44>
 8008e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e74:	e71e      	b.n	8008cb4 <_vfiprintf_r+0x48>
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <_vfiprintf_r+0x22c>)
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	f7fc f949 	bl	8005118 <_printf_i>
 8008e86:	e7e4      	b.n	8008e52 <_vfiprintf_r+0x1e6>
 8008e88:	0800b329 	.word	0x0800b329
 8008e8c:	0800b32f 	.word	0x0800b32f
 8008e90:	0800b333 	.word	0x0800b333
 8008e94:	08004bdd 	.word	0x08004bdd
 8008e98:	08008c49 	.word	0x08008c49

08008e9c <__swbuf_r>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	460e      	mov	r6, r1
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4605      	mov	r5, r0
 8008ea4:	b118      	cbz	r0, 8008eae <__swbuf_r+0x12>
 8008ea6:	6a03      	ldr	r3, [r0, #32]
 8008ea8:	b90b      	cbnz	r3, 8008eae <__swbuf_r+0x12>
 8008eaa:	f7fc fcf1 	bl	8005890 <__sinit>
 8008eae:	69a3      	ldr	r3, [r4, #24]
 8008eb0:	60a3      	str	r3, [r4, #8]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	071a      	lsls	r2, r3, #28
 8008eb6:	d501      	bpl.n	8008ebc <__swbuf_r+0x20>
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	b943      	cbnz	r3, 8008ece <__swbuf_r+0x32>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f82a 	bl	8008f18 <__swsetup_r>
 8008ec4:	b118      	cbz	r0, 8008ece <__swbuf_r+0x32>
 8008ec6:	f04f 37ff 	mov.w	r7, #4294967295
 8008eca:	4638      	mov	r0, r7
 8008ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	6922      	ldr	r2, [r4, #16]
 8008ed2:	b2f6      	uxtb	r6, r6
 8008ed4:	1a98      	subs	r0, r3, r2
 8008ed6:	6963      	ldr	r3, [r4, #20]
 8008ed8:	4637      	mov	r7, r6
 8008eda:	4283      	cmp	r3, r0
 8008edc:	dc05      	bgt.n	8008eea <__swbuf_r+0x4e>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7ff fa73 	bl	80083cc <_fflush_r>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d1ed      	bne.n	8008ec6 <__swbuf_r+0x2a>
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	60a3      	str	r3, [r4, #8]
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	6022      	str	r2, [r4, #0]
 8008ef6:	701e      	strb	r6, [r3, #0]
 8008ef8:	6962      	ldr	r2, [r4, #20]
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d004      	beq.n	8008f0a <__swbuf_r+0x6e>
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	07db      	lsls	r3, r3, #31
 8008f04:	d5e1      	bpl.n	8008eca <__swbuf_r+0x2e>
 8008f06:	2e0a      	cmp	r6, #10
 8008f08:	d1df      	bne.n	8008eca <__swbuf_r+0x2e>
 8008f0a:	4621      	mov	r1, r4
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f7ff fa5d 	bl	80083cc <_fflush_r>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0d9      	beq.n	8008eca <__swbuf_r+0x2e>
 8008f16:	e7d6      	b.n	8008ec6 <__swbuf_r+0x2a>

08008f18 <__swsetup_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4b29      	ldr	r3, [pc, #164]	@ (8008fc0 <__swsetup_r+0xa8>)
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	6818      	ldr	r0, [r3, #0]
 8008f20:	460c      	mov	r4, r1
 8008f22:	b118      	cbz	r0, 8008f2c <__swsetup_r+0x14>
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b90b      	cbnz	r3, 8008f2c <__swsetup_r+0x14>
 8008f28:	f7fc fcb2 	bl	8005890 <__sinit>
 8008f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f30:	0719      	lsls	r1, r3, #28
 8008f32:	d422      	bmi.n	8008f7a <__swsetup_r+0x62>
 8008f34:	06da      	lsls	r2, r3, #27
 8008f36:	d407      	bmi.n	8008f48 <__swsetup_r+0x30>
 8008f38:	2209      	movs	r2, #9
 8008f3a:	602a      	str	r2, [r5, #0]
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	e033      	b.n	8008fb0 <__swsetup_r+0x98>
 8008f48:	0758      	lsls	r0, r3, #29
 8008f4a:	d512      	bpl.n	8008f72 <__swsetup_r+0x5a>
 8008f4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f4e:	b141      	cbz	r1, 8008f62 <__swsetup_r+0x4a>
 8008f50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f54:	4299      	cmp	r1, r3
 8008f56:	d002      	beq.n	8008f5e <__swsetup_r+0x46>
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7fd fc3d 	bl	80067d8 <_free_r>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f68:	81a3      	strh	r3, [r4, #12]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	6923      	ldr	r3, [r4, #16]
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f043 0308 	orr.w	r3, r3, #8
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	b94b      	cbnz	r3, 8008f92 <__swsetup_r+0x7a>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f88:	d003      	beq.n	8008f92 <__swsetup_r+0x7a>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f000 f882 	bl	8009096 <__smakebuf_r>
 8008f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f96:	f013 0201 	ands.w	r2, r3, #1
 8008f9a:	d00a      	beq.n	8008fb2 <__swsetup_r+0x9a>
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	60a2      	str	r2, [r4, #8]
 8008fa0:	6962      	ldr	r2, [r4, #20]
 8008fa2:	4252      	negs	r2, r2
 8008fa4:	61a2      	str	r2, [r4, #24]
 8008fa6:	6922      	ldr	r2, [r4, #16]
 8008fa8:	b942      	cbnz	r2, 8008fbc <__swsetup_r+0xa4>
 8008faa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fae:	d1c5      	bne.n	8008f3c <__swsetup_r+0x24>
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
 8008fb2:	0799      	lsls	r1, r3, #30
 8008fb4:	bf58      	it	pl
 8008fb6:	6962      	ldrpl	r2, [r4, #20]
 8008fb8:	60a2      	str	r2, [r4, #8]
 8008fba:	e7f4      	b.n	8008fa6 <__swsetup_r+0x8e>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e7f7      	b.n	8008fb0 <__swsetup_r+0x98>
 8008fc0:	200000b0 	.word	0x200000b0

08008fc4 <_raise_r>:
 8008fc4:	291f      	cmp	r1, #31
 8008fc6:	b538      	push	{r3, r4, r5, lr}
 8008fc8:	4605      	mov	r5, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	d904      	bls.n	8008fd8 <_raise_r+0x14>
 8008fce:	2316      	movs	r3, #22
 8008fd0:	6003      	str	r3, [r0, #0]
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fda:	b112      	cbz	r2, 8008fe2 <_raise_r+0x1e>
 8008fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <_raise_r+0x32>
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	f000 f830 	bl	8009048 <_getpid_r>
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4601      	mov	r1, r0
 8008fec:	4628      	mov	r0, r5
 8008fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff2:	f000 b817 	b.w	8009024 <_kill_r>
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d00a      	beq.n	8009010 <_raise_r+0x4c>
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	d103      	bne.n	8009006 <_raise_r+0x42>
 8008ffe:	2316      	movs	r3, #22
 8009000:	6003      	str	r3, [r0, #0]
 8009002:	2001      	movs	r0, #1
 8009004:	e7e7      	b.n	8008fd6 <_raise_r+0x12>
 8009006:	2100      	movs	r1, #0
 8009008:	4620      	mov	r0, r4
 800900a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800900e:	4798      	blx	r3
 8009010:	2000      	movs	r0, #0
 8009012:	e7e0      	b.n	8008fd6 <_raise_r+0x12>

08009014 <raise>:
 8009014:	4b02      	ldr	r3, [pc, #8]	@ (8009020 <raise+0xc>)
 8009016:	4601      	mov	r1, r0
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f7ff bfd3 	b.w	8008fc4 <_raise_r>
 800901e:	bf00      	nop
 8009020:	200000b0 	.word	0x200000b0

08009024 <_kill_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	2300      	movs	r3, #0
 8009028:	4d06      	ldr	r5, [pc, #24]	@ (8009044 <_kill_r+0x20>)
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	602b      	str	r3, [r5, #0]
 8009032:	f7f9 f946 	bl	80022c2 <_kill>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	d102      	bne.n	8009040 <_kill_r+0x1c>
 800903a:	682b      	ldr	r3, [r5, #0]
 800903c:	b103      	cbz	r3, 8009040 <_kill_r+0x1c>
 800903e:	6023      	str	r3, [r4, #0]
 8009040:	bd38      	pop	{r3, r4, r5, pc}
 8009042:	bf00      	nop
 8009044:	200008d4 	.word	0x200008d4

08009048 <_getpid_r>:
 8009048:	f7f9 b934 	b.w	80022b4 <_getpid>

0800904c <__swhatbuf_r>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	4615      	mov	r5, r2
 8009056:	2900      	cmp	r1, #0
 8009058:	461e      	mov	r6, r3
 800905a:	b096      	sub	sp, #88	@ 0x58
 800905c:	da0c      	bge.n	8009078 <__swhatbuf_r+0x2c>
 800905e:	89a3      	ldrh	r3, [r4, #12]
 8009060:	2100      	movs	r1, #0
 8009062:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009066:	bf14      	ite	ne
 8009068:	2340      	movne	r3, #64	@ 0x40
 800906a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800906e:	2000      	movs	r0, #0
 8009070:	6031      	str	r1, [r6, #0]
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	b016      	add	sp, #88	@ 0x58
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	466a      	mov	r2, sp
 800907a:	f000 f849 	bl	8009110 <_fstat_r>
 800907e:	2800      	cmp	r0, #0
 8009080:	dbed      	blt.n	800905e <__swhatbuf_r+0x12>
 8009082:	9901      	ldr	r1, [sp, #4]
 8009084:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009088:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800908c:	4259      	negs	r1, r3
 800908e:	4159      	adcs	r1, r3
 8009090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009094:	e7eb      	b.n	800906e <__swhatbuf_r+0x22>

08009096 <__smakebuf_r>:
 8009096:	898b      	ldrh	r3, [r1, #12]
 8009098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909a:	079d      	lsls	r5, r3, #30
 800909c:	4606      	mov	r6, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	d507      	bpl.n	80090b2 <__smakebuf_r+0x1c>
 80090a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	6123      	str	r3, [r4, #16]
 80090aa:	2301      	movs	r3, #1
 80090ac:	6163      	str	r3, [r4, #20]
 80090ae:	b003      	add	sp, #12
 80090b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090b2:	466a      	mov	r2, sp
 80090b4:	ab01      	add	r3, sp, #4
 80090b6:	f7ff ffc9 	bl	800904c <__swhatbuf_r>
 80090ba:	9f00      	ldr	r7, [sp, #0]
 80090bc:	4605      	mov	r5, r0
 80090be:	4639      	mov	r1, r7
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7fd fbfb 	bl	80068bc <_malloc_r>
 80090c6:	b948      	cbnz	r0, 80090dc <__smakebuf_r+0x46>
 80090c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090cc:	059a      	lsls	r2, r3, #22
 80090ce:	d4ee      	bmi.n	80090ae <__smakebuf_r+0x18>
 80090d0:	f023 0303 	bic.w	r3, r3, #3
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	e7e2      	b.n	80090a2 <__smakebuf_r+0xc>
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	9b01      	ldr	r3, [sp, #4]
 80090ea:	6020      	str	r0, [r4, #0]
 80090ec:	b15b      	cbz	r3, 8009106 <__smakebuf_r+0x70>
 80090ee:	4630      	mov	r0, r6
 80090f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090f4:	f000 f81e 	bl	8009134 <_isatty_r>
 80090f8:	b128      	cbz	r0, 8009106 <__smakebuf_r+0x70>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	f043 0301 	orr.w	r3, r3, #1
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	431d      	orrs	r5, r3
 800910a:	81a5      	strh	r5, [r4, #12]
 800910c:	e7cf      	b.n	80090ae <__smakebuf_r+0x18>
	...

08009110 <_fstat_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	2300      	movs	r3, #0
 8009114:	4d06      	ldr	r5, [pc, #24]	@ (8009130 <_fstat_r+0x20>)
 8009116:	4604      	mov	r4, r0
 8009118:	4608      	mov	r0, r1
 800911a:	4611      	mov	r1, r2
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	f7f9 f92f 	bl	8002380 <_fstat>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d102      	bne.n	800912c <_fstat_r+0x1c>
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	b103      	cbz	r3, 800912c <_fstat_r+0x1c>
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	bd38      	pop	{r3, r4, r5, pc}
 800912e:	bf00      	nop
 8009130:	200008d4 	.word	0x200008d4

08009134 <_isatty_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	2300      	movs	r3, #0
 8009138:	4d05      	ldr	r5, [pc, #20]	@ (8009150 <_isatty_r+0x1c>)
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f9 f92d 	bl	800239e <_isatty>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_isatty_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_isatty_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	200008d4 	.word	0x200008d4

08009154 <atan2>:
 8009154:	f000 bc94 	b.w	8009a80 <__ieee754_atan2>

08009158 <sqrt>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	f000 fa3f 	bl	80095e0 <__ieee754_sqrt>
 8009162:	4632      	mov	r2, r6
 8009164:	4604      	mov	r4, r0
 8009166:	460d      	mov	r5, r1
 8009168:	463b      	mov	r3, r7
 800916a:	4630      	mov	r0, r6
 800916c:	4639      	mov	r1, r7
 800916e:	f7f7 fc4d 	bl	8000a0c <__aeabi_dcmpun>
 8009172:	b990      	cbnz	r0, 800919a <sqrt+0x42>
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 fc1e 	bl	80009bc <__aeabi_dcmplt>
 8009180:	b158      	cbz	r0, 800919a <sqrt+0x42>
 8009182:	f7fc fc8b 	bl	8005a9c <__errno>
 8009186:	2321      	movs	r3, #33	@ 0x21
 8009188:	2200      	movs	r2, #0
 800918a:	6003      	str	r3, [r0, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	4610      	mov	r0, r2
 8009190:	4619      	mov	r1, r3
 8009192:	f7f7 facb 	bl	800072c <__aeabi_ddiv>
 8009196:	4604      	mov	r4, r0
 8009198:	460d      	mov	r5, r1
 800919a:	4620      	mov	r0, r4
 800919c:	4629      	mov	r1, r5
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091a0 <atan>:
 80091a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4bbc      	ldr	r3, [pc, #752]	@ (8009498 <atan+0x2f8>)
 80091a6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80091aa:	429e      	cmp	r6, r3
 80091ac:	4604      	mov	r4, r0
 80091ae:	460d      	mov	r5, r1
 80091b0:	468b      	mov	fp, r1
 80091b2:	d918      	bls.n	80091e6 <atan+0x46>
 80091b4:	4bb9      	ldr	r3, [pc, #740]	@ (800949c <atan+0x2fc>)
 80091b6:	429e      	cmp	r6, r3
 80091b8:	d801      	bhi.n	80091be <atan+0x1e>
 80091ba:	d109      	bne.n	80091d0 <atan+0x30>
 80091bc:	b140      	cbz	r0, 80091d0 <atan+0x30>
 80091be:	4622      	mov	r2, r4
 80091c0:	462b      	mov	r3, r5
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f6 ffd1 	bl	800016c <__adddf3>
 80091ca:	4604      	mov	r4, r0
 80091cc:	460d      	mov	r5, r1
 80091ce:	e006      	b.n	80091de <atan+0x3e>
 80091d0:	f1bb 0f00 	cmp.w	fp, #0
 80091d4:	f340 8123 	ble.w	800941e <atan+0x27e>
 80091d8:	a593      	add	r5, pc, #588	@ (adr r5, 8009428 <atan+0x288>)
 80091da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e6:	4bae      	ldr	r3, [pc, #696]	@ (80094a0 <atan+0x300>)
 80091e8:	429e      	cmp	r6, r3
 80091ea:	d811      	bhi.n	8009210 <atan+0x70>
 80091ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80091f0:	429e      	cmp	r6, r3
 80091f2:	d80a      	bhi.n	800920a <atan+0x6a>
 80091f4:	a38e      	add	r3, pc, #568	@ (adr r3, 8009430 <atan+0x290>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f6 ffb7 	bl	800016c <__adddf3>
 80091fe:	2200      	movs	r2, #0
 8009200:	4ba8      	ldr	r3, [pc, #672]	@ (80094a4 <atan+0x304>)
 8009202:	f7f7 fbf9 	bl	80009f8 <__aeabi_dcmpgt>
 8009206:	2800      	cmp	r0, #0
 8009208:	d1e9      	bne.n	80091de <atan+0x3e>
 800920a:	f04f 3aff 	mov.w	sl, #4294967295
 800920e:	e027      	b.n	8009260 <atan+0xc0>
 8009210:	f000 f99c 	bl	800954c <fabs>
 8009214:	4ba4      	ldr	r3, [pc, #656]	@ (80094a8 <atan+0x308>)
 8009216:	4604      	mov	r4, r0
 8009218:	429e      	cmp	r6, r3
 800921a:	460d      	mov	r5, r1
 800921c:	f200 80b8 	bhi.w	8009390 <atan+0x1f0>
 8009220:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009224:	429e      	cmp	r6, r3
 8009226:	f200 809c 	bhi.w	8009362 <atan+0x1c2>
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	f7f6 ff9d 	bl	800016c <__adddf3>
 8009232:	2200      	movs	r2, #0
 8009234:	4b9b      	ldr	r3, [pc, #620]	@ (80094a4 <atan+0x304>)
 8009236:	f7f6 ff97 	bl	8000168 <__aeabi_dsub>
 800923a:	2200      	movs	r2, #0
 800923c:	4606      	mov	r6, r0
 800923e:	460f      	mov	r7, r1
 8009240:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009244:	4620      	mov	r0, r4
 8009246:	4629      	mov	r1, r5
 8009248:	f7f6 ff90 	bl	800016c <__adddf3>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 fa6a 	bl	800072c <__aeabi_ddiv>
 8009258:	f04f 0a00 	mov.w	sl, #0
 800925c:	4604      	mov	r4, r0
 800925e:	460d      	mov	r5, r1
 8009260:	4622      	mov	r2, r4
 8009262:	462b      	mov	r3, r5
 8009264:	4620      	mov	r0, r4
 8009266:	4629      	mov	r1, r5
 8009268:	f7f7 f936 	bl	80004d8 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4680      	mov	r8, r0
 8009272:	4689      	mov	r9, r1
 8009274:	f7f7 f930 	bl	80004d8 <__aeabi_dmul>
 8009278:	a36f      	add	r3, pc, #444	@ (adr r3, 8009438 <atan+0x298>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	f7f7 f929 	bl	80004d8 <__aeabi_dmul>
 8009286:	a36e      	add	r3, pc, #440	@ (adr r3, 8009440 <atan+0x2a0>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f6 ff6e 	bl	800016c <__adddf3>
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	f7f7 f920 	bl	80004d8 <__aeabi_dmul>
 8009298:	a36b      	add	r3, pc, #428	@ (adr r3, 8009448 <atan+0x2a8>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f6 ff65 	bl	800016c <__adddf3>
 80092a2:	4632      	mov	r2, r6
 80092a4:	463b      	mov	r3, r7
 80092a6:	f7f7 f917 	bl	80004d8 <__aeabi_dmul>
 80092aa:	a369      	add	r3, pc, #420	@ (adr r3, 8009450 <atan+0x2b0>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ff5c 	bl	800016c <__adddf3>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f7 f90e 	bl	80004d8 <__aeabi_dmul>
 80092bc:	a366      	add	r3, pc, #408	@ (adr r3, 8009458 <atan+0x2b8>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f6 ff53 	bl	800016c <__adddf3>
 80092c6:	4632      	mov	r2, r6
 80092c8:	463b      	mov	r3, r7
 80092ca:	f7f7 f905 	bl	80004d8 <__aeabi_dmul>
 80092ce:	a364      	add	r3, pc, #400	@ (adr r3, 8009460 <atan+0x2c0>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f6 ff4a 	bl	800016c <__adddf3>
 80092d8:	4642      	mov	r2, r8
 80092da:	464b      	mov	r3, r9
 80092dc:	f7f7 f8fc 	bl	80004d8 <__aeabi_dmul>
 80092e0:	a361      	add	r3, pc, #388	@ (adr r3, 8009468 <atan+0x2c8>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	4680      	mov	r8, r0
 80092e8:	4689      	mov	r9, r1
 80092ea:	4630      	mov	r0, r6
 80092ec:	4639      	mov	r1, r7
 80092ee:	f7f7 f8f3 	bl	80004d8 <__aeabi_dmul>
 80092f2:	a35f      	add	r3, pc, #380	@ (adr r3, 8009470 <atan+0x2d0>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f6 ff36 	bl	8000168 <__aeabi_dsub>
 80092fc:	4632      	mov	r2, r6
 80092fe:	463b      	mov	r3, r7
 8009300:	f7f7 f8ea 	bl	80004d8 <__aeabi_dmul>
 8009304:	a35c      	add	r3, pc, #368	@ (adr r3, 8009478 <atan+0x2d8>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ff2d 	bl	8000168 <__aeabi_dsub>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	f7f7 f8e1 	bl	80004d8 <__aeabi_dmul>
 8009316:	a35a      	add	r3, pc, #360	@ (adr r3, 8009480 <atan+0x2e0>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ff24 	bl	8000168 <__aeabi_dsub>
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	f7f7 f8d8 	bl	80004d8 <__aeabi_dmul>
 8009328:	a357      	add	r3, pc, #348	@ (adr r3, 8009488 <atan+0x2e8>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f6 ff1b 	bl	8000168 <__aeabi_dsub>
 8009332:	4632      	mov	r2, r6
 8009334:	463b      	mov	r3, r7
 8009336:	f7f7 f8cf 	bl	80004d8 <__aeabi_dmul>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4640      	mov	r0, r8
 8009340:	4649      	mov	r1, r9
 8009342:	f7f6 ff13 	bl	800016c <__adddf3>
 8009346:	4622      	mov	r2, r4
 8009348:	462b      	mov	r3, r5
 800934a:	f7f7 f8c5 	bl	80004d8 <__aeabi_dmul>
 800934e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	d144      	bne.n	80093e2 <atan+0x242>
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f6 ff04 	bl	8000168 <__aeabi_dsub>
 8009360:	e733      	b.n	80091ca <atan+0x2a>
 8009362:	2200      	movs	r2, #0
 8009364:	4b4f      	ldr	r3, [pc, #316]	@ (80094a4 <atan+0x304>)
 8009366:	f7f6 feff 	bl	8000168 <__aeabi_dsub>
 800936a:	2200      	movs	r2, #0
 800936c:	4606      	mov	r6, r0
 800936e:	460f      	mov	r7, r1
 8009370:	4620      	mov	r0, r4
 8009372:	4629      	mov	r1, r5
 8009374:	4b4b      	ldr	r3, [pc, #300]	@ (80094a4 <atan+0x304>)
 8009376:	f7f6 fef9 	bl	800016c <__adddf3>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 f9d3 	bl	800072c <__aeabi_ddiv>
 8009386:	f04f 0a01 	mov.w	sl, #1
 800938a:	4604      	mov	r4, r0
 800938c:	460d      	mov	r5, r1
 800938e:	e767      	b.n	8009260 <atan+0xc0>
 8009390:	4b46      	ldr	r3, [pc, #280]	@ (80094ac <atan+0x30c>)
 8009392:	429e      	cmp	r6, r3
 8009394:	d21a      	bcs.n	80093cc <atan+0x22c>
 8009396:	2200      	movs	r2, #0
 8009398:	4b45      	ldr	r3, [pc, #276]	@ (80094b0 <atan+0x310>)
 800939a:	f7f6 fee5 	bl	8000168 <__aeabi_dsub>
 800939e:	2200      	movs	r2, #0
 80093a0:	4606      	mov	r6, r0
 80093a2:	460f      	mov	r7, r1
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	4b41      	ldr	r3, [pc, #260]	@ (80094b0 <atan+0x310>)
 80093aa:	f7f7 f895 	bl	80004d8 <__aeabi_dmul>
 80093ae:	2200      	movs	r2, #0
 80093b0:	4b3c      	ldr	r3, [pc, #240]	@ (80094a4 <atan+0x304>)
 80093b2:	f7f6 fedb 	bl	800016c <__adddf3>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4630      	mov	r0, r6
 80093bc:	4639      	mov	r1, r7
 80093be:	f7f7 f9b5 	bl	800072c <__aeabi_ddiv>
 80093c2:	f04f 0a02 	mov.w	sl, #2
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	e749      	b.n	8009260 <atan+0xc0>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	2000      	movs	r0, #0
 80093d2:	4938      	ldr	r1, [pc, #224]	@ (80094b4 <atan+0x314>)
 80093d4:	f7f7 f9aa 	bl	800072c <__aeabi_ddiv>
 80093d8:	f04f 0a03 	mov.w	sl, #3
 80093dc:	4604      	mov	r4, r0
 80093de:	460d      	mov	r5, r1
 80093e0:	e73e      	b.n	8009260 <atan+0xc0>
 80093e2:	4b35      	ldr	r3, [pc, #212]	@ (80094b8 <atan+0x318>)
 80093e4:	4e35      	ldr	r6, [pc, #212]	@ (80094bc <atan+0x31c>)
 80093e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	f7f6 febb 	bl	8000168 <__aeabi_dsub>
 80093f2:	4622      	mov	r2, r4
 80093f4:	462b      	mov	r3, r5
 80093f6:	f7f6 feb7 	bl	8000168 <__aeabi_dsub>
 80093fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009406:	f7f6 feaf 	bl	8000168 <__aeabi_dsub>
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	f6bf aee4 	bge.w	80091de <atan+0x3e>
 8009416:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800941a:	461d      	mov	r5, r3
 800941c:	e6df      	b.n	80091de <atan+0x3e>
 800941e:	a51c      	add	r5, pc, #112	@ (adr r5, 8009490 <atan+0x2f0>)
 8009420:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009424:	e6db      	b.n	80091de <atan+0x3e>
 8009426:	bf00      	nop
 8009428:	54442d18 	.word	0x54442d18
 800942c:	3ff921fb 	.word	0x3ff921fb
 8009430:	8800759c 	.word	0x8800759c
 8009434:	7e37e43c 	.word	0x7e37e43c
 8009438:	e322da11 	.word	0xe322da11
 800943c:	3f90ad3a 	.word	0x3f90ad3a
 8009440:	24760deb 	.word	0x24760deb
 8009444:	3fa97b4b 	.word	0x3fa97b4b
 8009448:	a0d03d51 	.word	0xa0d03d51
 800944c:	3fb10d66 	.word	0x3fb10d66
 8009450:	c54c206e 	.word	0xc54c206e
 8009454:	3fb745cd 	.word	0x3fb745cd
 8009458:	920083ff 	.word	0x920083ff
 800945c:	3fc24924 	.word	0x3fc24924
 8009460:	5555550d 	.word	0x5555550d
 8009464:	3fd55555 	.word	0x3fd55555
 8009468:	2c6a6c2f 	.word	0x2c6a6c2f
 800946c:	bfa2b444 	.word	0xbfa2b444
 8009470:	52defd9a 	.word	0x52defd9a
 8009474:	3fadde2d 	.word	0x3fadde2d
 8009478:	af749a6d 	.word	0xaf749a6d
 800947c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009480:	fe231671 	.word	0xfe231671
 8009484:	3fbc71c6 	.word	0x3fbc71c6
 8009488:	9998ebc4 	.word	0x9998ebc4
 800948c:	3fc99999 	.word	0x3fc99999
 8009490:	54442d18 	.word	0x54442d18
 8009494:	bff921fb 	.word	0xbff921fb
 8009498:	440fffff 	.word	0x440fffff
 800949c:	7ff00000 	.word	0x7ff00000
 80094a0:	3fdbffff 	.word	0x3fdbffff
 80094a4:	3ff00000 	.word	0x3ff00000
 80094a8:	3ff2ffff 	.word	0x3ff2ffff
 80094ac:	40038000 	.word	0x40038000
 80094b0:	3ff80000 	.word	0x3ff80000
 80094b4:	bff00000 	.word	0xbff00000
 80094b8:	0800b3e0 	.word	0x0800b3e0
 80094bc:	0800b400 	.word	0x0800b400

080094c0 <cos>:
 80094c0:	b530      	push	{r4, r5, lr}
 80094c2:	4d20      	ldr	r5, [pc, #128]	@ (8009544 <cos+0x84>)
 80094c4:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80094c8:	42ac      	cmp	r4, r5
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	b087      	sub	sp, #28
 80094d0:	d806      	bhi.n	80094e0 <cos+0x20>
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	b007      	add	sp, #28
 80094d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094dc:	f000 b958 	b.w	8009790 <__kernel_cos>
 80094e0:	4d19      	ldr	r5, [pc, #100]	@ (8009548 <cos+0x88>)
 80094e2:	42ac      	cmp	r4, r5
 80094e4:	d903      	bls.n	80094ee <cos+0x2e>
 80094e6:	f7f6 fe3f 	bl	8000168 <__aeabi_dsub>
 80094ea:	b007      	add	sp, #28
 80094ec:	bd30      	pop	{r4, r5, pc}
 80094ee:	aa02      	add	r2, sp, #8
 80094f0:	f000 fb9a 	bl	8009c28 <__ieee754_rem_pio2>
 80094f4:	f000 0003 	and.w	r0, r0, #3
 80094f8:	2801      	cmp	r0, #1
 80094fa:	d009      	beq.n	8009510 <cos+0x50>
 80094fc:	2802      	cmp	r0, #2
 80094fe:	d011      	beq.n	8009524 <cos+0x64>
 8009500:	b9b8      	cbnz	r0, 8009532 <cos+0x72>
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	f000 f941 	bl	8009790 <__kernel_cos>
 800950e:	e7ec      	b.n	80094ea <cos+0x2a>
 8009510:	9000      	str	r0, [sp, #0]
 8009512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800951a:	f000 f9f9 	bl	8009910 <__kernel_sin>
 800951e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8009522:	e7e2      	b.n	80094ea <cos+0x2a>
 8009524:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952c:	f000 f930 	bl	8009790 <__kernel_cos>
 8009530:	e7f5      	b.n	800951e <cos+0x5e>
 8009532:	2301      	movs	r3, #1
 8009534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800953e:	f000 f9e7 	bl	8009910 <__kernel_sin>
 8009542:	e7d2      	b.n	80094ea <cos+0x2a>
 8009544:	3fe921fb 	.word	0x3fe921fb
 8009548:	7fefffff 	.word	0x7fefffff

0800954c <fabs>:
 800954c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009550:	4619      	mov	r1, r3
 8009552:	4770      	bx	lr

08009554 <sin>:
 8009554:	b530      	push	{r4, r5, lr}
 8009556:	4d20      	ldr	r5, [pc, #128]	@ (80095d8 <sin+0x84>)
 8009558:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800955c:	42ac      	cmp	r4, r5
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	b087      	sub	sp, #28
 8009564:	d806      	bhi.n	8009574 <sin+0x20>
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2300      	movs	r3, #0
 800956e:	f000 f9cf 	bl	8009910 <__kernel_sin>
 8009572:	e004      	b.n	800957e <sin+0x2a>
 8009574:	4d19      	ldr	r5, [pc, #100]	@ (80095dc <sin+0x88>)
 8009576:	42ac      	cmp	r4, r5
 8009578:	d903      	bls.n	8009582 <sin+0x2e>
 800957a:	f7f6 fdf5 	bl	8000168 <__aeabi_dsub>
 800957e:	b007      	add	sp, #28
 8009580:	bd30      	pop	{r4, r5, pc}
 8009582:	aa02      	add	r2, sp, #8
 8009584:	f000 fb50 	bl	8009c28 <__ieee754_rem_pio2>
 8009588:	f000 0003 	and.w	r0, r0, #3
 800958c:	2801      	cmp	r0, #1
 800958e:	d009      	beq.n	80095a4 <sin+0x50>
 8009590:	2802      	cmp	r0, #2
 8009592:	d00e      	beq.n	80095b2 <sin+0x5e>
 8009594:	b9c0      	cbnz	r0, 80095c8 <sin+0x74>
 8009596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959a:	2301      	movs	r3, #1
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a2:	e7e4      	b.n	800956e <sin+0x1a>
 80095a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ac:	f000 f8f0 	bl	8009790 <__kernel_cos>
 80095b0:	e7e5      	b.n	800957e <sin+0x2a>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095be:	f000 f9a7 	bl	8009910 <__kernel_sin>
 80095c2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80095c6:	e7da      	b.n	800957e <sin+0x2a>
 80095c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095d0:	f000 f8de 	bl	8009790 <__kernel_cos>
 80095d4:	e7f5      	b.n	80095c2 <sin+0x6e>
 80095d6:	bf00      	nop
 80095d8:	3fe921fb 	.word	0x3fe921fb
 80095dc:	7fefffff 	.word	0x7fefffff

080095e0 <__ieee754_sqrt>:
 80095e0:	4a67      	ldr	r2, [pc, #412]	@ (8009780 <__ieee754_sqrt+0x1a0>)
 80095e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e6:	438a      	bics	r2, r1
 80095e8:	4606      	mov	r6, r0
 80095ea:	460f      	mov	r7, r1
 80095ec:	460b      	mov	r3, r1
 80095ee:	4604      	mov	r4, r0
 80095f0:	d10e      	bne.n	8009610 <__ieee754_sqrt+0x30>
 80095f2:	4602      	mov	r2, r0
 80095f4:	f7f6 ff70 	bl	80004d8 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f6 fdb4 	bl	800016c <__adddf3>
 8009604:	4606      	mov	r6, r0
 8009606:	460f      	mov	r7, r1
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	2900      	cmp	r1, #0
 8009612:	dc0c      	bgt.n	800962e <__ieee754_sqrt+0x4e>
 8009614:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009618:	4302      	orrs	r2, r0
 800961a:	d0f5      	beq.n	8009608 <__ieee754_sqrt+0x28>
 800961c:	b189      	cbz	r1, 8009642 <__ieee754_sqrt+0x62>
 800961e:	4602      	mov	r2, r0
 8009620:	f7f6 fda2 	bl	8000168 <__aeabi_dsub>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	f7f7 f880 	bl	800072c <__aeabi_ddiv>
 800962c:	e7ea      	b.n	8009604 <__ieee754_sqrt+0x24>
 800962e:	150a      	asrs	r2, r1, #20
 8009630:	d115      	bne.n	800965e <__ieee754_sqrt+0x7e>
 8009632:	2100      	movs	r1, #0
 8009634:	e009      	b.n	800964a <__ieee754_sqrt+0x6a>
 8009636:	0ae3      	lsrs	r3, r4, #11
 8009638:	3a15      	subs	r2, #21
 800963a:	0564      	lsls	r4, r4, #21
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0fa      	beq.n	8009636 <__ieee754_sqrt+0x56>
 8009640:	e7f7      	b.n	8009632 <__ieee754_sqrt+0x52>
 8009642:	460a      	mov	r2, r1
 8009644:	e7fa      	b.n	800963c <__ieee754_sqrt+0x5c>
 8009646:	005b      	lsls	r3, r3, #1
 8009648:	3101      	adds	r1, #1
 800964a:	02d8      	lsls	r0, r3, #11
 800964c:	d5fb      	bpl.n	8009646 <__ieee754_sqrt+0x66>
 800964e:	1e48      	subs	r0, r1, #1
 8009650:	1a12      	subs	r2, r2, r0
 8009652:	f1c1 0020 	rsb	r0, r1, #32
 8009656:	fa24 f000 	lsr.w	r0, r4, r0
 800965a:	4303      	orrs	r3, r0
 800965c:	408c      	lsls	r4, r1
 800965e:	2600      	movs	r6, #0
 8009660:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009664:	2116      	movs	r1, #22
 8009666:	07d2      	lsls	r2, r2, #31
 8009668:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800966c:	4632      	mov	r2, r6
 800966e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009676:	bf5c      	itt	pl
 8009678:	005b      	lslpl	r3, r3, #1
 800967a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800967e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009682:	bf58      	it	pl
 8009684:	0064      	lslpl	r4, r4, #1
 8009686:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800968a:	107f      	asrs	r7, r7, #1
 800968c:	0064      	lsls	r4, r4, #1
 800968e:	1815      	adds	r5, r2, r0
 8009690:	429d      	cmp	r5, r3
 8009692:	bfde      	ittt	le
 8009694:	182a      	addle	r2, r5, r0
 8009696:	1b5b      	suble	r3, r3, r5
 8009698:	1836      	addle	r6, r6, r0
 800969a:	0fe5      	lsrs	r5, r4, #31
 800969c:	3901      	subs	r1, #1
 800969e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80096a2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80096a6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80096aa:	d1f0      	bne.n	800968e <__ieee754_sqrt+0xae>
 80096ac:	460d      	mov	r5, r1
 80096ae:	f04f 0a20 	mov.w	sl, #32
 80096b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80096b6:	429a      	cmp	r2, r3
 80096b8:	eb01 0c00 	add.w	ip, r1, r0
 80096bc:	db02      	blt.n	80096c4 <__ieee754_sqrt+0xe4>
 80096be:	d113      	bne.n	80096e8 <__ieee754_sqrt+0x108>
 80096c0:	45a4      	cmp	ip, r4
 80096c2:	d811      	bhi.n	80096e8 <__ieee754_sqrt+0x108>
 80096c4:	f1bc 0f00 	cmp.w	ip, #0
 80096c8:	eb0c 0100 	add.w	r1, ip, r0
 80096cc:	da42      	bge.n	8009754 <__ieee754_sqrt+0x174>
 80096ce:	2900      	cmp	r1, #0
 80096d0:	db40      	blt.n	8009754 <__ieee754_sqrt+0x174>
 80096d2:	f102 0e01 	add.w	lr, r2, #1
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	4672      	mov	r2, lr
 80096da:	45a4      	cmp	ip, r4
 80096dc:	bf88      	it	hi
 80096de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80096e2:	eba4 040c 	sub.w	r4, r4, ip
 80096e6:	4405      	add	r5, r0
 80096e8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80096ec:	f1ba 0a01 	subs.w	sl, sl, #1
 80096f0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80096f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80096f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80096fc:	d1db      	bne.n	80096b6 <__ieee754_sqrt+0xd6>
 80096fe:	431c      	orrs	r4, r3
 8009700:	d01a      	beq.n	8009738 <__ieee754_sqrt+0x158>
 8009702:	4c20      	ldr	r4, [pc, #128]	@ (8009784 <__ieee754_sqrt+0x1a4>)
 8009704:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009788 <__ieee754_sqrt+0x1a8>
 8009708:	e9d4 0100 	ldrd	r0, r1, [r4]
 800970c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009710:	f7f6 fd2a 	bl	8000168 <__aeabi_dsub>
 8009714:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4640      	mov	r0, r8
 800971e:	4649      	mov	r1, r9
 8009720:	f7f7 f956 	bl	80009d0 <__aeabi_dcmple>
 8009724:	b140      	cbz	r0, 8009738 <__ieee754_sqrt+0x158>
 8009726:	e9d4 0100 	ldrd	r0, r1, [r4]
 800972a:	e9db 2300 	ldrd	r2, r3, [fp]
 800972e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009732:	d111      	bne.n	8009758 <__ieee754_sqrt+0x178>
 8009734:	4655      	mov	r5, sl
 8009736:	3601      	adds	r6, #1
 8009738:	1072      	asrs	r2, r6, #1
 800973a:	086b      	lsrs	r3, r5, #1
 800973c:	07f1      	lsls	r1, r6, #31
 800973e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009742:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009746:	bf48      	it	mi
 8009748:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800974c:	4618      	mov	r0, r3
 800974e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009752:	e757      	b.n	8009604 <__ieee754_sqrt+0x24>
 8009754:	4696      	mov	lr, r2
 8009756:	e7be      	b.n	80096d6 <__ieee754_sqrt+0xf6>
 8009758:	f7f6 fd08 	bl	800016c <__adddf3>
 800975c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4640      	mov	r0, r8
 8009766:	4649      	mov	r1, r9
 8009768:	f7f7 f928 	bl	80009bc <__aeabi_dcmplt>
 800976c:	b120      	cbz	r0, 8009778 <__ieee754_sqrt+0x198>
 800976e:	1ca8      	adds	r0, r5, #2
 8009770:	bf08      	it	eq
 8009772:	3601      	addeq	r6, #1
 8009774:	3502      	adds	r5, #2
 8009776:	e7df      	b.n	8009738 <__ieee754_sqrt+0x158>
 8009778:	1c6b      	adds	r3, r5, #1
 800977a:	f023 0501 	bic.w	r5, r3, #1
 800977e:	e7db      	b.n	8009738 <__ieee754_sqrt+0x158>
 8009780:	7ff00000 	.word	0x7ff00000
 8009784:	20000278 	.word	0x20000278
 8009788:	20000270 	.word	0x20000270
 800978c:	00000000 	.word	0x00000000

08009790 <__kernel_cos>:
 8009790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009798:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800979c:	4680      	mov	r8, r0
 800979e:	4689      	mov	r9, r1
 80097a0:	e9cd 2300 	strd	r2, r3, [sp]
 80097a4:	d204      	bcs.n	80097b0 <__kernel_cos+0x20>
 80097a6:	f7f7 f947 	bl	8000a38 <__aeabi_d2iz>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	f000 8086 	beq.w	80098bc <__kernel_cos+0x12c>
 80097b0:	4642      	mov	r2, r8
 80097b2:	464b      	mov	r3, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	4649      	mov	r1, r9
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	2200      	movs	r2, #0
 80097be:	4b4e      	ldr	r3, [pc, #312]	@ (80098f8 <__kernel_cos+0x168>)
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	f7f6 fe88 	bl	80004d8 <__aeabi_dmul>
 80097c8:	a33f      	add	r3, pc, #252	@ (adr r3, 80098c8 <__kernel_cos+0x138>)
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	4682      	mov	sl, r0
 80097d0:	468b      	mov	fp, r1
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f6 fe7f 	bl	80004d8 <__aeabi_dmul>
 80097da:	a33d      	add	r3, pc, #244	@ (adr r3, 80098d0 <__kernel_cos+0x140>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f7f6 fcc4 	bl	800016c <__adddf3>
 80097e4:	4622      	mov	r2, r4
 80097e6:	462b      	mov	r3, r5
 80097e8:	f7f6 fe76 	bl	80004d8 <__aeabi_dmul>
 80097ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80098d8 <__kernel_cos+0x148>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f6 fcb9 	bl	8000168 <__aeabi_dsub>
 80097f6:	4622      	mov	r2, r4
 80097f8:	462b      	mov	r3, r5
 80097fa:	f7f6 fe6d 	bl	80004d8 <__aeabi_dmul>
 80097fe:	a338      	add	r3, pc, #224	@ (adr r3, 80098e0 <__kernel_cos+0x150>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fcb2 	bl	800016c <__adddf3>
 8009808:	4622      	mov	r2, r4
 800980a:	462b      	mov	r3, r5
 800980c:	f7f6 fe64 	bl	80004d8 <__aeabi_dmul>
 8009810:	a335      	add	r3, pc, #212	@ (adr r3, 80098e8 <__kernel_cos+0x158>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fca7 	bl	8000168 <__aeabi_dsub>
 800981a:	4622      	mov	r2, r4
 800981c:	462b      	mov	r3, r5
 800981e:	f7f6 fe5b 	bl	80004d8 <__aeabi_dmul>
 8009822:	a333      	add	r3, pc, #204	@ (adr r3, 80098f0 <__kernel_cos+0x160>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fca0 	bl	800016c <__adddf3>
 800982c:	4622      	mov	r2, r4
 800982e:	462b      	mov	r3, r5
 8009830:	f7f6 fe52 	bl	80004d8 <__aeabi_dmul>
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	f7f6 fe4e 	bl	80004d8 <__aeabi_dmul>
 800983c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009840:	4604      	mov	r4, r0
 8009842:	460d      	mov	r5, r1
 8009844:	4640      	mov	r0, r8
 8009846:	4649      	mov	r1, r9
 8009848:	f7f6 fe46 	bl	80004d8 <__aeabi_dmul>
 800984c:	460b      	mov	r3, r1
 800984e:	4602      	mov	r2, r0
 8009850:	4629      	mov	r1, r5
 8009852:	4620      	mov	r0, r4
 8009854:	f7f6 fc88 	bl	8000168 <__aeabi_dsub>
 8009858:	4b28      	ldr	r3, [pc, #160]	@ (80098fc <__kernel_cos+0x16c>)
 800985a:	4680      	mov	r8, r0
 800985c:	429e      	cmp	r6, r3
 800985e:	4689      	mov	r9, r1
 8009860:	d80e      	bhi.n	8009880 <__kernel_cos+0xf0>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4650      	mov	r0, sl
 8009868:	4659      	mov	r1, fp
 800986a:	f7f6 fc7d 	bl	8000168 <__aeabi_dsub>
 800986e:	4602      	mov	r2, r0
 8009870:	2000      	movs	r0, #0
 8009872:	460b      	mov	r3, r1
 8009874:	4922      	ldr	r1, [pc, #136]	@ (8009900 <__kernel_cos+0x170>)
 8009876:	f7f6 fc77 	bl	8000168 <__aeabi_dsub>
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009880:	2400      	movs	r4, #0
 8009882:	4b20      	ldr	r3, [pc, #128]	@ (8009904 <__kernel_cos+0x174>)
 8009884:	4622      	mov	r2, r4
 8009886:	429e      	cmp	r6, r3
 8009888:	bf8c      	ite	hi
 800988a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009908 <__kernel_cos+0x178>)
 800988c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009890:	462b      	mov	r3, r5
 8009892:	2000      	movs	r0, #0
 8009894:	491a      	ldr	r1, [pc, #104]	@ (8009900 <__kernel_cos+0x170>)
 8009896:	f7f6 fc67 	bl	8000168 <__aeabi_dsub>
 800989a:	4622      	mov	r2, r4
 800989c:	4606      	mov	r6, r0
 800989e:	460f      	mov	r7, r1
 80098a0:	462b      	mov	r3, r5
 80098a2:	4650      	mov	r0, sl
 80098a4:	4659      	mov	r1, fp
 80098a6:	f7f6 fc5f 	bl	8000168 <__aeabi_dsub>
 80098aa:	4642      	mov	r2, r8
 80098ac:	464b      	mov	r3, r9
 80098ae:	f7f6 fc5b 	bl	8000168 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4630      	mov	r0, r6
 80098b8:	4639      	mov	r1, r7
 80098ba:	e7dc      	b.n	8009876 <__kernel_cos+0xe6>
 80098bc:	2000      	movs	r0, #0
 80098be:	4910      	ldr	r1, [pc, #64]	@ (8009900 <__kernel_cos+0x170>)
 80098c0:	e7db      	b.n	800987a <__kernel_cos+0xea>
 80098c2:	bf00      	nop
 80098c4:	f3af 8000 	nop.w
 80098c8:	be8838d4 	.word	0xbe8838d4
 80098cc:	bda8fae9 	.word	0xbda8fae9
 80098d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80098d4:	3e21ee9e 	.word	0x3e21ee9e
 80098d8:	809c52ad 	.word	0x809c52ad
 80098dc:	3e927e4f 	.word	0x3e927e4f
 80098e0:	19cb1590 	.word	0x19cb1590
 80098e4:	3efa01a0 	.word	0x3efa01a0
 80098e8:	16c15177 	.word	0x16c15177
 80098ec:	3f56c16c 	.word	0x3f56c16c
 80098f0:	5555554c 	.word	0x5555554c
 80098f4:	3fa55555 	.word	0x3fa55555
 80098f8:	3fe00000 	.word	0x3fe00000
 80098fc:	3fd33332 	.word	0x3fd33332
 8009900:	3ff00000 	.word	0x3ff00000
 8009904:	3fe90000 	.word	0x3fe90000
 8009908:	3fd20000 	.word	0x3fd20000
 800990c:	00000000 	.word	0x00000000

08009910 <__kernel_sin>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	461f      	mov	r7, r3
 8009916:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800991a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800991e:	4604      	mov	r4, r0
 8009920:	460d      	mov	r5, r1
 8009922:	4616      	mov	r6, r2
 8009924:	b085      	sub	sp, #20
 8009926:	d203      	bcs.n	8009930 <__kernel_sin+0x20>
 8009928:	f7f7 f886 	bl	8000a38 <__aeabi_d2iz>
 800992c:	2800      	cmp	r0, #0
 800992e:	d051      	beq.n	80099d4 <__kernel_sin+0xc4>
 8009930:	4622      	mov	r2, r4
 8009932:	462b      	mov	r3, r5
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fdce 	bl	80004d8 <__aeabi_dmul>
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4620      	mov	r0, r4
 8009946:	4629      	mov	r1, r5
 8009948:	f7f6 fdc6 	bl	80004d8 <__aeabi_dmul>
 800994c:	a33e      	add	r3, pc, #248	@ (adr r3, 8009a48 <__kernel_sin+0x138>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4680      	mov	r8, r0
 8009954:	4689      	mov	r9, r1
 8009956:	4650      	mov	r0, sl
 8009958:	4659      	mov	r1, fp
 800995a:	f7f6 fdbd 	bl	80004d8 <__aeabi_dmul>
 800995e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009a50 <__kernel_sin+0x140>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7f6 fc00 	bl	8000168 <__aeabi_dsub>
 8009968:	4652      	mov	r2, sl
 800996a:	465b      	mov	r3, fp
 800996c:	f7f6 fdb4 	bl	80004d8 <__aeabi_dmul>
 8009970:	a339      	add	r3, pc, #228	@ (adr r3, 8009a58 <__kernel_sin+0x148>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fbf9 	bl	800016c <__adddf3>
 800997a:	4652      	mov	r2, sl
 800997c:	465b      	mov	r3, fp
 800997e:	f7f6 fdab 	bl	80004d8 <__aeabi_dmul>
 8009982:	a337      	add	r3, pc, #220	@ (adr r3, 8009a60 <__kernel_sin+0x150>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f7f6 fbee 	bl	8000168 <__aeabi_dsub>
 800998c:	4652      	mov	r2, sl
 800998e:	465b      	mov	r3, fp
 8009990:	f7f6 fda2 	bl	80004d8 <__aeabi_dmul>
 8009994:	a334      	add	r3, pc, #208	@ (adr r3, 8009a68 <__kernel_sin+0x158>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f7f6 fbe7 	bl	800016c <__adddf3>
 800999e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099a0:	e9cd 0100 	strd	r0, r1, [sp]
 80099a4:	b9db      	cbnz	r3, 80099de <__kernel_sin+0xce>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4650      	mov	r0, sl
 80099ac:	4659      	mov	r1, fp
 80099ae:	f7f6 fd93 	bl	80004d8 <__aeabi_dmul>
 80099b2:	a32f      	add	r3, pc, #188	@ (adr r3, 8009a70 <__kernel_sin+0x160>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fbd6 	bl	8000168 <__aeabi_dsub>
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	f7f6 fd8a 	bl	80004d8 <__aeabi_dmul>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	4620      	mov	r0, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7f6 fbce 	bl	800016c <__adddf3>
 80099d0:	4604      	mov	r4, r0
 80099d2:	460d      	mov	r5, r1
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	b005      	add	sp, #20
 80099da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099de:	2200      	movs	r2, #0
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	4b24      	ldr	r3, [pc, #144]	@ (8009a78 <__kernel_sin+0x168>)
 80099e6:	f7f6 fd77 	bl	80004d8 <__aeabi_dmul>
 80099ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f2:	4640      	mov	r0, r8
 80099f4:	4649      	mov	r1, r9
 80099f6:	f7f6 fd6f 	bl	80004d8 <__aeabi_dmul>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a02:	f7f6 fbb1 	bl	8000168 <__aeabi_dsub>
 8009a06:	4652      	mov	r2, sl
 8009a08:	465b      	mov	r3, fp
 8009a0a:	f7f6 fd65 	bl	80004d8 <__aeabi_dmul>
 8009a0e:	4632      	mov	r2, r6
 8009a10:	463b      	mov	r3, r7
 8009a12:	f7f6 fba9 	bl	8000168 <__aeabi_dsub>
 8009a16:	a316      	add	r3, pc, #88	@ (adr r3, 8009a70 <__kernel_sin+0x160>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	460f      	mov	r7, r1
 8009a20:	4640      	mov	r0, r8
 8009a22:	4649      	mov	r1, r9
 8009a24:	f7f6 fd58 	bl	80004d8 <__aeabi_dmul>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f6 fb9c 	bl	800016c <__adddf3>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7f6 fb94 	bl	8000168 <__aeabi_dsub>
 8009a40:	e7c6      	b.n	80099d0 <__kernel_sin+0xc0>
 8009a42:	bf00      	nop
 8009a44:	f3af 8000 	nop.w
 8009a48:	5acfd57c 	.word	0x5acfd57c
 8009a4c:	3de5d93a 	.word	0x3de5d93a
 8009a50:	8a2b9ceb 	.word	0x8a2b9ceb
 8009a54:	3e5ae5e6 	.word	0x3e5ae5e6
 8009a58:	57b1fe7d 	.word	0x57b1fe7d
 8009a5c:	3ec71de3 	.word	0x3ec71de3
 8009a60:	19c161d5 	.word	0x19c161d5
 8009a64:	3f2a01a0 	.word	0x3f2a01a0
 8009a68:	1110f8a6 	.word	0x1110f8a6
 8009a6c:	3f811111 	.word	0x3f811111
 8009a70:	55555549 	.word	0x55555549
 8009a74:	3fc55555 	.word	0x3fc55555
 8009a78:	3fe00000 	.word	0x3fe00000
 8009a7c:	00000000 	.word	0x00000000

08009a80 <__ieee754_atan2>:
 8009a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	4617      	mov	r7, r2
 8009a86:	4690      	mov	r8, r2
 8009a88:	4699      	mov	r9, r3
 8009a8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009a8e:	427b      	negs	r3, r7
 8009a90:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009c18 <__ieee754_atan2+0x198>
 8009a94:	433b      	orrs	r3, r7
 8009a96:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a9a:	4553      	cmp	r3, sl
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	d809      	bhi.n	8009ab6 <__ieee754_atan2+0x36>
 8009aa2:	4246      	negs	r6, r0
 8009aa4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009aa8:	4306      	orrs	r6, r0
 8009aaa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009aae:	4556      	cmp	r6, sl
 8009ab0:	468e      	mov	lr, r1
 8009ab2:	4683      	mov	fp, r0
 8009ab4:	d908      	bls.n	8009ac8 <__ieee754_atan2+0x48>
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	464b      	mov	r3, r9
 8009aba:	4620      	mov	r0, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7f6 fb55 	bl	800016c <__adddf3>
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	e016      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009ac8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009acc:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ad0:	433e      	orrs	r6, r7
 8009ad2:	d103      	bne.n	8009adc <__ieee754_atan2+0x5c>
 8009ad4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	f7ff bb62 	b.w	80091a0 <atan>
 8009adc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009ae0:	f006 0602 	and.w	r6, r6, #2
 8009ae4:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009ae8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009aec:	d107      	bne.n	8009afe <__ieee754_atan2+0x7e>
 8009aee:	2e02      	cmp	r6, #2
 8009af0:	d064      	beq.n	8009bbc <__ieee754_atan2+0x13c>
 8009af2:	2e03      	cmp	r6, #3
 8009af4:	d066      	beq.n	8009bc4 <__ieee754_atan2+0x144>
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	4317      	orrs	r7, r2
 8009b00:	d106      	bne.n	8009b10 <__ieee754_atan2+0x90>
 8009b02:	f1be 0f00 	cmp.w	lr, #0
 8009b06:	da68      	bge.n	8009bda <__ieee754_atan2+0x15a>
 8009b08:	a537      	add	r5, pc, #220	@ (adr r5, 8009be8 <__ieee754_atan2+0x168>)
 8009b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b0e:	e7f2      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009b10:	4552      	cmp	r2, sl
 8009b12:	d10f      	bne.n	8009b34 <__ieee754_atan2+0xb4>
 8009b14:	4293      	cmp	r3, r2
 8009b16:	f106 36ff 	add.w	r6, r6, #4294967295
 8009b1a:	d107      	bne.n	8009b2c <__ieee754_atan2+0xac>
 8009b1c:	2e02      	cmp	r6, #2
 8009b1e:	d855      	bhi.n	8009bcc <__ieee754_atan2+0x14c>
 8009b20:	4b3e      	ldr	r3, [pc, #248]	@ (8009c1c <__ieee754_atan2+0x19c>)
 8009b22:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009b2a:	e7e4      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009b2c:	2e02      	cmp	r6, #2
 8009b2e:	d851      	bhi.n	8009bd4 <__ieee754_atan2+0x154>
 8009b30:	4b3b      	ldr	r3, [pc, #236]	@ (8009c20 <__ieee754_atan2+0x1a0>)
 8009b32:	e7f6      	b.n	8009b22 <__ieee754_atan2+0xa2>
 8009b34:	4553      	cmp	r3, sl
 8009b36:	d0e4      	beq.n	8009b02 <__ieee754_atan2+0x82>
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009b3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b42:	da21      	bge.n	8009b88 <__ieee754_atan2+0x108>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	da01      	bge.n	8009b4e <__ieee754_atan2+0xce>
 8009b4a:	323c      	adds	r2, #60	@ 0x3c
 8009b4c:	db20      	blt.n	8009b90 <__ieee754_atan2+0x110>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	4620      	mov	r0, r4
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7f6 fde9 	bl	800072c <__aeabi_ddiv>
 8009b5a:	f7ff fcf7 	bl	800954c <fabs>
 8009b5e:	f7ff fb1f 	bl	80091a0 <atan>
 8009b62:	4604      	mov	r4, r0
 8009b64:	460d      	mov	r5, r1
 8009b66:	2e01      	cmp	r6, #1
 8009b68:	d015      	beq.n	8009b96 <__ieee754_atan2+0x116>
 8009b6a:	2e02      	cmp	r6, #2
 8009b6c:	d017      	beq.n	8009b9e <__ieee754_atan2+0x11e>
 8009b6e:	2e00      	cmp	r6, #0
 8009b70:	d0c1      	beq.n	8009af6 <__ieee754_atan2+0x76>
 8009b72:	a31f      	add	r3, pc, #124	@ (adr r3, 8009bf0 <__ieee754_atan2+0x170>)
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 faf4 	bl	8000168 <__aeabi_dsub>
 8009b80:	a31d      	add	r3, pc, #116	@ (adr r3, 8009bf8 <__ieee754_atan2+0x178>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	e016      	b.n	8009bb6 <__ieee754_atan2+0x136>
 8009b88:	a51d      	add	r5, pc, #116	@ (adr r5, 8009c00 <__ieee754_atan2+0x180>)
 8009b8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b8e:	e7ea      	b.n	8009b66 <__ieee754_atan2+0xe6>
 8009b90:	2400      	movs	r4, #0
 8009b92:	2500      	movs	r5, #0
 8009b94:	e7e7      	b.n	8009b66 <__ieee754_atan2+0xe6>
 8009b96:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009b9a:	461d      	mov	r5, r3
 8009b9c:	e7ab      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009b9e:	a314      	add	r3, pc, #80	@ (adr r3, 8009bf0 <__ieee754_atan2+0x170>)
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fade 	bl	8000168 <__aeabi_dsub>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	a111      	add	r1, pc, #68	@ (adr r1, 8009bf8 <__ieee754_atan2+0x178>)
 8009bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb6:	f7f6 fad7 	bl	8000168 <__aeabi_dsub>
 8009bba:	e782      	b.n	8009ac2 <__ieee754_atan2+0x42>
 8009bbc:	a50e      	add	r5, pc, #56	@ (adr r5, 8009bf8 <__ieee754_atan2+0x178>)
 8009bbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bc2:	e798      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009bc4:	a510      	add	r5, pc, #64	@ (adr r5, 8009c08 <__ieee754_atan2+0x188>)
 8009bc6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bca:	e794      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009bcc:	a510      	add	r5, pc, #64	@ (adr r5, 8009c10 <__ieee754_atan2+0x190>)
 8009bce:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bd2:	e790      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009bd4:	2400      	movs	r4, #0
 8009bd6:	2500      	movs	r5, #0
 8009bd8:	e78d      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009bda:	a509      	add	r5, pc, #36	@ (adr r5, 8009c00 <__ieee754_atan2+0x180>)
 8009bdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009be0:	e789      	b.n	8009af6 <__ieee754_atan2+0x76>
 8009be2:	bf00      	nop
 8009be4:	f3af 8000 	nop.w
 8009be8:	54442d18 	.word	0x54442d18
 8009bec:	bff921fb 	.word	0xbff921fb
 8009bf0:	33145c07 	.word	0x33145c07
 8009bf4:	3ca1a626 	.word	0x3ca1a626
 8009bf8:	54442d18 	.word	0x54442d18
 8009bfc:	400921fb 	.word	0x400921fb
 8009c00:	54442d18 	.word	0x54442d18
 8009c04:	3ff921fb 	.word	0x3ff921fb
 8009c08:	54442d18 	.word	0x54442d18
 8009c0c:	c00921fb 	.word	0xc00921fb
 8009c10:	54442d18 	.word	0x54442d18
 8009c14:	3fe921fb 	.word	0x3fe921fb
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	0800b438 	.word	0x0800b438
 8009c20:	0800b420 	.word	0x0800b420
 8009c24:	00000000 	.word	0x00000000

08009c28 <__ieee754_rem_pio2>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	4bc4      	ldr	r3, [pc, #784]	@ (8009f40 <__ieee754_rem_pio2+0x318>)
 8009c2e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009c32:	b08d      	sub	sp, #52	@ 0x34
 8009c34:	4598      	cmp	r8, r3
 8009c36:	4606      	mov	r6, r0
 8009c38:	460f      	mov	r7, r1
 8009c3a:	4614      	mov	r4, r2
 8009c3c:	9104      	str	r1, [sp, #16]
 8009c3e:	d807      	bhi.n	8009c50 <__ieee754_rem_pio2+0x28>
 8009c40:	e9c2 6700 	strd	r6, r7, [r2]
 8009c44:	2300      	movs	r3, #0
 8009c46:	2200      	movs	r2, #0
 8009c48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009c4c:	2500      	movs	r5, #0
 8009c4e:	e026      	b.n	8009c9e <__ieee754_rem_pio2+0x76>
 8009c50:	4bbc      	ldr	r3, [pc, #752]	@ (8009f44 <__ieee754_rem_pio2+0x31c>)
 8009c52:	4598      	cmp	r8, r3
 8009c54:	d876      	bhi.n	8009d44 <__ieee754_rem_pio2+0x11c>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	4dbb      	ldr	r5, [pc, #748]	@ (8009f48 <__ieee754_rem_pio2+0x320>)
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009f08 <__ieee754_rem_pio2+0x2e0>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	dd38      	ble.n	8009cd6 <__ieee754_rem_pio2+0xae>
 8009c64:	f7f6 fa80 	bl	8000168 <__aeabi_dsub>
 8009c68:	45a8      	cmp	r8, r5
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460f      	mov	r7, r1
 8009c6e:	d01a      	beq.n	8009ca6 <__ieee754_rem_pio2+0x7e>
 8009c70:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009f10 <__ieee754_rem_pio2+0x2e8>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fa77 	bl	8000168 <__aeabi_dsub>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4680      	mov	r8, r0
 8009c80:	4689      	mov	r9, r1
 8009c82:	4630      	mov	r0, r6
 8009c84:	4639      	mov	r1, r7
 8009c86:	f7f6 fa6f 	bl	8000168 <__aeabi_dsub>
 8009c8a:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009f10 <__ieee754_rem_pio2+0x2e8>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f7f6 fa6a 	bl	8000168 <__aeabi_dsub>
 8009c94:	2501      	movs	r5, #1
 8009c96:	e9c4 8900 	strd	r8, r9, [r4]
 8009c9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	b00d      	add	sp, #52	@ 0x34
 8009ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca6:	a39c      	add	r3, pc, #624	@ (adr r3, 8009f18 <__ieee754_rem_pio2+0x2f0>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fa5c 	bl	8000168 <__aeabi_dsub>
 8009cb0:	a39b      	add	r3, pc, #620	@ (adr r3, 8009f20 <__ieee754_rem_pio2+0x2f8>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460f      	mov	r7, r1
 8009cba:	f7f6 fa55 	bl	8000168 <__aeabi_dsub>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	4639      	mov	r1, r7
 8009cca:	f7f6 fa4d 	bl	8000168 <__aeabi_dsub>
 8009cce:	a394      	add	r3, pc, #592	@ (adr r3, 8009f20 <__ieee754_rem_pio2+0x2f8>)
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e7dc      	b.n	8009c90 <__ieee754_rem_pio2+0x68>
 8009cd6:	f7f6 fa49 	bl	800016c <__adddf3>
 8009cda:	45a8      	cmp	r8, r5
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	d018      	beq.n	8009d14 <__ieee754_rem_pio2+0xec>
 8009ce2:	a38b      	add	r3, pc, #556	@ (adr r3, 8009f10 <__ieee754_rem_pio2+0x2e8>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f7f6 fa40 	bl	800016c <__adddf3>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4689      	mov	r9, r1
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	f7f6 fa36 	bl	8000168 <__aeabi_dsub>
 8009cfc:	a384      	add	r3, pc, #528	@ (adr r3, 8009f10 <__ieee754_rem_pio2+0x2e8>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f7f6 fa33 	bl	800016c <__adddf3>
 8009d06:	f04f 35ff 	mov.w	r5, #4294967295
 8009d0a:	e9c4 8900 	strd	r8, r9, [r4]
 8009d0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009d12:	e7c4      	b.n	8009c9e <__ieee754_rem_pio2+0x76>
 8009d14:	a380      	add	r3, pc, #512	@ (adr r3, 8009f18 <__ieee754_rem_pio2+0x2f0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fa27 	bl	800016c <__adddf3>
 8009d1e:	a380      	add	r3, pc, #512	@ (adr r3, 8009f20 <__ieee754_rem_pio2+0x2f8>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	4606      	mov	r6, r0
 8009d26:	460f      	mov	r7, r1
 8009d28:	f7f6 fa20 	bl	800016c <__adddf3>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4680      	mov	r8, r0
 8009d32:	4689      	mov	r9, r1
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fa16 	bl	8000168 <__aeabi_dsub>
 8009d3c:	a378      	add	r3, pc, #480	@ (adr r3, 8009f20 <__ieee754_rem_pio2+0x2f8>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	e7de      	b.n	8009d02 <__ieee754_rem_pio2+0xda>
 8009d44:	4b81      	ldr	r3, [pc, #516]	@ (8009f4c <__ieee754_rem_pio2+0x324>)
 8009d46:	4598      	cmp	r8, r3
 8009d48:	f200 80cf 	bhi.w	8009eea <__ieee754_rem_pio2+0x2c2>
 8009d4c:	f7ff fbfe 	bl	800954c <fabs>
 8009d50:	a375      	add	r3, pc, #468	@ (adr r3, 8009f28 <__ieee754_rem_pio2+0x300>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	f7f6 fbbd 	bl	80004d8 <__aeabi_dmul>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4b7b      	ldr	r3, [pc, #492]	@ (8009f50 <__ieee754_rem_pio2+0x328>)
 8009d62:	f7f6 fa03 	bl	800016c <__adddf3>
 8009d66:	f7f6 fe67 	bl	8000a38 <__aeabi_d2iz>
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	f7f6 fb4a 	bl	8000404 <__aeabi_i2d>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d78:	a363      	add	r3, pc, #396	@ (adr r3, 8009f08 <__ieee754_rem_pio2+0x2e0>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	f7f6 fbab 	bl	80004d8 <__aeabi_dmul>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4630      	mov	r0, r6
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 f9ed 	bl	8000168 <__aeabi_dsub>
 8009d8e:	a360      	add	r3, pc, #384	@ (adr r3, 8009f10 <__ieee754_rem_pio2+0x2e8>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	4682      	mov	sl, r0
 8009d96:	468b      	mov	fp, r1
 8009d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d9c:	f7f6 fb9c 	bl	80004d8 <__aeabi_dmul>
 8009da0:	2d1f      	cmp	r5, #31
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	dc0c      	bgt.n	8009dc2 <__ieee754_rem_pio2+0x19a>
 8009da8:	4b6a      	ldr	r3, [pc, #424]	@ (8009f54 <__ieee754_rem_pio2+0x32c>)
 8009daa:	1e6a      	subs	r2, r5, #1
 8009dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db0:	4543      	cmp	r3, r8
 8009db2:	d006      	beq.n	8009dc2 <__ieee754_rem_pio2+0x19a>
 8009db4:	4632      	mov	r2, r6
 8009db6:	463b      	mov	r3, r7
 8009db8:	4650      	mov	r0, sl
 8009dba:	4659      	mov	r1, fp
 8009dbc:	f7f6 f9d4 	bl	8000168 <__aeabi_dsub>
 8009dc0:	e00e      	b.n	8009de0 <__ieee754_rem_pio2+0x1b8>
 8009dc2:	463b      	mov	r3, r7
 8009dc4:	4632      	mov	r2, r6
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	4659      	mov	r1, fp
 8009dca:	f7f6 f9cd 	bl	8000168 <__aeabi_dsub>
 8009dce:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009dd2:	9305      	str	r3, [sp, #20]
 8009dd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009dd8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	dc02      	bgt.n	8009de6 <__ieee754_rem_pio2+0x1be>
 8009de0:	e9c4 0100 	strd	r0, r1, [r4]
 8009de4:	e039      	b.n	8009e5a <__ieee754_rem_pio2+0x232>
 8009de6:	a34c      	add	r3, pc, #304	@ (adr r3, 8009f18 <__ieee754_rem_pio2+0x2f0>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df0:	f7f6 fb72 	bl	80004d8 <__aeabi_dmul>
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4650      	mov	r0, sl
 8009dfe:	4659      	mov	r1, fp
 8009e00:	f7f6 f9b2 	bl	8000168 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4680      	mov	r8, r0
 8009e0a:	4689      	mov	r9, r1
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	4659      	mov	r1, fp
 8009e10:	f7f6 f9aa 	bl	8000168 <__aeabi_dsub>
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	f7f6 f9a6 	bl	8000168 <__aeabi_dsub>
 8009e1c:	a340      	add	r3, pc, #256	@ (adr r3, 8009f20 <__ieee754_rem_pio2+0x2f8>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	4606      	mov	r6, r0
 8009e24:	460f      	mov	r7, r1
 8009e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e2a:	f7f6 fb55 	bl	80004d8 <__aeabi_dmul>
 8009e2e:	4632      	mov	r2, r6
 8009e30:	463b      	mov	r3, r7
 8009e32:	f7f6 f999 	bl	8000168 <__aeabi_dsub>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	460f      	mov	r7, r1
 8009e3e:	4640      	mov	r0, r8
 8009e40:	4649      	mov	r1, r9
 8009e42:	f7f6 f991 	bl	8000168 <__aeabi_dsub>
 8009e46:	9a05      	ldr	r2, [sp, #20]
 8009e48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b31      	cmp	r3, #49	@ 0x31
 8009e50:	dc20      	bgt.n	8009e94 <__ieee754_rem_pio2+0x26c>
 8009e52:	46c2      	mov	sl, r8
 8009e54:	46cb      	mov	fp, r9
 8009e56:	e9c4 0100 	strd	r0, r1, [r4]
 8009e5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e5e:	4650      	mov	r0, sl
 8009e60:	4642      	mov	r2, r8
 8009e62:	464b      	mov	r3, r9
 8009e64:	4659      	mov	r1, fp
 8009e66:	f7f6 f97f 	bl	8000168 <__aeabi_dsub>
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	f7f6 f97b 	bl	8000168 <__aeabi_dsub>
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f6bf af10 	bge.w	8009c9e <__ieee754_rem_pio2+0x76>
 8009e7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009e82:	6063      	str	r3, [r4, #4]
 8009e84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e88:	f8c4 8000 	str.w	r8, [r4]
 8009e8c:	60a0      	str	r0, [r4, #8]
 8009e8e:	60e3      	str	r3, [r4, #12]
 8009e90:	426d      	negs	r5, r5
 8009e92:	e704      	b.n	8009c9e <__ieee754_rem_pio2+0x76>
 8009e94:	a326      	add	r3, pc, #152	@ (adr r3, 8009f30 <__ieee754_rem_pio2+0x308>)
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e9e:	f7f6 fb1b 	bl	80004d8 <__aeabi_dmul>
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 f95b 	bl	8000168 <__aeabi_dsub>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4682      	mov	sl, r0
 8009eb8:	468b      	mov	fp, r1
 8009eba:	4640      	mov	r0, r8
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 f953 	bl	8000168 <__aeabi_dsub>
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	f7f6 f94f 	bl	8000168 <__aeabi_dsub>
 8009eca:	a31b      	add	r3, pc, #108	@ (adr r3, 8009f38 <__ieee754_rem_pio2+0x310>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	460f      	mov	r7, r1
 8009ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ed8:	f7f6 fafe 	bl	80004d8 <__aeabi_dmul>
 8009edc:	4632      	mov	r2, r6
 8009ede:	463b      	mov	r3, r7
 8009ee0:	f7f6 f942 	bl	8000168 <__aeabi_dsub>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	460f      	mov	r7, r1
 8009ee8:	e764      	b.n	8009db4 <__ieee754_rem_pio2+0x18c>
 8009eea:	4b1b      	ldr	r3, [pc, #108]	@ (8009f58 <__ieee754_rem_pio2+0x330>)
 8009eec:	4598      	cmp	r8, r3
 8009eee:	d935      	bls.n	8009f5c <__ieee754_rem_pio2+0x334>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	f7f6 f938 	bl	8000168 <__aeabi_dsub>
 8009ef8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009efc:	e9c4 0100 	strd	r0, r1, [r4]
 8009f00:	e6a4      	b.n	8009c4c <__ieee754_rem_pio2+0x24>
 8009f02:	bf00      	nop
 8009f04:	f3af 8000 	nop.w
 8009f08:	54400000 	.word	0x54400000
 8009f0c:	3ff921fb 	.word	0x3ff921fb
 8009f10:	1a626331 	.word	0x1a626331
 8009f14:	3dd0b461 	.word	0x3dd0b461
 8009f18:	1a600000 	.word	0x1a600000
 8009f1c:	3dd0b461 	.word	0x3dd0b461
 8009f20:	2e037073 	.word	0x2e037073
 8009f24:	3ba3198a 	.word	0x3ba3198a
 8009f28:	6dc9c883 	.word	0x6dc9c883
 8009f2c:	3fe45f30 	.word	0x3fe45f30
 8009f30:	2e000000 	.word	0x2e000000
 8009f34:	3ba3198a 	.word	0x3ba3198a
 8009f38:	252049c1 	.word	0x252049c1
 8009f3c:	397b839a 	.word	0x397b839a
 8009f40:	3fe921fb 	.word	0x3fe921fb
 8009f44:	4002d97b 	.word	0x4002d97b
 8009f48:	3ff921fb 	.word	0x3ff921fb
 8009f4c:	413921fb 	.word	0x413921fb
 8009f50:	3fe00000 	.word	0x3fe00000
 8009f54:	0800b450 	.word	0x0800b450
 8009f58:	7fefffff 	.word	0x7fefffff
 8009f5c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009f60:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009f64:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009f68:	460f      	mov	r7, r1
 8009f6a:	f7f6 fd65 	bl	8000a38 <__aeabi_d2iz>
 8009f6e:	f7f6 fa49 	bl	8000404 <__aeabi_i2d>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f7e:	f7f6 f8f3 	bl	8000168 <__aeabi_dsub>
 8009f82:	2200      	movs	r2, #0
 8009f84:	4b21      	ldr	r3, [pc, #132]	@ (800a00c <__ieee754_rem_pio2+0x3e4>)
 8009f86:	f7f6 faa7 	bl	80004d8 <__aeabi_dmul>
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	f7f6 fd53 	bl	8000a38 <__aeabi_d2iz>
 8009f92:	f7f6 fa37 	bl	8000404 <__aeabi_i2d>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009fa2:	f7f6 f8e1 	bl	8000168 <__aeabi_dsub>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4b18      	ldr	r3, [pc, #96]	@ (800a00c <__ieee754_rem_pio2+0x3e4>)
 8009faa:	f7f6 fa95 	bl	80004d8 <__aeabi_dmul>
 8009fae:	f04f 0803 	mov.w	r8, #3
 8009fb2:	2600      	movs	r6, #0
 8009fb4:	2700      	movs	r7, #0
 8009fb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009fba:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	46c2      	mov	sl, r8
 8009fc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fcc:	f7f6 fcec 	bl	80009a8 <__aeabi_dcmpeq>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d1f4      	bne.n	8009fbe <__ieee754_rem_pio2+0x396>
 8009fd4:	4b0e      	ldr	r3, [pc, #56]	@ (800a010 <__ieee754_rem_pio2+0x3e8>)
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	2302      	movs	r3, #2
 8009fdc:	4621      	mov	r1, r4
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	a806      	add	r0, sp, #24
 8009fe2:	4653      	mov	r3, sl
 8009fe4:	f000 f816 	bl	800a014 <__kernel_rem_pio2>
 8009fe8:	9b04      	ldr	r3, [sp, #16]
 8009fea:	4605      	mov	r5, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f6bf ae56 	bge.w	8009c9e <__ieee754_rem_pio2+0x76>
 8009ff2:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009ff6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ffa:	e9c4 2300 	strd	r2, r3, [r4]
 8009ffe:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a002:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a006:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a00a:	e741      	b.n	8009e90 <__ieee754_rem_pio2+0x268>
 800a00c:	41700000 	.word	0x41700000
 800a010:	0800b4d0 	.word	0x0800b4d0

0800a014 <__kernel_rem_pio2>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a01c:	9308      	str	r3, [sp, #32]
 800a01e:	9104      	str	r1, [sp, #16]
 800a020:	4bb6      	ldr	r3, [pc, #728]	@ (800a2fc <__kernel_rem_pio2+0x2e8>)
 800a022:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a024:	f112 0f14 	cmn.w	r2, #20
 800a028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a02c:	bfa8      	it	ge
 800a02e:	1ed4      	subge	r4, r2, #3
 800a030:	9302      	str	r3, [sp, #8]
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	bfb8      	it	lt
 800a036:	2400      	movlt	r4, #0
 800a038:	f103 33ff 	add.w	r3, r3, #4294967295
 800a03c:	9306      	str	r3, [sp, #24]
 800a03e:	bfa4      	itt	ge
 800a040:	2318      	movge	r3, #24
 800a042:	fb94 f4f3 	sdivge	r4, r4, r3
 800a046:	f06f 0317 	mvn.w	r3, #23
 800a04a:	fb04 3303 	mla	r3, r4, r3, r3
 800a04e:	eb03 0a02 	add.w	sl, r3, r2
 800a052:	9a06      	ldr	r2, [sp, #24]
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	1aa7      	subs	r7, r4, r2
 800a058:	eb03 0802 	add.w	r8, r3, r2
 800a05c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a05e:	2500      	movs	r5, #0
 800a060:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a064:	2200      	movs	r2, #0
 800a066:	2300      	movs	r3, #0
 800a068:	9009      	str	r0, [sp, #36]	@ 0x24
 800a06a:	ae20      	add	r6, sp, #128	@ 0x80
 800a06c:	4545      	cmp	r5, r8
 800a06e:	dd14      	ble.n	800a09a <__kernel_rem_pio2+0x86>
 800a070:	f04f 0800 	mov.w	r8, #0
 800a074:	9a08      	ldr	r2, [sp, #32]
 800a076:	ab20      	add	r3, sp, #128	@ 0x80
 800a078:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a07c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a080:	9b02      	ldr	r3, [sp, #8]
 800a082:	4598      	cmp	r8, r3
 800a084:	dc35      	bgt.n	800a0f2 <__kernel_rem_pio2+0xde>
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	2200      	movs	r2, #0
 800a08a:	f1a3 0908 	sub.w	r9, r3, #8
 800a08e:	2300      	movs	r3, #0
 800a090:	462f      	mov	r7, r5
 800a092:	2600      	movs	r6, #0
 800a094:	e9cd 2300 	strd	r2, r3, [sp]
 800a098:	e01f      	b.n	800a0da <__kernel_rem_pio2+0xc6>
 800a09a:	42ef      	cmn	r7, r5
 800a09c:	d40b      	bmi.n	800a0b6 <__kernel_rem_pio2+0xa2>
 800a09e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a0a2:	e9cd 2300 	strd	r2, r3, [sp]
 800a0a6:	f7f6 f9ad 	bl	8000404 <__aeabi_i2d>
 800a0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ae:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a0b2:	3501      	adds	r5, #1
 800a0b4:	e7da      	b.n	800a06c <__kernel_rem_pio2+0x58>
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	e7f8      	b.n	800a0ae <__kernel_rem_pio2+0x9a>
 800a0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a0c4:	f7f6 fa08 	bl	80004d8 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0d0:	f7f6 f84c 	bl	800016c <__adddf3>
 800a0d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0d8:	3601      	adds	r6, #1
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	3f08      	subs	r7, #8
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	ddec      	ble.n	800a0bc <__kernel_rem_pio2+0xa8>
 800a0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e6:	f108 0801 	add.w	r8, r8, #1
 800a0ea:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a0ee:	3508      	adds	r5, #8
 800a0f0:	e7c6      	b.n	800a080 <__kernel_rem_pio2+0x6c>
 800a0f2:	9b02      	ldr	r3, [sp, #8]
 800a0f4:	aa0c      	add	r2, sp, #48	@ 0x30
 800a0f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0fc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a0fe:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a102:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a106:	930a      	str	r3, [sp, #40]	@ 0x28
 800a108:	ab98      	add	r3, sp, #608	@ 0x260
 800a10a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a10e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a112:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a114:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a118:	ae0c      	add	r6, sp, #48	@ 0x30
 800a11a:	4698      	mov	r8, r3
 800a11c:	46b1      	mov	r9, r6
 800a11e:	465f      	mov	r7, fp
 800a120:	9307      	str	r3, [sp, #28]
 800a122:	2f00      	cmp	r7, #0
 800a124:	f1a8 0808 	sub.w	r8, r8, #8
 800a128:	dc71      	bgt.n	800a20e <__kernel_rem_pio2+0x1fa>
 800a12a:	4652      	mov	r2, sl
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f000 fa96 	bl	800a660 <scalbn>
 800a134:	2200      	movs	r2, #0
 800a136:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a13a:	4604      	mov	r4, r0
 800a13c:	460d      	mov	r5, r1
 800a13e:	f7f6 f9cb 	bl	80004d8 <__aeabi_dmul>
 800a142:	f000 fb05 	bl	800a750 <floor>
 800a146:	2200      	movs	r2, #0
 800a148:	4b6d      	ldr	r3, [pc, #436]	@ (800a300 <__kernel_rem_pio2+0x2ec>)
 800a14a:	f7f6 f9c5 	bl	80004d8 <__aeabi_dmul>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4620      	mov	r0, r4
 800a154:	4629      	mov	r1, r5
 800a156:	f7f6 f807 	bl	8000168 <__aeabi_dsub>
 800a15a:	460d      	mov	r5, r1
 800a15c:	4604      	mov	r4, r0
 800a15e:	f7f6 fc6b 	bl	8000a38 <__aeabi_d2iz>
 800a162:	9005      	str	r0, [sp, #20]
 800a164:	f7f6 f94e 	bl	8000404 <__aeabi_i2d>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4620      	mov	r0, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	f7f5 fffa 	bl	8000168 <__aeabi_dsub>
 800a174:	f1ba 0f00 	cmp.w	sl, #0
 800a178:	4680      	mov	r8, r0
 800a17a:	4689      	mov	r9, r1
 800a17c:	dd6d      	ble.n	800a25a <__kernel_rem_pio2+0x246>
 800a17e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a182:	ab0c      	add	r3, sp, #48	@ 0x30
 800a184:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a188:	9c05      	ldr	r4, [sp, #20]
 800a18a:	f1ca 0018 	rsb	r0, sl, #24
 800a18e:	fa43 f200 	asr.w	r2, r3, r0
 800a192:	4414      	add	r4, r2
 800a194:	4082      	lsls	r2, r0
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	aa0c      	add	r2, sp, #48	@ 0x30
 800a19a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a19e:	f1ca 0217 	rsb	r2, sl, #23
 800a1a2:	9405      	str	r4, [sp, #20]
 800a1a4:	4113      	asrs	r3, r2
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	9b00      	ldr	r3, [sp, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	dd64      	ble.n	800a278 <__kernel_rem_pio2+0x264>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a1b4:	4614      	mov	r4, r2
 800a1b6:	9b05      	ldr	r3, [sp, #20]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	9305      	str	r3, [sp, #20]
 800a1bc:	4593      	cmp	fp, r2
 800a1be:	f300 80ab 	bgt.w	800a318 <__kernel_rem_pio2+0x304>
 800a1c2:	f1ba 0f00 	cmp.w	sl, #0
 800a1c6:	dd07      	ble.n	800a1d8 <__kernel_rem_pio2+0x1c4>
 800a1c8:	f1ba 0f01 	cmp.w	sl, #1
 800a1cc:	f000 80b2 	beq.w	800a334 <__kernel_rem_pio2+0x320>
 800a1d0:	f1ba 0f02 	cmp.w	sl, #2
 800a1d4:	f000 80b9 	beq.w	800a34a <__kernel_rem_pio2+0x336>
 800a1d8:	9b00      	ldr	r3, [sp, #0]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d14c      	bne.n	800a278 <__kernel_rem_pio2+0x264>
 800a1de:	4642      	mov	r2, r8
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	4947      	ldr	r1, [pc, #284]	@ (800a304 <__kernel_rem_pio2+0x2f0>)
 800a1e6:	f7f5 ffbf 	bl	8000168 <__aeabi_dsub>
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	4689      	mov	r9, r1
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	d042      	beq.n	800a278 <__kernel_rem_pio2+0x264>
 800a1f2:	4652      	mov	r2, sl
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	4943      	ldr	r1, [pc, #268]	@ (800a304 <__kernel_rem_pio2+0x2f0>)
 800a1f8:	f000 fa32 	bl	800a660 <scalbn>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f5 ffb0 	bl	8000168 <__aeabi_dsub>
 800a208:	4680      	mov	r8, r0
 800a20a:	4689      	mov	r9, r1
 800a20c:	e034      	b.n	800a278 <__kernel_rem_pio2+0x264>
 800a20e:	2200      	movs	r2, #0
 800a210:	4b3d      	ldr	r3, [pc, #244]	@ (800a308 <__kernel_rem_pio2+0x2f4>)
 800a212:	4620      	mov	r0, r4
 800a214:	4629      	mov	r1, r5
 800a216:	f7f6 f95f 	bl	80004d8 <__aeabi_dmul>
 800a21a:	f7f6 fc0d 	bl	8000a38 <__aeabi_d2iz>
 800a21e:	f7f6 f8f1 	bl	8000404 <__aeabi_i2d>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	e9cd 2300 	strd	r2, r3, [sp]
 800a22a:	2200      	movs	r2, #0
 800a22c:	4b37      	ldr	r3, [pc, #220]	@ (800a30c <__kernel_rem_pio2+0x2f8>)
 800a22e:	f7f6 f953 	bl	80004d8 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f5 ff95 	bl	8000168 <__aeabi_dsub>
 800a23e:	f7f6 fbfb 	bl	8000a38 <__aeabi_d2iz>
 800a242:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a246:	f849 0b04 	str.w	r0, [r9], #4
 800a24a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a24e:	f7f5 ff8d 	bl	800016c <__adddf3>
 800a252:	3f01      	subs	r7, #1
 800a254:	4604      	mov	r4, r0
 800a256:	460d      	mov	r5, r1
 800a258:	e763      	b.n	800a122 <__kernel_rem_pio2+0x10e>
 800a25a:	d106      	bne.n	800a26a <__kernel_rem_pio2+0x256>
 800a25c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a260:	aa0c      	add	r2, sp, #48	@ 0x30
 800a262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a266:	15db      	asrs	r3, r3, #23
 800a268:	e79d      	b.n	800a1a6 <__kernel_rem_pio2+0x192>
 800a26a:	2200      	movs	r2, #0
 800a26c:	4b28      	ldr	r3, [pc, #160]	@ (800a310 <__kernel_rem_pio2+0x2fc>)
 800a26e:	f7f6 fbb9 	bl	80009e4 <__aeabi_dcmpge>
 800a272:	2800      	cmp	r0, #0
 800a274:	d13f      	bne.n	800a2f6 <__kernel_rem_pio2+0x2e2>
 800a276:	9000      	str	r0, [sp, #0]
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f6 fb92 	bl	80009a8 <__aeabi_dcmpeq>
 800a284:	2800      	cmp	r0, #0
 800a286:	f000 80af 	beq.w	800a3e8 <__kernel_rem_pio2+0x3d4>
 800a28a:	2200      	movs	r2, #0
 800a28c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a290:	9902      	ldr	r1, [sp, #8]
 800a292:	428b      	cmp	r3, r1
 800a294:	da61      	bge.n	800a35a <__kernel_rem_pio2+0x346>
 800a296:	2a00      	cmp	r2, #0
 800a298:	d076      	beq.n	800a388 <__kernel_rem_pio2+0x374>
 800a29a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a29e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a2a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a2a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0f6      	beq.n	800a29a <__kernel_rem_pio2+0x286>
 800a2ac:	4652      	mov	r2, sl
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	4914      	ldr	r1, [pc, #80]	@ (800a304 <__kernel_rem_pio2+0x2f0>)
 800a2b2:	f000 f9d5 	bl	800a660 <scalbn>
 800a2b6:	465d      	mov	r5, fp
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	460f      	mov	r7, r1
 800a2bc:	f04f 0900 	mov.w	r9, #0
 800a2c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a2c2:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a308 <__kernel_rem_pio2+0x2f4>
 800a2c6:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a2ca:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	f280 80c0 	bge.w	800a454 <__kernel_rem_pio2+0x440>
 800a2d4:	465d      	mov	r5, fp
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	f2c0 80f0 	blt.w	800a4bc <__kernel_rem_pio2+0x4a8>
 800a2dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a314 <__kernel_rem_pio2+0x300>)
 800a2de:	f04f 0900 	mov.w	r9, #0
 800a2e2:	9306      	str	r3, [sp, #24]
 800a2e4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a2e6:	f04f 0a00 	mov.w	sl, #0
 800a2ea:	2700      	movs	r7, #0
 800a2ec:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a2f0:	ebab 0605 	sub.w	r6, fp, r5
 800a2f4:	e0d6      	b.n	800a4a4 <__kernel_rem_pio2+0x490>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	e758      	b.n	800a1ae <__kernel_rem_pio2+0x19a>
 800a2fc:	0800b618 	.word	0x0800b618
 800a300:	40200000 	.word	0x40200000
 800a304:	3ff00000 	.word	0x3ff00000
 800a308:	3e700000 	.word	0x3e700000
 800a30c:	41700000 	.word	0x41700000
 800a310:	3fe00000 	.word	0x3fe00000
 800a314:	0800b5d8 	.word	0x0800b5d8
 800a318:	f856 3b04 	ldr.w	r3, [r6], #4
 800a31c:	b944      	cbnz	r4, 800a330 <__kernel_rem_pio2+0x31c>
 800a31e:	b123      	cbz	r3, 800a32a <__kernel_rem_pio2+0x316>
 800a320:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a324:	f846 3c04 	str.w	r3, [r6, #-4]
 800a328:	2301      	movs	r3, #1
 800a32a:	461c      	mov	r4, r3
 800a32c:	3201      	adds	r2, #1
 800a32e:	e745      	b.n	800a1bc <__kernel_rem_pio2+0x1a8>
 800a330:	1acb      	subs	r3, r1, r3
 800a332:	e7f7      	b.n	800a324 <__kernel_rem_pio2+0x310>
 800a334:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a338:	ab0c      	add	r3, sp, #48	@ 0x30
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a342:	a90c      	add	r1, sp, #48	@ 0x30
 800a344:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a348:	e746      	b.n	800a1d8 <__kernel_rem_pio2+0x1c4>
 800a34a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a34e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a358:	e7f3      	b.n	800a342 <__kernel_rem_pio2+0x32e>
 800a35a:	a90c      	add	r1, sp, #48	@ 0x30
 800a35c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a360:	3b01      	subs	r3, #1
 800a362:	430a      	orrs	r2, r1
 800a364:	e794      	b.n	800a290 <__kernel_rem_pio2+0x27c>
 800a366:	3401      	adds	r4, #1
 800a368:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a36c:	2a00      	cmp	r2, #0
 800a36e:	d0fa      	beq.n	800a366 <__kernel_rem_pio2+0x352>
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	aa20      	add	r2, sp, #128	@ 0x80
 800a374:	445b      	add	r3, fp
 800a376:	f10b 0801 	add.w	r8, fp, #1
 800a37a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a37e:	445c      	add	r4, fp
 800a380:	4544      	cmp	r4, r8
 800a382:	da04      	bge.n	800a38e <__kernel_rem_pio2+0x37a>
 800a384:	46a3      	mov	fp, r4
 800a386:	e6bf      	b.n	800a108 <__kernel_rem_pio2+0xf4>
 800a388:	2401      	movs	r4, #1
 800a38a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a38c:	e7ec      	b.n	800a368 <__kernel_rem_pio2+0x354>
 800a38e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a390:	46ab      	mov	fp, r5
 800a392:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a396:	f7f6 f835 	bl	8000404 <__aeabi_i2d>
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	2600      	movs	r6, #0
 800a3a0:	2700      	movs	r7, #0
 800a3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a4:	e9c5 0100 	strd	r0, r1, [r5]
 800a3a8:	3b08      	subs	r3, #8
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	9b06      	ldr	r3, [sp, #24]
 800a3ae:	4599      	cmp	r9, r3
 800a3b0:	dd07      	ble.n	800a3c2 <__kernel_rem_pio2+0x3ae>
 800a3b2:	9b07      	ldr	r3, [sp, #28]
 800a3b4:	f108 0801 	add.w	r8, r8, #1
 800a3b8:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a3bc:	3508      	adds	r5, #8
 800a3be:	9307      	str	r3, [sp, #28]
 800a3c0:	e7de      	b.n	800a380 <__kernel_rem_pio2+0x36c>
 800a3c2:	9900      	ldr	r1, [sp, #0]
 800a3c4:	f109 0901 	add.w	r9, r9, #1
 800a3c8:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a3cc:	9100      	str	r1, [sp, #0]
 800a3ce:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4630      	mov	r0, r6
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f5 fec5 	bl	800016c <__adddf3>
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	e7e1      	b.n	800a3ac <__kernel_rem_pio2+0x398>
 800a3e8:	f1ca 0200 	rsb	r2, sl, #0
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f000 f936 	bl	800a660 <scalbn>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4b97      	ldr	r3, [pc, #604]	@ (800a654 <__kernel_rem_pio2+0x640>)
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	f7f6 faf2 	bl	80009e4 <__aeabi_dcmpge>
 800a400:	b300      	cbz	r0, 800a444 <__kernel_rem_pio2+0x430>
 800a402:	2200      	movs	r2, #0
 800a404:	4b94      	ldr	r3, [pc, #592]	@ (800a658 <__kernel_rem_pio2+0x644>)
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f6 f865 	bl	80004d8 <__aeabi_dmul>
 800a40e:	f7f6 fb13 	bl	8000a38 <__aeabi_d2iz>
 800a412:	4606      	mov	r6, r0
 800a414:	f7f5 fff6 	bl	8000404 <__aeabi_i2d>
 800a418:	2200      	movs	r2, #0
 800a41a:	4b8e      	ldr	r3, [pc, #568]	@ (800a654 <__kernel_rem_pio2+0x640>)
 800a41c:	f7f6 f85c 	bl	80004d8 <__aeabi_dmul>
 800a420:	460b      	mov	r3, r1
 800a422:	4602      	mov	r2, r0
 800a424:	4629      	mov	r1, r5
 800a426:	4620      	mov	r0, r4
 800a428:	f7f5 fe9e 	bl	8000168 <__aeabi_dsub>
 800a42c:	f7f6 fb04 	bl	8000a38 <__aeabi_d2iz>
 800a430:	ab0c      	add	r3, sp, #48	@ 0x30
 800a432:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a436:	f10b 0b01 	add.w	fp, fp, #1
 800a43a:	f10a 0a18 	add.w	sl, sl, #24
 800a43e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a442:	e733      	b.n	800a2ac <__kernel_rem_pio2+0x298>
 800a444:	4620      	mov	r0, r4
 800a446:	4629      	mov	r1, r5
 800a448:	f7f6 faf6 	bl	8000a38 <__aeabi_d2iz>
 800a44c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a44e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a452:	e72b      	b.n	800a2ac <__kernel_rem_pio2+0x298>
 800a454:	ab0c      	add	r3, sp, #48	@ 0x30
 800a456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a45a:	f7f5 ffd3 	bl	8000404 <__aeabi_i2d>
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	f7f6 f839 	bl	80004d8 <__aeabi_dmul>
 800a466:	464a      	mov	r2, r9
 800a468:	e868 0102 	strd	r0, r1, [r8], #-8
 800a46c:	4653      	mov	r3, sl
 800a46e:	4630      	mov	r0, r6
 800a470:	4639      	mov	r1, r7
 800a472:	f7f6 f831 	bl	80004d8 <__aeabi_dmul>
 800a476:	3d01      	subs	r5, #1
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	e727      	b.n	800a2ce <__kernel_rem_pio2+0x2ba>
 800a47e:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a482:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a486:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a48a:	f8cd c018 	str.w	ip, [sp, #24]
 800a48e:	f7f6 f823 	bl	80004d8 <__aeabi_dmul>
 800a492:	4602      	mov	r2, r0
 800a494:	460b      	mov	r3, r1
 800a496:	4648      	mov	r0, r9
 800a498:	4651      	mov	r1, sl
 800a49a:	f7f5 fe67 	bl	800016c <__adddf3>
 800a49e:	4681      	mov	r9, r0
 800a4a0:	468a      	mov	sl, r1
 800a4a2:	3701      	adds	r7, #1
 800a4a4:	9b02      	ldr	r3, [sp, #8]
 800a4a6:	429f      	cmp	r7, r3
 800a4a8:	dc01      	bgt.n	800a4ae <__kernel_rem_pio2+0x49a>
 800a4aa:	42be      	cmp	r6, r7
 800a4ac:	dae7      	bge.n	800a47e <__kernel_rem_pio2+0x46a>
 800a4ae:	ab48      	add	r3, sp, #288	@ 0x120
 800a4b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a4b4:	e9c6 9a00 	strd	r9, sl, [r6]
 800a4b8:	3d01      	subs	r5, #1
 800a4ba:	e70c      	b.n	800a2d6 <__kernel_rem_pio2+0x2c2>
 800a4bc:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	dc09      	bgt.n	800a4d6 <__kernel_rem_pio2+0x4c2>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dc2c      	bgt.n	800a520 <__kernel_rem_pio2+0x50c>
 800a4c6:	d04e      	beq.n	800a566 <__kernel_rem_pio2+0x552>
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	f003 0007 	and.w	r0, r3, #7
 800a4ce:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d1f5      	bne.n	800a4c8 <__kernel_rem_pio2+0x4b4>
 800a4dc:	ab48      	add	r3, sp, #288	@ 0x120
 800a4de:	441c      	add	r4, r3
 800a4e0:	4625      	mov	r5, r4
 800a4e2:	46da      	mov	sl, fp
 800a4e4:	f1ba 0f00 	cmp.w	sl, #0
 800a4e8:	dc63      	bgt.n	800a5b2 <__kernel_rem_pio2+0x59e>
 800a4ea:	4625      	mov	r5, r4
 800a4ec:	46da      	mov	sl, fp
 800a4ee:	f1ba 0f01 	cmp.w	sl, #1
 800a4f2:	dc7b      	bgt.n	800a5ec <__kernel_rem_pio2+0x5d8>
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	f1bb 0f01 	cmp.w	fp, #1
 800a4fc:	f300 8093 	bgt.w	800a626 <__kernel_rem_pio2+0x612>
 800a500:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a504:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f040 8092 	bne.w	800a634 <__kernel_rem_pio2+0x620>
 800a510:	9b04      	ldr	r3, [sp, #16]
 800a512:	e9c3 7800 	strd	r7, r8, [r3]
 800a516:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a51a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a51e:	e7d3      	b.n	800a4c8 <__kernel_rem_pio2+0x4b4>
 800a520:	465d      	mov	r5, fp
 800a522:	2000      	movs	r0, #0
 800a524:	2100      	movs	r1, #0
 800a526:	ab48      	add	r3, sp, #288	@ 0x120
 800a528:	441c      	add	r4, r3
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	da32      	bge.n	800a594 <__kernel_rem_pio2+0x580>
 800a52e:	9b00      	ldr	r3, [sp, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d035      	beq.n	800a5a0 <__kernel_rem_pio2+0x58c>
 800a534:	4602      	mov	r2, r0
 800a536:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a53a:	9c04      	ldr	r4, [sp, #16]
 800a53c:	2501      	movs	r5, #1
 800a53e:	e9c4 2300 	strd	r2, r3, [r4]
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a54a:	f7f5 fe0d 	bl	8000168 <__aeabi_dsub>
 800a54e:	ac48      	add	r4, sp, #288	@ 0x120
 800a550:	45ab      	cmp	fp, r5
 800a552:	da28      	bge.n	800a5a6 <__kernel_rem_pio2+0x592>
 800a554:	9b00      	ldr	r3, [sp, #0]
 800a556:	b113      	cbz	r3, 800a55e <__kernel_rem_pio2+0x54a>
 800a558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a55c:	4619      	mov	r1, r3
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a564:	e7b0      	b.n	800a4c8 <__kernel_rem_pio2+0x4b4>
 800a566:	2000      	movs	r0, #0
 800a568:	2100      	movs	r1, #0
 800a56a:	ab48      	add	r3, sp, #288	@ 0x120
 800a56c:	441c      	add	r4, r3
 800a56e:	f1bb 0f00 	cmp.w	fp, #0
 800a572:	da08      	bge.n	800a586 <__kernel_rem_pio2+0x572>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	b113      	cbz	r3, 800a57e <__kernel_rem_pio2+0x56a>
 800a578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a57c:	4619      	mov	r1, r3
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	e9c3 0100 	strd	r0, r1, [r3]
 800a584:	e7a0      	b.n	800a4c8 <__kernel_rem_pio2+0x4b4>
 800a586:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a58a:	f7f5 fdef 	bl	800016c <__adddf3>
 800a58e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a592:	e7ec      	b.n	800a56e <__kernel_rem_pio2+0x55a>
 800a594:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a598:	f7f5 fde8 	bl	800016c <__adddf3>
 800a59c:	3d01      	subs	r5, #1
 800a59e:	e7c4      	b.n	800a52a <__kernel_rem_pio2+0x516>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	e7c9      	b.n	800a53a <__kernel_rem_pio2+0x526>
 800a5a6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a5aa:	f7f5 fddf 	bl	800016c <__adddf3>
 800a5ae:	3501      	adds	r5, #1
 800a5b0:	e7ce      	b.n	800a550 <__kernel_rem_pio2+0x53c>
 800a5b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b6:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	4649      	mov	r1, r9
 800a5be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5c2:	f7f5 fdd3 	bl	800016c <__adddf3>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460f      	mov	r7, r1
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f5 fdc9 	bl	8000168 <__aeabi_dsub>
 800a5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5da:	f7f5 fdc7 	bl	800016c <__adddf3>
 800a5de:	e865 0102 	strd	r0, r1, [r5], #-8
 800a5e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5e6:	e9c5 6700 	strd	r6, r7, [r5]
 800a5ea:	e77b      	b.n	800a4e4 <__kernel_rem_pio2+0x4d0>
 800a5ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5f0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5fc:	f7f5 fdb6 	bl	800016c <__adddf3>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f5 fdac 	bl	8000168 <__aeabi_dsub>
 800a610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a614:	f7f5 fdaa 	bl	800016c <__adddf3>
 800a618:	e865 0102 	strd	r0, r1, [r5], #-8
 800a61c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a620:	e9c5 6700 	strd	r6, r7, [r5]
 800a624:	e763      	b.n	800a4ee <__kernel_rem_pio2+0x4da>
 800a626:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a62a:	f7f5 fd9f 	bl	800016c <__adddf3>
 800a62e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a632:	e761      	b.n	800a4f8 <__kernel_rem_pio2+0x4e4>
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	9a04      	ldr	r2, [sp, #16]
 800a638:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a63c:	601f      	str	r7, [r3, #0]
 800a63e:	605c      	str	r4, [r3, #4]
 800a640:	609d      	str	r5, [r3, #8]
 800a642:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a646:	60d3      	str	r3, [r2, #12]
 800a648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a64c:	6110      	str	r0, [r2, #16]
 800a64e:	6153      	str	r3, [r2, #20]
 800a650:	e73a      	b.n	800a4c8 <__kernel_rem_pio2+0x4b4>
 800a652:	bf00      	nop
 800a654:	41700000 	.word	0x41700000
 800a658:	3e700000 	.word	0x3e700000
 800a65c:	00000000 	.word	0x00000000

0800a660 <scalbn>:
 800a660:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a664:	4616      	mov	r6, r2
 800a666:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a66a:	4683      	mov	fp, r0
 800a66c:	468c      	mov	ip, r1
 800a66e:	460b      	mov	r3, r1
 800a670:	b982      	cbnz	r2, 800a694 <scalbn+0x34>
 800a672:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a676:	4303      	orrs	r3, r0
 800a678:	d039      	beq.n	800a6ee <scalbn+0x8e>
 800a67a:	4b2f      	ldr	r3, [pc, #188]	@ (800a738 <scalbn+0xd8>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_dmul>
 800a682:	4b2e      	ldr	r3, [pc, #184]	@ (800a73c <scalbn+0xdc>)
 800a684:	4683      	mov	fp, r0
 800a686:	429e      	cmp	r6, r3
 800a688:	468c      	mov	ip, r1
 800a68a:	da0d      	bge.n	800a6a8 <scalbn+0x48>
 800a68c:	a326      	add	r3, pc, #152	@ (adr r3, 800a728 <scalbn+0xc8>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	e01b      	b.n	800a6cc <scalbn+0x6c>
 800a694:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a698:	42ba      	cmp	r2, r7
 800a69a:	d109      	bne.n	800a6b0 <scalbn+0x50>
 800a69c:	4602      	mov	r2, r0
 800a69e:	f7f5 fd65 	bl	800016c <__adddf3>
 800a6a2:	4683      	mov	fp, r0
 800a6a4:	468c      	mov	ip, r1
 800a6a6:	e022      	b.n	800a6ee <scalbn+0x8e>
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a6ae:	3a36      	subs	r2, #54	@ 0x36
 800a6b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a6b4:	428e      	cmp	r6, r1
 800a6b6:	dd0c      	ble.n	800a6d2 <scalbn+0x72>
 800a6b8:	a31d      	add	r3, pc, #116	@ (adr r3, 800a730 <scalbn+0xd0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	461c      	mov	r4, r3
 800a6c0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a6c4:	f361 74df 	bfi	r4, r1, #31, #1
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	481d      	ldr	r0, [pc, #116]	@ (800a740 <scalbn+0xe0>)
 800a6cc:	f7f5 ff04 	bl	80004d8 <__aeabi_dmul>
 800a6d0:	e7e7      	b.n	800a6a2 <scalbn+0x42>
 800a6d2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a6d6:	4432      	add	r2, r6
 800a6d8:	428a      	cmp	r2, r1
 800a6da:	dced      	bgt.n	800a6b8 <scalbn+0x58>
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	dd0a      	ble.n	800a6f6 <scalbn+0x96>
 800a6e0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6ec:	46ac      	mov	ip, r5
 800a6ee:	4658      	mov	r0, fp
 800a6f0:	4661      	mov	r1, ip
 800a6f2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a6f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a6fa:	da09      	bge.n	800a710 <scalbn+0xb0>
 800a6fc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a700:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a704:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a708:	480e      	ldr	r0, [pc, #56]	@ (800a744 <scalbn+0xe4>)
 800a70a:	f041 011f 	orr.w	r1, r1, #31
 800a70e:	e7bd      	b.n	800a68c <scalbn+0x2c>
 800a710:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a714:	3236      	adds	r2, #54	@ 0x36
 800a716:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a71a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a71e:	4658      	mov	r0, fp
 800a720:	4629      	mov	r1, r5
 800a722:	2200      	movs	r2, #0
 800a724:	4b08      	ldr	r3, [pc, #32]	@ (800a748 <scalbn+0xe8>)
 800a726:	e7d1      	b.n	800a6cc <scalbn+0x6c>
 800a728:	c2f8f359 	.word	0xc2f8f359
 800a72c:	01a56e1f 	.word	0x01a56e1f
 800a730:	8800759c 	.word	0x8800759c
 800a734:	7e37e43c 	.word	0x7e37e43c
 800a738:	43500000 	.word	0x43500000
 800a73c:	ffff3cb0 	.word	0xffff3cb0
 800a740:	8800759c 	.word	0x8800759c
 800a744:	c2f8f359 	.word	0xc2f8f359
 800a748:	3c900000 	.word	0x3c900000
 800a74c:	00000000 	.word	0x00000000

0800a750 <floor>:
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a758:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a75c:	2e13      	cmp	r6, #19
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	460c      	mov	r4, r1
 800a764:	4605      	mov	r5, r0
 800a766:	4680      	mov	r8, r0
 800a768:	dc35      	bgt.n	800a7d6 <floor+0x86>
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	da17      	bge.n	800a79e <floor+0x4e>
 800a76e:	a334      	add	r3, pc, #208	@ (adr r3, 800a840 <floor+0xf0>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fcfa 	bl	800016c <__adddf3>
 800a778:	2200      	movs	r2, #0
 800a77a:	2300      	movs	r3, #0
 800a77c:	f7f6 f93c 	bl	80009f8 <__aeabi_dcmpgt>
 800a780:	b150      	cbz	r0, 800a798 <floor+0x48>
 800a782:	2c00      	cmp	r4, #0
 800a784:	da57      	bge.n	800a836 <floor+0xe6>
 800a786:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a78a:	432c      	orrs	r4, r5
 800a78c:	2500      	movs	r5, #0
 800a78e:	42ac      	cmp	r4, r5
 800a790:	4c2d      	ldr	r4, [pc, #180]	@ (800a848 <floor+0xf8>)
 800a792:	bf08      	it	eq
 800a794:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a798:	4623      	mov	r3, r4
 800a79a:	462a      	mov	r2, r5
 800a79c:	e024      	b.n	800a7e8 <floor+0x98>
 800a79e:	4f2b      	ldr	r7, [pc, #172]	@ (800a84c <floor+0xfc>)
 800a7a0:	4137      	asrs	r7, r6
 800a7a2:	ea01 0c07 	and.w	ip, r1, r7
 800a7a6:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a7aa:	d01d      	beq.n	800a7e8 <floor+0x98>
 800a7ac:	a324      	add	r3, pc, #144	@ (adr r3, 800a840 <floor+0xf0>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f7f5 fcdb 	bl	800016c <__adddf3>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f7f6 f91d 	bl	80009f8 <__aeabi_dcmpgt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0ea      	beq.n	800a798 <floor+0x48>
 800a7c2:	2c00      	cmp	r4, #0
 800a7c4:	bfbe      	ittt	lt
 800a7c6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a7ca:	4133      	asrlt	r3, r6
 800a7cc:	18e4      	addlt	r4, r4, r3
 800a7ce:	2500      	movs	r5, #0
 800a7d0:	ea24 0407 	bic.w	r4, r4, r7
 800a7d4:	e7e0      	b.n	800a798 <floor+0x48>
 800a7d6:	2e33      	cmp	r6, #51	@ 0x33
 800a7d8:	dd0a      	ble.n	800a7f0 <floor+0xa0>
 800a7da:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a7de:	d103      	bne.n	800a7e8 <floor+0x98>
 800a7e0:	f7f5 fcc4 	bl	800016c <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f0:	f04f 3cff 	mov.w	ip, #4294967295
 800a7f4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a7f8:	fa2c f707 	lsr.w	r7, ip, r7
 800a7fc:	4207      	tst	r7, r0
 800a7fe:	d0f3      	beq.n	800a7e8 <floor+0x98>
 800a800:	a30f      	add	r3, pc, #60	@ (adr r3, 800a840 <floor+0xf0>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 fcb1 	bl	800016c <__adddf3>
 800a80a:	2200      	movs	r2, #0
 800a80c:	2300      	movs	r3, #0
 800a80e:	f7f6 f8f3 	bl	80009f8 <__aeabi_dcmpgt>
 800a812:	2800      	cmp	r0, #0
 800a814:	d0c0      	beq.n	800a798 <floor+0x48>
 800a816:	2c00      	cmp	r4, #0
 800a818:	da0a      	bge.n	800a830 <floor+0xe0>
 800a81a:	2e14      	cmp	r6, #20
 800a81c:	d101      	bne.n	800a822 <floor+0xd2>
 800a81e:	3401      	adds	r4, #1
 800a820:	e006      	b.n	800a830 <floor+0xe0>
 800a822:	2301      	movs	r3, #1
 800a824:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a828:	40b3      	lsls	r3, r6
 800a82a:	441d      	add	r5, r3
 800a82c:	4545      	cmp	r5, r8
 800a82e:	d3f6      	bcc.n	800a81e <floor+0xce>
 800a830:	ea25 0507 	bic.w	r5, r5, r7
 800a834:	e7b0      	b.n	800a798 <floor+0x48>
 800a836:	2500      	movs	r5, #0
 800a838:	462c      	mov	r4, r5
 800a83a:	e7ad      	b.n	800a798 <floor+0x48>
 800a83c:	f3af 8000 	nop.w
 800a840:	8800759c 	.word	0x8800759c
 800a844:	7e37e43c 	.word	0x7e37e43c
 800a848:	bff00000 	.word	0xbff00000
 800a84c:	000fffff 	.word	0x000fffff

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
