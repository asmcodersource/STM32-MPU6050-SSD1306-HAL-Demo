
CourseProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a720  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc0  0800a830  0800a830  0000b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f0  0800b5f0  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5f0  0800b5f0  0000c5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f8  0800b5f8  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f8  0800b5f8  0000c5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5fc  0800b5fc  0000c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800b600  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000278  0800b878  0000d278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800b878  0000d8e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f74  00000000  00000000  0000d2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002058  00000000  00000000  00016215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00018270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000701  00000000  00000000  00018bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f57  00000000  00000000  000192c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e34f  00000000  00000000  00031218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a50  00000000  00000000  0003f567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  000c4ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000c8c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a818 	.word	0x0800a818

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800a818 	.word	0x0800a818

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <MX_GPIO_Init+0x98>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_GPIO_Init+0x9c>)
 800111a:	f001 fea7 	bl	8002e6c <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40010c00 	.word	0x40010c00

08001130 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f002 f819 	bl	80031a4 <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 f978 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	40005400 	.word	0x40005400
 8001188:	00061a80 	.word	0x00061a80

0800118c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_I2C2_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011ca:	f001 ffeb 	bl	80031a4 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f94a 	bl	800146c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002e8 	.word	0x200002e8
 80011e0:	40005800 	.word	0x40005800
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2b      	ldr	r2, [pc, #172]	@ (80012b0 <HAL_I2C_MspInit+0xc8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d124      	bne.n	8001252 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b2a      	ldr	r3, [pc, #168]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a29      	ldr	r2, [pc, #164]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001220:	23c0      	movs	r3, #192	@ 0xc0
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001224:	2312      	movs	r3, #18
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4619      	mov	r1, r3
 8001232:	4821      	ldr	r0, [pc, #132]	@ (80012b8 <HAL_I2C_MspInit+0xd0>)
 8001234:	f001 fe1a 	bl	8002e6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800123e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001242:	61d3      	str	r3, [r2, #28]
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001250:	e029      	b.n	80012a6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a19      	ldr	r2, [pc, #100]	@ (80012bc <HAL_I2C_MspInit+0xd4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d124      	bne.n	80012a6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001274:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	4619      	mov	r1, r3
 8001288:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <HAL_I2C_MspInit+0xd0>)
 800128a:	f001 fdef 	bl	8002e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001298:	61d3      	str	r3, [r2, #28]
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_I2C_MspInit+0xcc>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	40005800 	.word	0x40005800

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b0ac      	sub	sp, #176	@ 0xb0
 80012c4:	af14      	add	r7, sp, #80	@ 0x50

  /* USER CODE BEGIN 1 */
  MPU6050_t MPU6050;
  int currentScreen = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f001 fc65 	bl	8002b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f861 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f7ff fedd 	bl	8001090 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012d6:	f7ff ff2b 	bl	8001130 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012da:	f7ff ff57 	bl	800118c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c2) == 1);
 80012de:	bf00      	nop
 80012e0:	482b      	ldr	r0, [pc, #172]	@ (8001390 <main+0xd0>)
 80012e2:	f000 f8c9 	bl	8001478 <MPU6050_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d0f9      	beq.n	80012e0 <main+0x20>
  ssd1306_Init();
 80012ec:	f000 fc86 	bl	8001bfc <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MPU6050_Read_All(&hi2c2, &MPU6050);
 80012f0:	463b      	mov	r3, r7
 80012f2:	4619      	mov	r1, r3
 80012f4:	4826      	ldr	r0, [pc, #152]	@ (8001390 <main+0xd0>)
 80012f6:	f000 f917 	bl	8001528 <MPU6050_Read_All>
	HAL_Delay (50);
 80012fa:	2032      	movs	r0, #50	@ 0x32
 80012fc:	f001 fcae 	bl	8002c5c <HAL_Delay>

	if (buttonPressed()) {
 8001300:	f000 f88e 	bl	8001420 <buttonPressed>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <main+0x5a>
		currentScreen++;
 800130a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130c:	3301      	adds	r3, #1
 800130e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (currentScreen > 2) {
 8001310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001312:	2b02      	cmp	r3, #2
 8001314:	dd01      	ble.n	800131a <main+0x5a>
			currentScreen = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
	}

	ssd1306_Fill(Black);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 fcd8 	bl	8001cd0 <ssd1306_Fill>
	switch(currentScreen){
 8001320:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001322:	2b02      	cmp	r3, #2
 8001324:	d025      	beq.n	8001372 <main+0xb2>
 8001326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001328:	2b02      	cmp	r3, #2
 800132a:	dc2e      	bgt.n	800138a <main+0xca>
 800132c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <main+0x7a>
 8001332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d00e      	beq.n	8001356 <main+0x96>
 8001338:	e027      	b.n	800138a <main+0xca>
		case 0:
			displayOrthogonalScreen(MPU6050, X);
 800133a:	2300      	movs	r3, #0
 800133c:	9312      	str	r3, [sp, #72]	@ 0x48
 800133e:	4668      	mov	r0, sp
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2248      	movs	r2, #72	@ 0x48
 8001346:	4619      	mov	r1, r3
 8001348:	f004 fbc7 	bl	8005ada <memcpy>
 800134c:	463b      	mov	r3, r7
 800134e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001350:	f001 f868 	bl	8002424 <displayOrthogonalScreen>
			break;
 8001354:	e019      	b.n	800138a <main+0xca>
		case 1:
			displayOrthogonalScreen(MPU6050, Y);
 8001356:	2301      	movs	r3, #1
 8001358:	9312      	str	r3, [sp, #72]	@ 0x48
 800135a:	4668      	mov	r0, sp
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2248      	movs	r2, #72	@ 0x48
 8001362:	4619      	mov	r1, r3
 8001364:	f004 fbb9 	bl	8005ada <memcpy>
 8001368:	463b      	mov	r3, r7
 800136a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136c:	f001 f85a 	bl	8002424 <displayOrthogonalScreen>
			break;
 8001370:	e00b      	b.n	800138a <main+0xca>
		case 2:
			displayValuesScreen(MPU6050);
 8001372:	4668      	mov	r0, sp
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2248      	movs	r2, #72	@ 0x48
 800137a:	4619      	mov	r1, r3
 800137c:	f004 fbad 	bl	8005ada <memcpy>
 8001380:	463b      	mov	r3, r7
 8001382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001384:	f001 fa7c 	bl	8002880 <displayValuesScreen>
			break;
 8001388:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 800138a:	f000 fcb9 	bl	8001d00 <ssd1306_UpdateScreen>
	MPU6050_Read_All(&hi2c2, &MPU6050);
 800138e:	e7af      	b.n	80012f0 <main+0x30>
 8001390:	200002e8 	.word	0x200002e8

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b090      	sub	sp, #64	@ 0x40
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	2228      	movs	r2, #40	@ 0x28
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f004 fb0b 	bl	80059be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013d2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0318 	add.w	r3, r7, #24
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 ff47 	bl	8004270 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013e8:	f000 f840 	bl	800146c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f003 f9b4 	bl	8004774 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001412:	f000 f82b 	bl	800146c <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	@ 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <buttonPressed>:

/* USER CODE BEGIN 4 */
int buttonPressed(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
    static uint8_t lastButtonState = GPIO_PIN_RESET;
    uint8_t currentButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001426:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800142a:	480e      	ldr	r0, [pc, #56]	@ (8001464 <buttonPressed+0x44>)
 800142c:	f001 fea2 	bl	8003174 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]


    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <buttonPressed+0x48>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10a      	bne.n	8001452 <buttonPressed+0x32>
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <buttonPressed+0x32>
        HAL_Delay(BUTTON_DEBOUNCE_DELAY);
 8001442:	2014      	movs	r0, #20
 8001444:	f001 fc0a 	bl	8002c5c <HAL_Delay>
        lastButtonState = currentButtonState;
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <buttonPressed+0x48>)
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	7013      	strb	r3, [r2, #0]
        return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e003      	b.n	800145a <buttonPressed+0x3a>
    }

    lastButtonState = currentButtonState;
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <buttonPressed+0x48>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	7013      	strb	r3, [r2, #0]
    return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010c00 	.word	0x40010c00
 8001468:	2000033c 	.word	0x2000033c

0800146c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001470:	b672      	cpsid	i
}
 8001472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <Error_Handler+0x8>

08001478 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af04      	add	r7, sp, #16
 800147e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001480:	2364      	movs	r3, #100	@ 0x64
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	f107 030f 	add.w	r3, r7, #15
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	2275      	movs	r2, #117	@ 0x75
 8001492:	21d0      	movs	r1, #208	@ 0xd0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f002 f8c3 	bl	8003620 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b68      	cmp	r3, #104	@ 0x68
 800149e:	d13d      	bne.n	800151c <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80014a4:	2364      	movs	r3, #100	@ 0x64
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f107 030e 	add.w	r3, r7, #14
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	226b      	movs	r2, #107	@ 0x6b
 80014b6:	21d0      	movs	r1, #208	@ 0xd0
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f001 ffb7 	bl	800342c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80014be:	2307      	movs	r3, #7
 80014c0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80014c2:	2364      	movs	r3, #100	@ 0x64
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	2301      	movs	r3, #1
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	f107 030e 	add.w	r3, r7, #14
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	2219      	movs	r2, #25
 80014d4:	21d0      	movs	r1, #208	@ 0xd0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f001 ffa8 	bl	800342c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014e0:	2364      	movs	r3, #100	@ 0x64
 80014e2:	9302      	str	r3, [sp, #8]
 80014e4:	2301      	movs	r3, #1
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	f107 030e 	add.w	r3, r7, #14
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	221c      	movs	r2, #28
 80014f2:	21d0      	movs	r1, #208	@ 0xd0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f001 ff99 	bl	800342c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80014fe:	2364      	movs	r3, #100	@ 0x64
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2301      	movs	r3, #1
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	f107 030e 	add.w	r3, r7, #14
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	221b      	movs	r2, #27
 8001510:	21d0      	movs	r1, #208	@ 0xd0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 ff8a 	bl	800342c <HAL_I2C_Mem_Write>
        return 0;
 8001518:	2300      	movs	r3, #0
 800151a:	e000      	b.n	800151e <MPU6050_Init+0xa6>
    }
    return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800152c:	b094      	sub	sp, #80	@ 0x50
 800152e:	af04      	add	r7, sp, #16
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001534:	2364      	movs	r3, #100	@ 0x64
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	230e      	movs	r3, #14
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	223b      	movs	r2, #59	@ 0x3b
 8001546:	21d0      	movs	r1, #208	@ 0xd0
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f002 f869 	bl	8003620 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800154e:	7a3b      	ldrb	r3, [r7, #8]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	7a7b      	ldrb	r3, [r7, #9]
 8001556:	b21b      	sxth	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b21a      	sxth	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001560:	7abb      	ldrb	r3, [r7, #10]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	b21a      	sxth	r2, r3
 8001566:	7afb      	ldrb	r3, [r7, #11]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21a      	sxth	r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001572:	7b3b      	ldrb	r3, [r7, #12]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21a      	sxth	r2, r3
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21a      	sxth	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001592:	7c3b      	ldrb	r3, [r7, #16]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7c7b      	ldrb	r3, [r7, #17]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80015a4:	7cbb      	ldrb	r3, [r7, #18]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7cfb      	ldrb	r3, [r7, #19]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80015b6:	7d3b      	ldrb	r3, [r7, #20]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7d7b      	ldrb	r3, [r7, #21]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff18 	bl	8000404 <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b95      	ldr	r3, [pc, #596]	@ (8001830 <MPU6050_Read_All+0x308>)
 80015da:	f7ff f8a7 	bl	800072c <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ff08 	bl	8000404 <__aeabi_i2d>
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001830 <MPU6050_Read_All+0x308>)
 80015fa:	f7ff f897 	bl	800072c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	6839      	ldr	r1, [r7, #0]
 8001604:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fef8 	bl	8000404 <__aeabi_i2d>
 8001614:	a380      	add	r3, pc, #512	@ (adr r3, 8001818 <MPU6050_Read_All+0x2f0>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7ff f887 	bl	800072c <__aeabi_ddiv>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001628:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fb55 	bl	8000cdc <__aeabi_i2f>
 8001632:	4603      	mov	r3, r0
 8001634:	497f      	ldr	r1, [pc, #508]	@ (8001834 <MPU6050_Read_All+0x30c>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc58 	bl	8000eec <__aeabi_fdiv>
 800163c:	4603      	mov	r3, r0
 800163e:	497e      	ldr	r1, [pc, #504]	@ (8001838 <MPU6050_Read_All+0x310>)
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fa97 	bl	8000b74 <__addsf3>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fed5 	bl	8000404 <__aeabi_i2d>
 800165a:	a371      	add	r3, pc, #452	@ (adr r3, 8001820 <MPU6050_Read_All+0x2f8>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff f864 	bl	800072c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fec5 	bl	8000404 <__aeabi_i2d>
 800167a:	a369      	add	r3, pc, #420	@ (adr r3, 8001820 <MPU6050_Read_All+0x2f8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f854 	bl	800072c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	6839      	ldr	r1, [r7, #0]
 800168a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe feb5 	bl	8000404 <__aeabi_i2d>
 800169a:	a361      	add	r3, pc, #388	@ (adr r3, 8001820 <MPU6050_Read_All+0x2f8>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f844 	bl	800072c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80016ae:	f001 facb 	bl	8002c48 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b61      	ldr	r3, [pc, #388]	@ (800183c <MPU6050_Read_All+0x314>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fe92 	bl	80003e4 <__aeabi_ui2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001840 <MPU6050_Read_All+0x318>)
 80016c6:	f7ff f831 	bl	800072c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80016d2:	f001 fab9 	bl	8002c48 <HAL_GetTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a58      	ldr	r2, [pc, #352]	@ (800183c <MPU6050_Read_All+0x314>)
 80016da:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	461a      	mov	r2, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ea:	fb03 f202 	mul.w	r2, r3, r2
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016f4:	4619      	mov	r1, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe7e 	bl	8000404 <__aeabi_i2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f007 fd06 	bl	8009120 <sqrt>
 8001714:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001724:	f7ff f940 	bl	80009a8 <__aeabi_dcmpeq>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fe65 	bl	8000404 <__aeabi_i2d>
 800173a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800173e:	f7fe fff5 	bl	800072c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f007 fd0d 	bl	8009168 <atan>
 800174e:	a336      	add	r3, pc, #216	@ (adr r3, 8001828 <MPU6050_Read_All+0x300>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe fec0 	bl	80004d8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001760:	e005      	b.n	800176e <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	425b      	negs	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe44 	bl	8000404 <__aeabi_i2d>
 800177c:	4682      	mov	sl, r0
 800177e:	468b      	mov	fp, r1
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe3c 	bl	8000404 <__aeabi_i2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4650      	mov	r0, sl
 8001792:	4659      	mov	r1, fp
 8001794:	f007 fcc2 	bl	800911c <atan2>
 8001798:	a323      	add	r3, pc, #140	@ (adr r3, 8001828 <MPU6050_Read_All+0x300>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fe9b 	bl	80004d8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <MPU6050_Read_All+0x31c>)
 80017b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b4:	f7ff f902 	bl	80009bc <__aeabi_dcmplt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <MPU6050_Read_All+0x2ac>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001848 <MPU6050_Read_All+0x320>)
 80017ca:	f7ff f915 	bl	80009f8 <__aeabi_dcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d114      	bne.n	80017fe <MPU6050_Read_All+0x2d6>
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <MPU6050_Read_All+0x320>)
 80017da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017de:	f7ff f90b 	bl	80009f8 <__aeabi_dcmpgt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d033      	beq.n	8001850 <MPU6050_Read_All+0x328>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MPU6050_Read_All+0x31c>)
 80017f4:	f7ff f8e2 	bl	80009bc <__aeabi_dcmplt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d028      	beq.n	8001850 <MPU6050_Read_All+0x328>
    {
        KalmanY.angle = pitch;
 80017fe:	4913      	ldr	r1, [pc, #76]	@ (800184c <MPU6050_Read_All+0x324>)
 8001800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001804:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800180e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001812:	e030      	b.n	8001876 <MPU6050_Read_All+0x34e>
 8001814:	f3af 8000 	nop.w
 8001818:	00000000 	.word	0x00000000
 800181c:	40cc2900 	.word	0x40cc2900
 8001820:	00000000 	.word	0x00000000
 8001824:	40606000 	.word	0x40606000
 8001828:	1a63c1f8 	.word	0x1a63c1f8
 800182c:	404ca5dc 	.word	0x404ca5dc
 8001830:	40d00000 	.word	0x40d00000
 8001834:	43aa0000 	.word	0x43aa0000
 8001838:	42121eb8 	.word	0x42121eb8
 800183c:	20000340 	.word	0x20000340
 8001840:	408f4000 	.word	0x408f4000
 8001844:	c0568000 	.word	0xc0568000
 8001848:	40568000 	.word	0x40568000
 800184c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001856:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800185a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800185e:	e9cd 2300 	strd	r2, r3, [sp]
 8001862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001866:	481c      	ldr	r0, [pc, #112]	@ (80018d8 <MPU6050_Read_All+0x3b0>)
 8001868:	f000 f83c 	bl	80018e4 <Kalman_getAngle>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	6839      	ldr	r1, [r7, #0]
 8001872:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800187c:	4690      	mov	r8, r2
 800187e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MPU6050_Read_All+0x3b4>)
 8001888:	4640      	mov	r0, r8
 800188a:	4649      	mov	r1, r9
 800188c:	f7ff f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <MPU6050_Read_All+0x380>
        DataStruct->Gx = -DataStruct->Gx;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800189c:	4614      	mov	r4, r2
 800189e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80018ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80018b6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80018be:	4808      	ldr	r0, [pc, #32]	@ (80018e0 <MPU6050_Read_All+0x3b8>)
 80018c0:	f000 f810 	bl	80018e4 <Kalman_getAngle>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 80018ce:	bf00      	nop
 80018d0:	3740      	adds	r7, #64	@ 0x40
 80018d2:	46bd      	mov	sp, r7
 80018d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d8:	20000048 	.word	0x20000048
 80018dc:	40568000 	.word	0x40568000
 80018e0:	20000000 	.word	0x20000000

080018e4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80018e4:	b5b0      	push	{r4, r5, r7, lr}
 80018e6:	b092      	sub	sp, #72	@ 0x48
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80018fa:	f7fe fc35 	bl	8000168 <__aeabi_dsub>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800190c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001910:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001914:	f7fe fde0 	bl	80004d8 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fc24 	bl	800016c <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800193a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800193e:	f7fe fdcb 	bl	80004d8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001950:	f7fe fc0a 	bl	8000168 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	f7fe fc01 	bl	8000168 <__aeabi_dsub>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fbfa 	bl	800016c <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001984:	f7fe fda8 	bl	80004d8 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fbec 	bl	800016c <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019ae:	f7fe fd93 	bl	80004d8 <__aeabi_dmul>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4620      	mov	r0, r4
 80019b8:	4629      	mov	r1, r5
 80019ba:	f7fe fbd5 	bl	8000168 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	68f9      	ldr	r1, [r7, #12]
 80019c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80019d8:	f7fe fd7e 	bl	80004d8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fbc0 	bl	8000168 <__aeabi_dsub>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a02:	f7fe fd69 	bl	80004d8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fbad 	bl	800016c <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a28:	f7fe fba0 	bl	800016c <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a3e:	f7fe fe75 	bl	800072c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a54:	f7fe fe6a 	bl	800072c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a6a:	f7fe fb7d 	bl	8000168 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a80:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a84:	f7fe fd28 	bl	80004d8 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	4629      	mov	r1, r5
 8001a90:	f7fe fb6c 	bl	800016c <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001aa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aa8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001aac:	f7fe fd14 	bl	80004d8 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fb58 	bl	800016c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001acc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ad6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001ae0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ae8:	f7fe fcf6 	bl	80004d8 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fb38 	bl	8000168 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001b08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b10:	f7fe fce2 	bl	80004d8 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fb24 	bl	8000168 <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001b30:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b38:	f7fe fcce 	bl	80004d8 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fb10 	bl	8000168 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001b58:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b60:	f7fe fcba 	bl	80004d8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fafc 	bl	8000168 <__aeabi_dsub>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	3748      	adds	r7, #72	@ 0x48
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}

08001b8a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	1dfb      	adds	r3, r7, #7
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2178      	movs	r1, #120	@ 0x78
 8001bb6:	4803      	ldr	r0, [pc, #12]	@ (8001bc4 <ssd1306_WriteCommand+0x2c>)
 8001bb8:	f001 fc38 	bl	800342c <HAL_I2C_Mem_Write>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000294 	.word	0x20000294

08001bc8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bda:	9202      	str	r2, [sp, #8]
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	2178      	movs	r1, #120	@ 0x78
 8001be8:	4803      	ldr	r0, [pc, #12]	@ (8001bf8 <ssd1306_WriteData+0x30>)
 8001bea:	f001 fc1f 	bl	800342c <HAL_I2C_Mem_Write>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000294 	.word	0x20000294

08001bfc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c00:	f7ff ffc3 	bl	8001b8a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c04:	2064      	movs	r0, #100	@ 0x64
 8001c06:	f001 f829 	bl	8002c5c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 fac6 	bl	800219c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c10:	2020      	movs	r0, #32
 8001c12:	f7ff ffc1 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff ffbe 	bl	8001b98 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c1c:	20b0      	movs	r0, #176	@ 0xb0
 8001c1e:	f7ff ffbb 	bl	8001b98 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c22:	20c8      	movs	r0, #200	@ 0xc8
 8001c24:	f7ff ffb8 	bl	8001b98 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff ffb5 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c2e:	2010      	movs	r0, #16
 8001c30:	f7ff ffb2 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c34:	2040      	movs	r0, #64	@ 0x40
 8001c36:	f7ff ffaf 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c3a:	20ff      	movs	r0, #255	@ 0xff
 8001c3c:	f000 fa9b 	bl	8002176 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c40:	20a1      	movs	r0, #161	@ 0xa1
 8001c42:	f7ff ffa9 	bl	8001b98 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c46:	20a6      	movs	r0, #166	@ 0xa6
 8001c48:	f7ff ffa6 	bl	8001b98 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c4c:	20a8      	movs	r0, #168	@ 0xa8
 8001c4e:	f7ff ffa3 	bl	8001b98 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c52:	203f      	movs	r0, #63	@ 0x3f
 8001c54:	f7ff ffa0 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c58:	20a4      	movs	r0, #164	@ 0xa4
 8001c5a:	f7ff ff9d 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c5e:	20d3      	movs	r0, #211	@ 0xd3
 8001c60:	f7ff ff9a 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ff97 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c6a:	20d5      	movs	r0, #213	@ 0xd5
 8001c6c:	f7ff ff94 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c70:	20f0      	movs	r0, #240	@ 0xf0
 8001c72:	f7ff ff91 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c76:	20d9      	movs	r0, #217	@ 0xd9
 8001c78:	f7ff ff8e 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c7c:	2022      	movs	r0, #34	@ 0x22
 8001c7e:	f7ff ff8b 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c82:	20da      	movs	r0, #218	@ 0xda
 8001c84:	f7ff ff88 	bl	8001b98 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c88:	2012      	movs	r0, #18
 8001c8a:	f7ff ff85 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c8e:	20db      	movs	r0, #219	@ 0xdb
 8001c90:	f7ff ff82 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c94:	2020      	movs	r0, #32
 8001c96:	f7ff ff7f 	bl	8001b98 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c9a:	208d      	movs	r0, #141	@ 0x8d
 8001c9c:	f7ff ff7c 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ca0:	2014      	movs	r0, #20
 8001ca2:	f7ff ff79 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fa78 	bl	800219c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f80f 	bl	8001cd0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cb2:	f000 f825 	bl	8001d00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <ssd1306_Init+0xd0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <ssd1306_Init+0xd0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cc2:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <ssd1306_Init+0xd0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	711a      	strb	r2, [r3, #4]
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000744 	.word	0x20000744

08001cd0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <ssd1306_Fill+0x14>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e000      	b.n	8001ce6 <ssd1306_Fill+0x16>
 8001ce4:	23ff      	movs	r3, #255	@ 0xff
 8001ce6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cea:	4619      	mov	r1, r3
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <ssd1306_Fill+0x2c>)
 8001cee:	f003 fe66 	bl	80059be <memset>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000344 	.word	0x20000344

08001d00 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	e016      	b.n	8001d3a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	3b50      	subs	r3, #80	@ 0x50
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff40 	bl	8001b98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff ff3d 	bl	8001b98 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d1e:	2010      	movs	r0, #16
 8001d20:	f7ff ff3a 	bl	8001b98 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	4a08      	ldr	r2, [pc, #32]	@ (8001d4c <ssd1306_UpdateScreen+0x4c>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2180      	movs	r1, #128	@ 0x80
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff4a 	bl	8001bc8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	3301      	adds	r3, #1
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	2b07      	cmp	r3, #7
 8001d3e:	d9e5      	bls.n	8001d0c <ssd1306_UpdateScreen+0xc>
    }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000344 	.word	0x20000344

08001d50 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	71bb      	strb	r3, [r7, #6]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db3d      	blt.n	8001de6 <ssd1306_DrawPixel+0x96>
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d6e:	d83a      	bhi.n	8001de6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d70:	797b      	ldrb	r3, [r7, #5]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d11a      	bne.n	8001dac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	08db      	lsrs	r3, r3, #3
 8001d7c:	b2d8      	uxtb	r0, r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	01db      	lsls	r3, r3, #7
 8001d82:	4413      	add	r3, r2
 8001d84:	4a1a      	ldr	r2, [pc, #104]	@ (8001df0 <ssd1306_DrawPixel+0xa0>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b259      	sxtb	r1, r3
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	01db      	lsls	r3, r3, #7
 8001da2:	4413      	add	r3, r2
 8001da4:	b2c9      	uxtb	r1, r1
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <ssd1306_DrawPixel+0xa0>)
 8001da8:	54d1      	strb	r1, [r2, r3]
 8001daa:	e01d      	b.n	8001de8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001dac:	79fa      	ldrb	r2, [r7, #7]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	b2d8      	uxtb	r0, r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	01db      	lsls	r3, r3, #7
 8001db8:	4413      	add	r3, r2
 8001dba:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <ssd1306_DrawPixel+0xa0>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	b25a      	sxtb	r2, r3
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	b259      	sxtb	r1, r3
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	4603      	mov	r3, r0
 8001dda:	01db      	lsls	r3, r3, #7
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2c9      	uxtb	r1, r1
 8001de0:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <ssd1306_DrawPixel+0xa0>)
 8001de2:	54d1      	strb	r1, [r2, r3]
 8001de4:	e000      	b.n	8001de8 <ssd1306_DrawPixel+0x98>
        return;
 8001de6:	bf00      	nop
    }
}
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000344 	.word	0x20000344

08001df4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	4638      	mov	r0, r7
 8001dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e02:	4623      	mov	r3, r4
 8001e04:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	2b1f      	cmp	r3, #31
 8001e0a:	d902      	bls.n	8001e12 <ssd1306_WriteChar+0x1e>
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e10:	d901      	bls.n	8001e16 <ssd1306_WriteChar+0x22>
        return 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e077      	b.n	8001f06 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e16:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	783b      	ldrb	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2b80      	cmp	r3, #128	@ 0x80
 8001e22:	dc06      	bgt.n	8001e32 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e24:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	787b      	ldrb	r3, [r7, #1]
 8001e2c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e2e:	2b40      	cmp	r3, #64	@ 0x40
 8001e30:	dd01      	ble.n	8001e36 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e067      	b.n	8001f06 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e04e      	b.n	8001eda <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	3b20      	subs	r3, #32
 8001e42:	7879      	ldrb	r1, [r7, #1]
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4619      	mov	r1, r3
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e036      	b.n	8001eca <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e6c:	4b28      	ldr	r3, [pc, #160]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	4b25      	ldr	r3, [pc, #148]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001e7c:	885b      	ldrh	r3, [r3, #2]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7ff ff5f 	bl	8001d50 <ssd1306_DrawPixel>
 8001e92:	e017      	b.n	8001ec4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e94:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b2d8      	uxtb	r0, r3
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001ea4:	885b      	ldrh	r3, [r3, #2]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	b2d9      	uxtb	r1, r3
 8001eb0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf0c      	ite	eq
 8001eb8:	2301      	moveq	r3, #1
 8001eba:	2300      	movne	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff ff46 	bl	8001d50 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	783b      	ldrb	r3, [r7, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d3c3      	bcc.n	8001e5c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	787b      	ldrb	r3, [r7, #1]
 8001edc:	461a      	mov	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d3ab      	bcc.n	8001e3c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	2a00      	cmp	r2, #0
 8001eec:	d005      	beq.n	8001efa <ssd1306_WriteChar+0x106>
 8001eee:	68b9      	ldr	r1, [r7, #8]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	3a20      	subs	r2, #32
 8001ef4:	440a      	add	r2, r1
 8001ef6:	7812      	ldrb	r2, [r2, #0]
 8001ef8:	e000      	b.n	8001efc <ssd1306_WriteChar+0x108>
 8001efa:	783a      	ldrb	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <ssd1306_WriteChar+0x11c>)
 8001f02:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000744 	.word	0x20000744

08001f14 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f22:	e013      	b.n	8001f4c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	7818      	ldrb	r0, [r3, #0]
 8001f28:	7e3b      	ldrb	r3, [r7, #24]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f30:	f7ff ff60 	bl	8001df4 <ssd1306_WriteChar>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d002      	beq.n	8001f46 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	e008      	b.n	8001f58 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1e7      	bne.n	8001f24 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781b      	ldrb	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	460a      	mov	r2, r1
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <ssd1306_SetCursor+0x2c>)
 8001f76:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <ssd1306_SetCursor+0x2c>)
 8001f7e:	805a      	strh	r2, [r3, #2]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000744 	.word	0x20000744

08001f90 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b089      	sub	sp, #36	@ 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4604      	mov	r4, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71bb      	strb	r3, [r7, #6]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	717b      	strb	r3, [r7, #5]
 8001faa:	4613      	mov	r3, r2
 8001fac:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001fae:	797a      	ldrb	r2, [r7, #5]
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfb8      	it	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001fbc:	793a      	ldrb	r2, [r7, #4]
 8001fbe:	79bb      	ldrb	r3, [r7, #6]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bfb8      	it	lt
 8001fc6:	425b      	neglt	r3, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001fca:	79fa      	ldrb	r2, [r7, #7]
 8001fcc:	797b      	ldrb	r3, [r7, #5]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d201      	bcs.n	8001fd6 <ssd1306_Line+0x46>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e001      	b.n	8001fda <ssd1306_Line+0x4a>
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001fdc:	79ba      	ldrb	r2, [r7, #6]
 8001fde:	793b      	ldrb	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d201      	bcs.n	8001fe8 <ssd1306_Line+0x58>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e001      	b.n	8001fec <ssd1306_Line+0x5c>
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001ff6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ffa:	7939      	ldrb	r1, [r7, #4]
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fea6 	bl	8001d50 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002004:	e024      	b.n	8002050 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002006:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800200a:	79b9      	ldrb	r1, [r7, #6]
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fe9e 	bl	8001d50 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	425b      	negs	r3, r3
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	dd08      	ble.n	8002036 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	4413      	add	r3, r2
 8002034:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	429a      	cmp	r2, r3
 800203c:	da08      	bge.n	8002050 <ssd1306_Line+0xc0>
            error += deltaX;
 800203e:	69fa      	ldr	r2, [r7, #28]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	79bb      	ldrb	r3, [r7, #6]
 800204c:	4413      	add	r3, r2
 800204e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	797b      	ldrb	r3, [r7, #5]
 8002054:	429a      	cmp	r2, r3
 8002056:	d1d6      	bne.n	8002006 <ssd1306_Line+0x76>
 8002058:	79ba      	ldrb	r2, [r7, #6]
 800205a:	793b      	ldrb	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d1d2      	bne.n	8002006 <ssd1306_Line+0x76>
        }
    }
    return;
 8002060:	bf00      	nop
}
 8002062:	3724      	adds	r7, #36	@ 0x24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	4604      	mov	r4, r0
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4623      	mov	r3, r4
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	4603      	mov	r3, r0
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	460b      	mov	r3, r1
 8002080:	717b      	strb	r3, [r7, #5]
 8002082:	4613      	mov	r3, r2
 8002084:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002086:	797b      	ldrb	r3, [r7, #5]
 8002088:	425b      	negs	r3, r3
 800208a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002090:	797b      	ldrb	r3, [r7, #5]
 8002092:	f1c3 0301 	rsb	r3, r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db65      	blt.n	800216e <ssd1306_DrawCircle+0x106>
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80020a6:	d862      	bhi.n	800216e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b2d8      	uxtb	r0, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	793a      	ldrb	r2, [r7, #4]
 80020be:	4619      	mov	r1, r3
 80020c0:	f7ff fe46 	bl	8001d50 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2d8      	uxtb	r0, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	4413      	add	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	793a      	ldrb	r2, [r7, #4]
 80020da:	4619      	mov	r1, r3
 80020dc:	f7ff fe38 	bl	8001d50 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2d8      	uxtb	r0, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	79ba      	ldrb	r2, [r7, #6]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	793a      	ldrb	r2, [r7, #4]
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7ff fe2a 	bl	8001d50 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	b2d8      	uxtb	r0, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	79ba      	ldrb	r2, [r7, #6]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	793a      	ldrb	r2, [r7, #4]
 8002112:	4619      	mov	r1, r3
 8002114:	f7ff fe1c 	bl	8001d50 <ssd1306_DrawPixel>
        e2 = err;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	dc13      	bgt.n	800214c <ssd1306_DrawCircle+0xe4>
            y++;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	3301      	adds	r3, #1
 8002128:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	3301      	adds	r3, #1
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	425b      	negs	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d105      	bne.n	800214c <ssd1306_DrawCircle+0xe4>
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	dc01      	bgt.n	800214c <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	dd08      	ble.n	8002166 <ssd1306_DrawCircle+0xfe>
            x++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3301      	adds	r3, #1
 8002158:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3301      	adds	r3, #1
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	dd9d      	ble.n	80020a8 <ssd1306_DrawCircle+0x40>

    return;
 800216c:	e000      	b.n	8002170 <ssd1306_DrawCircle+0x108>
        return;
 800216e:	bf00      	nop
}
 8002170:	371c      	adds	r7, #28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}

08002176 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002180:	2381      	movs	r3, #129	@ 0x81
 8002182:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fd06 	bl	8001b98 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fd02 	bl	8001b98 <ssd1306_WriteCommand>
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80021ac:	23af      	movs	r3, #175	@ 0xaf
 80021ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <ssd1306_SetDisplayOn+0x38>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	715a      	strb	r2, [r3, #5]
 80021b6:	e004      	b.n	80021c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80021b8:	23ae      	movs	r3, #174	@ 0xae
 80021ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80021bc:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <ssd1306_SetDisplayOn+0x38>)
 80021be:	2200      	movs	r2, #0
 80021c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fce7 	bl	8001b98 <ssd1306_WriteCommand>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000744 	.word	0x20000744

080021d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_MspInit+0x5c>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <HAL_MspInit+0x5c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6193      	str	r3, [r2, #24]
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_MspInit+0x5c>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_MspInit+0x5c>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_MspInit+0x5c>)
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <HAL_MspInit+0x5c>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_MspInit+0x60>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_MspInit+0x60>)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40021000 	.word	0x40021000
 8002238:	40010000 	.word	0x40010000

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f000 fcca 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return 1;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <_kill>:

int _kill(int pid, int sig)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ac:	f003 fbda 	bl	8005a64 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2216      	movs	r2, #22
 80022b4:	601a      	str	r2, [r3, #0]
  return -1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_exit>:

void _exit (int status)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ca:	f04f 31ff 	mov.w	r1, #4294967295
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffe7 	bl	80022a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <_exit+0x12>

080022d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e00a      	b.n	8002300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ea:	f3af 8000 	nop.w
 80022ee:	4601      	mov	r1, r0
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf0      	blt.n	80022ea <_read+0x12>
  }

  return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e009      	b.n	8002338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	60ba      	str	r2, [r7, #8]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	3301      	adds	r3, #1
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	dbf1      	blt.n	8002324 <_write+0x12>
  }
  return len;
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_close>:

int _close(int file)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002370:	605a      	str	r2, [r3, #4]
  return 0;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002392:	b480      	push	{r7}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f003 fb42 	bl	8005a64 <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20005000 	.word	0x20005000
 800240c:	00000400 	.word	0x00000400
 8002410:	2000074c 	.word	0x2000074c
 8002414:	200008e0 	.word	0x200008e0

08002418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <displayOrthogonalScreen>:
double getActualValue(int orthogonalAxis, MPU6050_t sensorData);
double normalizedAngleVectorX(double angle);
double normalizedAngleVectorY(double angle);
double radians(double angle);

void displayOrthogonalScreen(MPU6050_t sensorData, OrthogonalAxis orthogonalAxis){
 8002424:	b084      	sub	sp, #16
 8002426:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002428:	b0b7      	sub	sp, #220	@ 0xdc
 800242a:	af14      	add	r7, sp, #80	@ 0x50
 800242c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static char valueStr[32];
	double actualAngle = getActualValue((int)orthogonalAxis, sensorData);
 8002434:	f897 40f8 	ldrb.w	r4, [r7, #248]	@ 0xf8
 8002438:	4668      	mov	r0, sp
 800243a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800243e:	2250      	movs	r2, #80	@ 0x50
 8002440:	4619      	mov	r1, r3
 8002442:	f003 fb4a 	bl	8005ada <memcpy>
 8002446:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800244a:	cb0c      	ldmia	r3, {r2, r3}
 800244c:	4620      	mov	r0, r4
 800244e:	f000 f9b3 	bl	80027b8 <getActualValue>
 8002452:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
	const double radius = 27;
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b89      	ldr	r3, [pc, #548]	@ (8002680 <displayOrthogonalScreen+0x25c>)
 800245c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	const int anchorAngles[] = {
 8002460:	4b88      	ldr	r3, [pc, #544]	@ (8002684 <displayOrthogonalScreen+0x260>)
 8002462:	1d3c      	adds	r4, r7, #4
 8002464:	461d      	mov	r5, r3
 8002466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800246e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		90,
		135,
		180
	};

	ssd1306_DrawCircle(64, 32, radius, White);
 8002472:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002476:	f7fe fb07 	bl	8000a88 <__aeabi_d2uiz>
 800247a:	4603      	mov	r3, r0
 800247c:	b2da      	uxtb	r2, r3
 800247e:	2301      	movs	r3, #1
 8002480:	2120      	movs	r1, #32
 8002482:	2040      	movs	r0, #64	@ 0x40
 8002484:	f7ff fdf0 	bl	8002068 <ssd1306_DrawCircle>

	// Draw actual value number
	sprintf(valueStr, "%.2f", (double)actualAngle);
 8002488:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800248c:	497e      	ldr	r1, [pc, #504]	@ (8002688 <displayOrthogonalScreen+0x264>)
 800248e:	487f      	ldr	r0, [pc, #508]	@ (800268c <displayOrthogonalScreen+0x268>)
 8002490:	f003 fa18 	bl	80058c4 <siprintf>
	ssd1306_SetCursor(0, 0);
 8002494:	2100      	movs	r1, #0
 8002496:	2000      	movs	r0, #0
 8002498:	f7ff fd62 	bl	8001f60 <ssd1306_SetCursor>
	ssd1306_WriteString(
 800249c:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <displayOrthogonalScreen+0x84>
 80024a4:	487a      	ldr	r0, [pc, #488]	@ (8002690 <displayOrthogonalScreen+0x26c>)
 80024a6:	e000      	b.n	80024aa <displayOrthogonalScreen+0x86>
 80024a8:	487a      	ldr	r0, [pc, #488]	@ (8002694 <displayOrthogonalScreen+0x270>)
 80024aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002698 <displayOrthogonalScreen+0x274>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b2:	f7ff fd2f 	bl	8001f14 <ssd1306_WriteString>
		orthogonalAxis == X ? "Angle X" : "Angle Y",
		Font_6x8,
		White
	);
	ssd1306_SetCursor(0, 10);
 80024b6:	210a      	movs	r1, #10
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fd51 	bl	8001f60 <ssd1306_SetCursor>
	ssd1306_WriteString(
 80024be:	4b76      	ldr	r3, [pc, #472]	@ (8002698 <displayOrthogonalScreen+0x274>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	9200      	str	r2, [sp, #0]
 80024c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024c6:	4871      	ldr	r0, [pc, #452]	@ (800268c <displayOrthogonalScreen+0x268>)
 80024c8:	f7ff fd24 	bl	8001f14 <ssd1306_WriteString>
		White
	);


	// Draw anchor points
	double anchorLinesLength = 4;
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b72      	ldr	r3, [pc, #456]	@ (800269c <displayOrthogonalScreen+0x278>)
 80024d2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	for(int i = 0; i < sizeof(anchorAngles) / sizeof(anchorAngles[0]); i++){
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024dc:	e0ea      	b.n	80026b4 <displayOrthogonalScreen+0x290>
		int angle = anchorAngles[i];
 80024de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	3388      	adds	r3, #136	@ 0x88
 80024e6:	443b      	add	r3, r7
 80024e8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80024ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
		double nx = normalizedAngleVectorX(angle);
 80024ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80024f0:	f7fd ff88 	bl	8000404 <__aeabi_i2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f000 f97a 	bl	80027f4 <normalizedAngleVectorX>
 8002500:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
		double ny = normalizedAngleVectorY(angle);
 8002504:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002506:	f7fd ff7d 	bl	8000404 <__aeabi_i2d>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f000 f985 	bl	8002820 <normalizedAngleVectorY>
 8002516:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		double circleX = nx * radius + 64;
 800251a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800251e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002522:	f7fd ffd9 	bl	80004d8 <__aeabi_dmul>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b5b      	ldr	r3, [pc, #364]	@ (80026a0 <displayOrthogonalScreen+0x27c>)
 8002534:	f7fd fe1a 	bl	800016c <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		double circleY = ny * radius + 32;
 8002540:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002544:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002548:	f7fd ffc6 	bl	80004d8 <__aeabi_dmul>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4610      	mov	r0, r2
 8002552:	4619      	mov	r1, r3
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	4b52      	ldr	r3, [pc, #328]	@ (80026a4 <displayOrthogonalScreen+0x280>)
 800255a:	f7fd fe07 	bl	800016c <__adddf3>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		ssd1306_Line(
			circleX - nx * anchorLinesLength,
 8002566:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800256a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800256e:	f7fd ffb3 	bl	80004d8 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800257a:	f7fd fdf5 	bl	8000168 <__aeabi_dsub>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
		ssd1306_Line(
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe fa7f 	bl	8000a88 <__aeabi_d2uiz>
 800258a:	4603      	mov	r3, r0
 800258c:	b2dc      	uxtb	r4, r3
			circleY - ny * anchorLinesLength,
 800258e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002592:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002596:	f7fd ff9f 	bl	80004d8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025a2:	f7fd fde1 	bl	8000168 <__aeabi_dsub>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
		ssd1306_Line(
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fa6b 	bl	8000a88 <__aeabi_d2uiz>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b2dd      	uxtb	r5, r3
			circleX + nx * anchorLinesLength,
 80025b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025ba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025be:	f7fd ff8b 	bl	80004d8 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025ce:	f7fd fdcd 	bl	800016c <__adddf3>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
		ssd1306_Line(
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fa55 	bl	8000a88 <__aeabi_d2uiz>
 80025de:	4603      	mov	r3, r0
 80025e0:	b2de      	uxtb	r6, r3
			circleY + ny * anchorLinesLength,
 80025e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80025e6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80025ea:	f7fd ff75 	bl	80004d8 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025fa:	f7fd fdb7 	bl	800016c <__adddf3>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
		ssd1306_Line(
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f7fe fa3f 	bl	8000a88 <__aeabi_d2uiz>
 800260a:	4603      	mov	r3, r0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2201      	movs	r2, #1
 8002610:	9200      	str	r2, [sp, #0]
 8002612:	4632      	mov	r2, r6
 8002614:	4629      	mov	r1, r5
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fcba 	bl	8001f90 <ssd1306_Line>
			White
		);

		int shift = 5;
 800261c:	2305      	movs	r3, #5
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (abs(angle) > 45.0)
 8002620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfb8      	it	lt
 8002626:	425b      	neglt	r3, r3
 8002628:	2b2d      	cmp	r3, #45	@ 0x2d
 800262a:	dc3d      	bgt.n	80026a8 <displayOrthogonalScreen+0x284>
			continue;
		sprintf(valueStr, "%.2f", (double)angle);
 800262c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800262e:	f7fd fee9 	bl	8000404 <__aeabi_i2d>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4914      	ldr	r1, [pc, #80]	@ (8002688 <displayOrthogonalScreen+0x264>)
 8002638:	4814      	ldr	r0, [pc, #80]	@ (800268c <displayOrthogonalScreen+0x268>)
 800263a:	f003 f943 	bl	80058c4 <siprintf>
		ssd1306_SetCursor(circleX + shift, circleY);
 800263e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002640:	f7fd fee0 	bl	8000404 <__aeabi_i2d>
 8002644:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002648:	f7fd fd90 	bl	800016c <__adddf3>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa18 	bl	8000a88 <__aeabi_d2uiz>
 8002658:	4603      	mov	r3, r0
 800265a:	b2dc      	uxtb	r4, r3
 800265c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002660:	f7fe fa12 	bl	8000a88 <__aeabi_d2uiz>
 8002664:	4603      	mov	r3, r0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff fc78 	bl	8001f60 <ssd1306_SetCursor>
		ssd1306_WriteString(valueStr, Font_6x8, White);
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <displayOrthogonalScreen+0x274>)
 8002672:	2201      	movs	r2, #1
 8002674:	9200      	str	r2, [sp, #0]
 8002676:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002678:	4804      	ldr	r0, [pc, #16]	@ (800268c <displayOrthogonalScreen+0x268>)
 800267a:	f7ff fc4b 	bl	8001f14 <ssd1306_WriteString>
 800267e:	e014      	b.n	80026aa <displayOrthogonalScreen+0x286>
 8002680:	403b0000 	.word	0x403b0000
 8002684:	0800a848 	.word	0x0800a848
 8002688:	0800a830 	.word	0x0800a830
 800268c:	20000750 	.word	0x20000750
 8002690:	0800a838 	.word	0x0800a838
 8002694:	0800a840 	.word	0x0800a840
 8002698:	0800af3c 	.word	0x0800af3c
 800269c:	40100000 	.word	0x40100000
 80026a0:	40500000 	.word	0x40500000
 80026a4:	40400000 	.word	0x40400000
			continue;
 80026a8:	bf00      	nop
	for(int i = 0; i < sizeof(anchorAngles) / sizeof(anchorAngles[0]); i++){
 80026aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ae:	3301      	adds	r3, #1
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026b8:	2b07      	cmp	r3, #7
 80026ba:	f67f af10 	bls.w	80024de <displayOrthogonalScreen+0xba>
	}

	// Draw sensor value line
	double nx = normalizedAngleVectorX(actualAngle);
 80026be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026c2:	f000 f897 	bl	80027f4 <normalizedAngleVectorX>
 80026c6:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
	double ny = normalizedAngleVectorY(actualAngle);
 80026ca:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026ce:	f000 f8a7 	bl	8002820 <normalizedAngleVectorY>
 80026d2:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
	double actualLineRadius = 36;
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <displayOrthogonalScreen+0x388>)
 80026dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	ssd1306_Line(
		64 - nx * actualLineRadius,
 80026e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80026e8:	f7fd fef6 	bl	80004d8 <__aeabi_dmul>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	f04f 0000 	mov.w	r0, #0
 80026f4:	492e      	ldr	r1, [pc, #184]	@ (80027b0 <displayOrthogonalScreen+0x38c>)
 80026f6:	f7fd fd37 	bl	8000168 <__aeabi_dsub>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
	ssd1306_Line(
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe f9c1 	bl	8000a88 <__aeabi_d2uiz>
 8002706:	4603      	mov	r3, r0
 8002708:	b2dc      	uxtb	r4, r3
		32 - ny * actualLineRadius,
 800270a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800270e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002712:	f7fd fee1 	bl	80004d8 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	4925      	ldr	r1, [pc, #148]	@ (80027b4 <displayOrthogonalScreen+0x390>)
 8002720:	f7fd fd22 	bl	8000168 <__aeabi_dsub>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
	ssd1306_Line(
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe f9ac 	bl	8000a88 <__aeabi_d2uiz>
 8002730:	4603      	mov	r3, r0
 8002732:	b2dd      	uxtb	r5, r3
		64 + nx * actualLineRadius,
 8002734:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002738:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800273c:	f7fd fecc 	bl	80004d8 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	4b18      	ldr	r3, [pc, #96]	@ (80027b0 <displayOrthogonalScreen+0x38c>)
 800274e:	f7fd fd0d 	bl	800016c <__adddf3>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
	ssd1306_Line(
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe f995 	bl	8000a88 <__aeabi_d2uiz>
 800275e:	4603      	mov	r3, r0
 8002760:	b2de      	uxtb	r6, r3
		32 + ny * actualLineRadius,
 8002762:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002766:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800276a:	f7fd feb5 	bl	80004d8 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <displayOrthogonalScreen+0x390>)
 800277c:	f7fd fcf6 	bl	800016c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
	ssd1306_Line(
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe f97e 	bl	8000a88 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2201      	movs	r2, #1
 8002792:	9200      	str	r2, [sp, #0]
 8002794:	4632      	mov	r2, r6
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff fbf9 	bl	8001f90 <ssd1306_Line>
		White
	);
}
 800279e:	bf00      	nop
 80027a0:	378c      	adds	r7, #140	@ 0x8c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80027a8:	b004      	add	sp, #16
 80027aa:	4770      	bx	lr
 80027ac:	40420000 	.word	0x40420000
 80027b0:	40500000 	.word	0x40500000
 80027b4:	40400000 	.word	0x40400000

080027b8 <getActualValue>:

double getActualValue(int orthogonalAxis, MPU6050_t sensorData){
 80027b8:	b082      	sub	sp, #8
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	f107 0110 	add.w	r1, r7, #16
 80027c6:	e881 000c 	stmia.w	r1, {r2, r3}
	switch(orthogonalAxis){
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <getActualValue+0x20>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d003      	beq.n	80027de <getActualValue+0x26>
 80027d6:	e005      	b.n	80027e4 <getActualValue+0x2c>
		case X:
			return sensorData.KalmanAngleX;
 80027d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027dc:	e003      	b.n	80027e6 <getActualValue+0x2e>
		case Y:
			return sensorData.KalmanAngleY;
 80027de:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80027e2:	e000      	b.n	80027e6 <getActualValue+0x2e>
	}
	while(1);
 80027e4:	e7fe      	b.n	80027e4 <getActualValue+0x2c>
}
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	b002      	add	sp, #8
 80027f2:	4770      	bx	lr

080027f4 <normalizedAngleVectorX>:


double normalizedAngleVectorX(double angle){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	e9c7 0100 	strd	r0, r1, [r7]
	return cos(radians(angle));
 80027fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002802:	f000 f825 	bl	8002850 <radians>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	f006 fe3b 	bl	8009488 <cos>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
}
 8002816:	4610      	mov	r0, r2
 8002818:	4619      	mov	r1, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <normalizedAngleVectorY>:

double normalizedAngleVectorY(double angle){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	e9c7 0100 	strd	r0, r1, [r7]
	return sin(radians(angle));
 800282a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282e:	f000 f80f 	bl	8002850 <radians>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f006 fe6f 	bl	800951c <sin>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
}
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0000      	movs	r0, r0
	...

08002850 <radians>:

double radians(double angle){
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	e9c7 0100 	strd	r0, r1, [r7]
	return angle * (M_PI / 180.0);
 800285a:	a307      	add	r3, pc, #28	@ (adr r3, 8002878 <radians+0x28>)
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002864:	f7fd fe38 	bl	80004d8 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
}
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	a2529d39 	.word	0xa2529d39
 800287c:	3f91df46 	.word	0x3f91df46

08002880 <displayValuesScreen>:

const char* getSensorPropertyStringValue(SensorProperty property, MPU6050_t sensorData);
const char* getSensorPropertyStringIdentifier(SensorProperty property);

// Function to display values on the screen
void displayValuesScreen(MPU6050_t sensorData) {
 8002880:	b084      	sub	sp, #16
 8002882:	b590      	push	{r4, r7, lr}
 8002884:	b099      	sub	sp, #100	@ 0x64
 8002886:	af14      	add	r7, sp, #80	@ 0x50
 8002888:	f107 0420 	add.w	r4, r7, #32
 800288c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		AZ,
		TEMPERATURE
    };

    // Loop through each property and display its identifier and value
    for (int i = 0; i < sizeof(propertiesToDisplay) / sizeof(propertiesToDisplay[0]); i++) {
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e03f      	b.n	8002916 <displayValuesScreen+0x96>
        SensorProperty property = propertiesToDisplay[i];
 8002896:	4a25      	ldr	r2, [pc, #148]	@ (800292c <displayValuesScreen+0xac>)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	72fb      	strb	r3, [r7, #11]
        char* propertyIdentifier = (char*)getSensorPropertyStringIdentifier(property);
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f8f0 	bl	8002a88 <getSensorPropertyStringIdentifier>
 80028a8:	6078      	str	r0, [r7, #4]
        char* propertyValues = (char*)getSensorPropertyStringValue(property, sensorData);
 80028aa:	7afc      	ldrb	r4, [r7, #11]
 80028ac:	4668      	mov	r0, sp
 80028ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028b2:	2250      	movs	r2, #80	@ 0x50
 80028b4:	4619      	mov	r1, r3
 80028b6:	f003 f910 	bl	8005ada <memcpy>
 80028ba:	f107 0320 	add.w	r3, r7, #32
 80028be:	cb0c      	ldmia	r3, {r2, r3}
 80028c0:	4620      	mov	r0, r4
 80028c2:	f000 f837 	bl	8002934 <getSensorPropertyStringValue>
 80028c6:	6038      	str	r0, [r7, #0]

        // Set cursor position and write the identifier and value to the screen
        ssd1306_SetCursor(0, i * 10);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff fb41 	bl	8001f60 <ssd1306_SetCursor>
        ssd1306_WriteString(propertyIdentifier, Font_6x8, White);
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <displayValuesScreen+0xb0>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	9200      	str	r2, [sp, #0]
 80028e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7ff fb14 	bl	8001f14 <ssd1306_WriteString>
        ssd1306_SetCursor(90, i * 10);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4619      	mov	r1, r3
 80028fc:	205a      	movs	r0, #90	@ 0x5a
 80028fe:	f7ff fb2f 	bl	8001f60 <ssd1306_SetCursor>
        ssd1306_WriteString(propertyValues, Font_6x8, White);
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <displayValuesScreen+0xb0>)
 8002904:	2201      	movs	r2, #1
 8002906:	9200      	str	r2, [sp, #0]
 8002908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	f7ff fb02 	bl	8001f14 <ssd1306_WriteString>
    for (int i = 0; i < sizeof(propertiesToDisplay) / sizeof(propertiesToDisplay[0]); i++) {
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d9bc      	bls.n	8002896 <displayValuesScreen+0x16>
    }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002928:	b004      	add	sp, #16
 800292a:	4770      	bx	lr
 800292c:	0800af60 	.word	0x0800af60
 8002930:	0800af3c 	.word	0x0800af3c

08002934 <getSensorPropertyStringValue>:

// Function to return a string value based on the property
const char* getSensorPropertyStringValue(SensorProperty property, MPU6050_t sensorData) {
 8002934:	b082      	sub	sp, #8
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4601      	mov	r1, r0
 800293e:	f107 0010 	add.w	r0, r7, #16
 8002942:	e880 000c 	stmia.w	r0, {r2, r3}
 8002946:	460b      	mov	r3, r1
 8002948:	71fb      	strb	r3, [r7, #7]
    static char valueStr[32]; // Static buffer to store the string value of the property

    switch (property) {
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b0e      	cmp	r3, #14
 800294e:	f200 808b 	bhi.w	8002a68 <getSensorPropertyStringValue+0x134>
 8002952:	a201      	add	r2, pc, #4	@ (adr r2, 8002958 <getSensorPropertyStringValue+0x24>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	08002995 	.word	0x08002995
 800295c:	080029a7 	.word	0x080029a7
 8002960:	080029b9 	.word	0x080029b9
 8002964:	080029cb 	.word	0x080029cb
 8002968:	080029db 	.word	0x080029db
 800296c:	080029eb 	.word	0x080029eb
 8002970:	080029fb 	.word	0x080029fb
 8002974:	08002a0d 	.word	0x08002a0d
 8002978:	08002a1f 	.word	0x08002a1f
 800297c:	08002a69 	.word	0x08002a69
 8002980:	08002a69 	.word	0x08002a69
 8002984:	08002a69 	.word	0x08002a69
 8002988:	08002a31 	.word	0x08002a31
 800298c:	08002a49 	.word	0x08002a49
 8002990:	08002a59 	.word	0x08002a59
        case ACCEL_X_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_X_RAW); // Convert to string
 8002994:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002998:	461a      	mov	r2, r3
 800299a:	4937      	ldr	r1, [pc, #220]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 800299c:	4837      	ldr	r0, [pc, #220]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 800299e:	f002 ff91 	bl	80058c4 <siprintf>
            return valueStr;
 80029a2:	4b36      	ldr	r3, [pc, #216]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029a4:	e061      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case ACCEL_Y_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_Y_RAW); // Convert to string
 80029a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4932      	ldr	r1, [pc, #200]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 80029ae:	4833      	ldr	r0, [pc, #204]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029b0:	f002 ff88 	bl	80058c4 <siprintf>
            return valueStr;
 80029b4:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029b6:	e058      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case ACCEL_Z_RAW:
            sprintf(valueStr, "%d", sensorData.Accel_Z_RAW); // Convert to string
 80029b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029bc:	461a      	mov	r2, r3
 80029be:	492e      	ldr	r1, [pc, #184]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 80029c0:	482e      	ldr	r0, [pc, #184]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029c2:	f002 ff7f 	bl	80058c4 <siprintf>
            return valueStr;
 80029c6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029c8:	e04f      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case AX:
            sprintf(valueStr, "%.2f", sensorData.Ax); // Convert to string (floating point)
 80029ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ce:	492c      	ldr	r1, [pc, #176]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 80029d0:	482a      	ldr	r0, [pc, #168]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029d2:	f002 ff77 	bl	80058c4 <siprintf>
            return valueStr;
 80029d6:	4b29      	ldr	r3, [pc, #164]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029d8:	e047      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case AY:
            sprintf(valueStr, "%.2f", sensorData.Ay); // Convert to string (floating point)
 80029da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029de:	4928      	ldr	r1, [pc, #160]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 80029e0:	4826      	ldr	r0, [pc, #152]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029e2:	f002 ff6f 	bl	80058c4 <siprintf>
            return valueStr;
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029e8:	e03f      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case AZ:
            sprintf(valueStr, "%.2f", sensorData.Az); // Convert to string (floating point)
 80029ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029ee:	4924      	ldr	r1, [pc, #144]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 80029f0:	4822      	ldr	r0, [pc, #136]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029f2:	f002 ff67 	bl	80058c4 <siprintf>
            return valueStr;
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 80029f8:	e037      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case GYRO_X_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_X_RAW); // Convert to string
 80029fa:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80029fe:	461a      	mov	r2, r3
 8002a00:	491d      	ldr	r1, [pc, #116]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 8002a02:	481e      	ldr	r0, [pc, #120]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a04:	f002 ff5e 	bl	80058c4 <siprintf>
            return valueStr;
 8002a08:	4b1c      	ldr	r3, [pc, #112]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a0a:	e02e      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case GYRO_Y_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_Y_RAW); // Convert to string
 8002a0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002a10:	461a      	mov	r2, r3
 8002a12:	4919      	ldr	r1, [pc, #100]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 8002a14:	4819      	ldr	r0, [pc, #100]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a16:	f002 ff55 	bl	80058c4 <siprintf>
            return valueStr;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a1c:	e025      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case GYRO_Z_RAW:
            sprintf(valueStr, "%d", sensorData.Gyro_Z_RAW); // Convert to string
 8002a1e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8002a22:	461a      	mov	r2, r3
 8002a24:	4914      	ldr	r1, [pc, #80]	@ (8002a78 <getSensorPropertyStringValue+0x144>)
 8002a26:	4815      	ldr	r0, [pc, #84]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a28:	f002 ff4c 	bl	80058c4 <siprintf>
            return valueStr;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a2e:	e01c      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case TEMPERATURE:
            sprintf(valueStr, "%.2f", sensorData.Temperature); // Convert to string (floating point)
 8002a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fcf8 	bl	8000428 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4910      	ldr	r1, [pc, #64]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 8002a3e:	480f      	ldr	r0, [pc, #60]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a40:	f002 ff40 	bl	80058c4 <siprintf>
            return valueStr;
 8002a44:	4b0d      	ldr	r3, [pc, #52]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a46:	e010      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case KALMAN_ANGLE_X:
            sprintf(valueStr, "%.2f", sensorData.KalmanAngleX); // Convert to string (floating point)
 8002a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a4c:	490c      	ldr	r1, [pc, #48]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 8002a4e:	480b      	ldr	r0, [pc, #44]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a50:	f002 ff38 	bl	80058c4 <siprintf>
            return valueStr;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a56:	e008      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        case KALMAN_ANGLE_Y:
            sprintf(valueStr, "%.2f", sensorData.KalmanAngleY); // Convert to string (floating point)
 8002a58:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002a5c:	4908      	ldr	r1, [pc, #32]	@ (8002a80 <getSensorPropertyStringValue+0x14c>)
 8002a5e:	4807      	ldr	r0, [pc, #28]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a60:	f002 ff30 	bl	80058c4 <siprintf>
            return valueStr;
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <getSensorPropertyStringValue+0x148>)
 8002a66:	e000      	b.n	8002a6a <getSensorPropertyStringValue+0x136>
        default:
            return "Property not found";
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <getSensorPropertyStringValue+0x150>)
    }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a74:	b002      	add	sp, #8
 8002a76:	4770      	bx	lr
 8002a78:	0800a868 	.word	0x0800a868
 8002a7c:	20000770 	.word	0x20000770
 8002a80:	0800a86c 	.word	0x0800a86c
 8002a84:	0800a874 	.word	0x0800a874

08002a88 <getSensorPropertyStringIdentifier>:

// Function to return the string identifier for a sensor property
const char* getSensorPropertyStringIdentifier(SensorProperty property) {
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
    switch (property) {
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	2b0e      	cmp	r3, #14
 8002a96:	d839      	bhi.n	8002b0c <getSensorPropertyStringIdentifier+0x84>
 8002a98:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa0 <getSensorPropertyStringIdentifier+0x18>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002add 	.word	0x08002add
 8002aa4:	08002ae1 	.word	0x08002ae1
 8002aa8:	08002ae5 	.word	0x08002ae5
 8002aac:	08002ae9 	.word	0x08002ae9
 8002ab0:	08002aed 	.word	0x08002aed
 8002ab4:	08002af1 	.word	0x08002af1
 8002ab8:	08002af5 	.word	0x08002af5
 8002abc:	08002af9 	.word	0x08002af9
 8002ac0:	08002afd 	.word	0x08002afd
 8002ac4:	08002b0d 	.word	0x08002b0d
 8002ac8:	08002b0d 	.word	0x08002b0d
 8002acc:	08002b0d 	.word	0x08002b0d
 8002ad0:	08002b01 	.word	0x08002b01
 8002ad4:	08002b05 	.word	0x08002b05
 8002ad8:	08002b09 	.word	0x08002b09
        case ACCEL_X_RAW:
            return "Accel X (RAW)";
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <getSensorPropertyStringIdentifier+0x90>)
 8002ade:	e016      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case ACCEL_Y_RAW:
            return "Accel Y (RAW)";
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <getSensorPropertyStringIdentifier+0x94>)
 8002ae2:	e014      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case ACCEL_Z_RAW:
            return "Accel Z (RAW)";
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <getSensorPropertyStringIdentifier+0x98>)
 8002ae6:	e012      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case AX:
            return "Accel X (m/s)";
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b24 <getSensorPropertyStringIdentifier+0x9c>)
 8002aea:	e010      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case AY:
            return "Accel Y (m/s)";
 8002aec:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <getSensorPropertyStringIdentifier+0xa0>)
 8002aee:	e00e      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case AZ:
            return "Accel Z (m/s)";
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <getSensorPropertyStringIdentifier+0xa4>)
 8002af2:	e00c      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case GYRO_X_RAW:
            return "Gyro X (RAW)";
 8002af4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <getSensorPropertyStringIdentifier+0xa8>)
 8002af6:	e00a      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case GYRO_Y_RAW:
            return "Gyro Y (RAW)";
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <getSensorPropertyStringIdentifier+0xac>)
 8002afa:	e008      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case GYRO_Z_RAW:
            return "Gyro Z (RAW)";
 8002afc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <getSensorPropertyStringIdentifier+0xb0>)
 8002afe:	e006      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case TEMPERATURE:
            return "Temp (C)";
 8002b00:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <getSensorPropertyStringIdentifier+0xb4>)
 8002b02:	e004      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case KALMAN_ANGLE_X:
            return "Kalman Y(deg)";
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <getSensorPropertyStringIdentifier+0xb8>)
 8002b06:	e002      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        case KALMAN_ANGLE_Y:
            return "Kalman X(deg)";
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <getSensorPropertyStringIdentifier+0xbc>)
 8002b0a:	e000      	b.n	8002b0e <getSensorPropertyStringIdentifier+0x86>
        default:
            return "Error";
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <getSensorPropertyStringIdentifier+0xc0>)
    }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	0800a888 	.word	0x0800a888
 8002b1c:	0800a898 	.word	0x0800a898
 8002b20:	0800a8a8 	.word	0x0800a8a8
 8002b24:	0800a8b8 	.word	0x0800a8b8
 8002b28:	0800a8c8 	.word	0x0800a8c8
 8002b2c:	0800a8d8 	.word	0x0800a8d8
 8002b30:	0800a8e8 	.word	0x0800a8e8
 8002b34:	0800a8f8 	.word	0x0800a8f8
 8002b38:	0800a908 	.word	0x0800a908
 8002b3c:	0800a918 	.word	0x0800a918
 8002b40:	0800a924 	.word	0x0800a924
 8002b44:	0800a934 	.word	0x0800a934
 8002b48:	0800a944 	.word	0x0800a944

08002b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b4c:	f7ff fc64 	bl	8002418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b50:	480b      	ldr	r0, [pc, #44]	@ (8002b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b52:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a09      	ldr	r2, [pc, #36]	@ (8002b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b68:	4c09      	ldr	r4, [pc, #36]	@ (8002b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b76:	f002 ff7b 	bl	8005a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b7a:	f7fe fba1 	bl	80012c0 <main>
  bx lr
 8002b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002b88:	0800b600 	.word	0x0800b600
  ldr r2, =_sbss
 8002b8c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002b90:	200008e0 	.word	0x200008e0

08002b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC1_2_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	@ (8002bc0 <HAL_Init+0x28>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	@ (8002bc0 <HAL_Init+0x28>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f92b 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	200f      	movs	r0, #15
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fb10 	bl	80021d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40022000 	.word	0x40022000

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f935 	bl	8002e52 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f90b 	bl	8002e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	@ (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000090 	.word	0x20000090
 8002c1c:	20000098 	.word	0x20000098
 8002c20:	20000094 	.word	0x20000094

08002c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_IncTick+0x1c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a03      	ldr	r2, [pc, #12]	@ (8002c44 <HAL_IncTick+0x20>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000098 	.word	0x20000098
 8002c44:	20000790 	.word	0x20000790

08002c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b02      	ldr	r3, [pc, #8]	@ (8002c58 <HAL_GetTick+0x10>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000790 	.word	0x20000790

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff fff0 	bl	8002c48 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c82:	bf00      	nop
 8002c84:	f7ff ffe0 	bl	8002c48 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000098 	.word	0x20000098

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff90 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff49 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e2c:	f7ff ff5e 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	6978      	ldr	r0, [r7, #20]
 8002e38:	f7ff ff90 	bl	8002d5c <NVIC_EncodePriority>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff5f 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffb0 	bl	8002dc0 <SysTick_Config>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b08b      	sub	sp, #44	@ 0x2c
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7e:	e169      	b.n	8003154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e80:	2201      	movs	r2, #1
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	f040 8158 	bne.w	800314e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4a9a      	ldr	r2, [pc, #616]	@ (800310c <HAL_GPIO_Init+0x2a0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d05e      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
 8002ea8:	4a98      	ldr	r2, [pc, #608]	@ (800310c <HAL_GPIO_Init+0x2a0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d875      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002eae:	4a98      	ldr	r2, [pc, #608]	@ (8003110 <HAL_GPIO_Init+0x2a4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d058      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
 8002eb4:	4a96      	ldr	r2, [pc, #600]	@ (8003110 <HAL_GPIO_Init+0x2a4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d86f      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002eba:	4a96      	ldr	r2, [pc, #600]	@ (8003114 <HAL_GPIO_Init+0x2a8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d052      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
 8002ec0:	4a94      	ldr	r2, [pc, #592]	@ (8003114 <HAL_GPIO_Init+0x2a8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d869      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002ec6:	4a94      	ldr	r2, [pc, #592]	@ (8003118 <HAL_GPIO_Init+0x2ac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d04c      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
 8002ecc:	4a92      	ldr	r2, [pc, #584]	@ (8003118 <HAL_GPIO_Init+0x2ac>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d863      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002ed2:	4a92      	ldr	r2, [pc, #584]	@ (800311c <HAL_GPIO_Init+0x2b0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d046      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
 8002ed8:	4a90      	ldr	r2, [pc, #576]	@ (800311c <HAL_GPIO_Init+0x2b0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d85d      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d82a      	bhi.n	8002f38 <HAL_GPIO_Init+0xcc>
 8002ee2:	2b12      	cmp	r3, #18
 8002ee4:	d859      	bhi.n	8002f9a <HAL_GPIO_Init+0x12e>
 8002ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <HAL_GPIO_Init+0x80>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002f67 	.word	0x08002f67
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f53 	.word	0x08002f53
 8002ef8:	08002f95 	.word	0x08002f95
 8002efc:	08002f9b 	.word	0x08002f9b
 8002f00:	08002f9b 	.word	0x08002f9b
 8002f04:	08002f9b 	.word	0x08002f9b
 8002f08:	08002f9b 	.word	0x08002f9b
 8002f0c:	08002f9b 	.word	0x08002f9b
 8002f10:	08002f9b 	.word	0x08002f9b
 8002f14:	08002f9b 	.word	0x08002f9b
 8002f18:	08002f9b 	.word	0x08002f9b
 8002f1c:	08002f9b 	.word	0x08002f9b
 8002f20:	08002f9b 	.word	0x08002f9b
 8002f24:	08002f9b 	.word	0x08002f9b
 8002f28:	08002f9b 	.word	0x08002f9b
 8002f2c:	08002f9b 	.word	0x08002f9b
 8002f30:	08002f49 	.word	0x08002f49
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	4a79      	ldr	r2, [pc, #484]	@ (8003120 <HAL_GPIO_Init+0x2b4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f3e:	e02c      	b.n	8002f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	623b      	str	r3, [r7, #32]
          break;
 8002f46:	e029      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	623b      	str	r3, [r7, #32]
          break;
 8002f50:	e024      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	3308      	adds	r3, #8
 8002f58:	623b      	str	r3, [r7, #32]
          break;
 8002f5a:	e01f      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	330c      	adds	r3, #12
 8002f62:	623b      	str	r3, [r7, #32]
          break;
 8002f64:	e01a      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e013      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f7c:	2308      	movs	r3, #8
 8002f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	611a      	str	r2, [r3, #16]
          break;
 8002f86:	e009      	b.n	8002f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f88:	2308      	movs	r3, #8
 8002f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	615a      	str	r2, [r3, #20]
          break;
 8002f92:	e003      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f94:	2300      	movs	r3, #0
 8002f96:	623b      	str	r3, [r7, #32]
          break;
 8002f98:	e000      	b.n	8002f9c <HAL_GPIO_Init+0x130>
          break;
 8002f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2bff      	cmp	r3, #255	@ 0xff
 8002fa0:	d801      	bhi.n	8002fa6 <HAL_GPIO_Init+0x13a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e001      	b.n	8002faa <HAL_GPIO_Init+0x13e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2bff      	cmp	r3, #255	@ 0xff
 8002fb0:	d802      	bhi.n	8002fb8 <HAL_GPIO_Init+0x14c>
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	e002      	b.n	8002fbe <HAL_GPIO_Init+0x152>
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	3b08      	subs	r3, #8
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	210f      	movs	r1, #15
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	401a      	ands	r2, r3
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80b1 	beq.w	800314e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fec:	4b4d      	ldr	r3, [pc, #308]	@ (8003124 <HAL_GPIO_Init+0x2b8>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8003124 <HAL_GPIO_Init+0x2b8>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_GPIO_Init+0x2b8>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003004:	4a48      	ldr	r2, [pc, #288]	@ (8003128 <HAL_GPIO_Init+0x2bc>)
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a40      	ldr	r2, [pc, #256]	@ (800312c <HAL_GPIO_Init+0x2c0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_GPIO_Init+0x1ec>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3f      	ldr	r2, [pc, #252]	@ (8003130 <HAL_GPIO_Init+0x2c4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x1e8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3e      	ldr	r2, [pc, #248]	@ (8003134 <HAL_GPIO_Init+0x2c8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x1e4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3d      	ldr	r2, [pc, #244]	@ (8003138 <HAL_GPIO_Init+0x2cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x1e0>
 8003048:	2303      	movs	r3, #3
 800304a:	e006      	b.n	800305a <HAL_GPIO_Init+0x1ee>
 800304c:	2304      	movs	r3, #4
 800304e:	e004      	b.n	800305a <HAL_GPIO_Init+0x1ee>
 8003050:	2302      	movs	r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x1ee>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_GPIO_Init+0x1ee>
 8003058:	2300      	movs	r3, #0
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800306a:	492f      	ldr	r1, [pc, #188]	@ (8003128 <HAL_GPIO_Init+0x2bc>)
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003084:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	492c      	ldr	r1, [pc, #176]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	608b      	str	r3, [r1, #8]
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	43db      	mvns	r3, r3
 800309a:	4928      	ldr	r1, [pc, #160]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 800309c:	4013      	ands	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030ac:	4b23      	ldr	r3, [pc, #140]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4922      	ldr	r1, [pc, #136]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60cb      	str	r3, [r1, #12]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	491e      	ldr	r1, [pc, #120]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d4:	4b19      	ldr	r3, [pc, #100]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4918      	ldr	r1, [pc, #96]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e2:	4b16      	ldr	r3, [pc, #88]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4914      	ldr	r1, [pc, #80]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d021      	beq.n	8003140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	490e      	ldr	r1, [pc, #56]	@ (800313c <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e021      	b.n	800314e <HAL_GPIO_Init+0x2e2>
 800310a:	bf00      	nop
 800310c:	10320000 	.word	0x10320000
 8003110:	10310000 	.word	0x10310000
 8003114:	10220000 	.word	0x10220000
 8003118:	10210000 	.word	0x10210000
 800311c:	10120000 	.word	0x10120000
 8003120:	10110000 	.word	0x10110000
 8003124:	40021000 	.word	0x40021000
 8003128:	40010000 	.word	0x40010000
 800312c:	40010800 	.word	0x40010800
 8003130:	40010c00 	.word	0x40010c00
 8003134:	40011000 	.word	0x40011000
 8003138:	40011400 	.word	0x40011400
 800313c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <HAL_GPIO_Init+0x304>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	43db      	mvns	r3, r3
 8003148:	4909      	ldr	r1, [pc, #36]	@ (8003170 <HAL_GPIO_Init+0x304>)
 800314a:	4013      	ands	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	3301      	adds	r3, #1
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	f47f ae8e 	bne.w	8002e80 <HAL_GPIO_Init+0x14>
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	372c      	adds	r7, #44	@ 0x2c
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	40010400 	.word	0x40010400

08003174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	887b      	ldrh	r3, [r7, #2]
 8003186:	4013      	ands	r3, r2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e001      	b.n	8003196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e12b      	b.n	800340e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fe f80c 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	@ 0x24
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003208:	f001 fbfc 	bl	8004a04 <HAL_RCC_GetPCLK1Freq>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a81      	ldr	r2, [pc, #516]	@ (8003418 <HAL_I2C_Init+0x274>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <HAL_I2C_Init+0x84>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a80      	ldr	r2, [pc, #512]	@ (800341c <HAL_I2C_Init+0x278>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e006      	b.n	8003236 <HAL_I2C_Init+0x92>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a7d      	ldr	r2, [pc, #500]	@ (8003420 <HAL_I2C_Init+0x27c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e0e7      	b.n	800340e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a78      	ldr	r2, [pc, #480]	@ (8003424 <HAL_I2C_Init+0x280>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0c9b      	lsrs	r3, r3, #18
 8003248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	4a6a      	ldr	r2, [pc, #424]	@ (8003418 <HAL_I2C_Init+0x274>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d802      	bhi.n	8003278 <HAL_I2C_Init+0xd4>
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3301      	adds	r3, #1
 8003276:	e009      	b.n	800328c <HAL_I2C_Init+0xe8>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	4a69      	ldr	r2, [pc, #420]	@ (8003428 <HAL_I2C_Init+0x284>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	3301      	adds	r3, #1
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800329e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	495c      	ldr	r1, [pc, #368]	@ (8003418 <HAL_I2C_Init+0x274>)
 80032a8:	428b      	cmp	r3, r1
 80032aa:	d819      	bhi.n	80032e0 <HAL_I2C_Init+0x13c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e59      	subs	r1, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032c0:	400b      	ands	r3, r1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_I2C_Init+0x138>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1e59      	subs	r1, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032da:	e051      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032dc:	2304      	movs	r3, #4
 80032de:	e04f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d111      	bne.n	800330c <HAL_I2C_Init+0x168>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	440b      	add	r3, r1
 80032f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e012      	b.n	8003332 <HAL_I2C_Init+0x18e>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x196>
 8003336:	2301      	movs	r3, #1
 8003338:	e022      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10e      	bne.n	8003360 <HAL_I2C_Init+0x1bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1e58      	subs	r0, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	440b      	add	r3, r1
 8003350:	fbb0 f3f3 	udiv	r3, r0, r3
 8003354:	3301      	adds	r3, #1
 8003356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Init+0x1dc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	6809      	ldr	r1, [r1, #0]
 8003384:	4313      	orrs	r3, r2
 8003386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6911      	ldr	r1, [r2, #16]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68d2      	ldr	r2, [r2, #12]
 80033ba:	4311      	orrs	r1, r2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0201 	orr.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	000186a0 	.word	0x000186a0
 800341c:	001e847f 	.word	0x001e847f
 8003420:	003d08ff 	.word	0x003d08ff
 8003424:	431bde83 	.word	0x431bde83
 8003428:	10624dd3 	.word	0x10624dd3

0800342c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003446:	f7ff fbff 	bl	8002c48 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	f040 80d9 	bne.w	800360c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2319      	movs	r3, #25
 8003460:	2201      	movs	r2, #1
 8003462:	496d      	ldr	r1, [pc, #436]	@ (8003618 <HAL_I2C_Mem_Write+0x1ec>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fccd 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	e0cc      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Write+0x56>
 800347e:	2302      	movs	r3, #2
 8003480:	e0c5      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d007      	beq.n	80034a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2221      	movs	r2, #33	@ 0x21
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a4d      	ldr	r2, [pc, #308]	@ (800361c <HAL_I2C_Mem_Write+0x1f0>)
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ea:	88f8      	ldrh	r0, [r7, #6]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4603      	mov	r3, r0
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fb04 	bl	8003b08 <I2C_RequestMemoryWrite>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d052      	beq.n	80035ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e081      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fd92 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <HAL_I2C_Mem_Write+0x180>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1aa      	bne.n	800350a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fd85 	bl	80040c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00d      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d107      	bne.n	80035dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e016      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	00100002 	.word	0x00100002
 800361c:	ffff0000 	.word	0xffff0000

08003620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800363e:	f7ff fb03 	bl	8002c48 <HAL_GetTick>
 8003642:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b20      	cmp	r3, #32
 800364e:	f040 8250 	bne.w	8003af2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2319      	movs	r3, #25
 8003658:	2201      	movs	r2, #1
 800365a:	4982      	ldr	r1, [pc, #520]	@ (8003864 <HAL_I2C_Mem_Read+0x244>)
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fbd1 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
 800366a:	e243      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_I2C_Mem_Read+0x5a>
 8003676:	2302      	movs	r3, #2
 8003678:	e23c      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d007      	beq.n	80036a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2222      	movs	r2, #34	@ 0x22
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2240      	movs	r2, #64	@ 0x40
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4a62      	ldr	r2, [pc, #392]	@ (8003868 <HAL_I2C_Mem_Read+0x248>)
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e2:	88f8      	ldrh	r0, [r7, #6]
 80036e4:	893a      	ldrh	r2, [r7, #8]
 80036e6:	8979      	ldrh	r1, [r7, #10]
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4603      	mov	r3, r0
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fa9e 	bl	8003c34 <I2C_RequestMemoryRead>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e1f8      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d113      	bne.n	8003732 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e1cc      	b.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003736:	2b01      	cmp	r3, #1
 8003738:	d11e      	bne.n	8003778 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800374a:	b672      	cpsid	i
}
 800374c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003774:	b662      	cpsie	i
}
 8003776:	e035      	b.n	80037e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377c:	2b02      	cmp	r3, #2
 800377e:	d11e      	bne.n	80037be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003790:	b672      	cpsid	i
}
 8003792:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037ba:	b662      	cpsie	i
}
 80037bc:	e012      	b.n	80037e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80037e4:	e172      	b.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	f200 811f 	bhi.w	8003a2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d123      	bne.n	8003840 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fcab 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e173      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800383e:	e145      	b.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	2b02      	cmp	r3, #2
 8003846:	d152      	bne.n	80038ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	2200      	movs	r2, #0
 8003850:	4906      	ldr	r1, [pc, #24]	@ (800386c <HAL_I2C_Mem_Read+0x24c>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fad6 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e148      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
 8003862:	bf00      	nop
 8003864:	00100002 	.word	0x00100002
 8003868:	ffff0000 	.word	0xffff0000
 800386c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003870:	b672      	cpsid	i
}
 8003872:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038b6:	b662      	cpsie	i
}
 80038b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038ec:	e0ee      	b.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	2200      	movs	r2, #0
 80038f6:	4981      	ldr	r1, [pc, #516]	@ (8003afc <HAL_I2C_Mem_Read+0x4dc>)
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fa83 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0f5      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003918:	b672      	cpsid	i
}
 800391a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800394e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b00 <HAL_I2C_Mem_Read+0x4e0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	08db      	lsrs	r3, r3, #3
 8003954:	4a6b      	ldr	r2, [pc, #428]	@ (8003b04 <HAL_I2C_Mem_Read+0x4e4>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a1a      	lsrs	r2, r3, #8
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00da      	lsls	r2, r3, #3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	3b01      	subs	r3, #1
 800396c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d118      	bne.n	80039a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003996:	b662      	cpsie	i
}
 8003998:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0a6      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d1d9      	bne.n	8003968 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039f6:	b662      	cpsie	i
}
 80039f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a2c:	e04e      	b.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fb90 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e058      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d124      	bne.n	8003acc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d107      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f47f ae88 	bne.w	80037e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	@ 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	00010004 	.word	0x00010004
 8003b00:	20000090 	.word	0x20000090
 8003b04:	14f8b589 	.word	0x14f8b589

08003b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f960 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b58:	d103      	bne.n	8003b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e05f      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	492d      	ldr	r1, [pc, #180]	@ (8003c30 <I2C_RequestMemoryWrite+0x128>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f9bb 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04c      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba4:	6a39      	ldr	r1, [r7, #32]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa46 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d107      	bne.n	8003bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e02b      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d105      	bne.n	8003be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
 8003bde:	e021      	b.n	8003c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fa20 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e005      	b.n	8003c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00010002 	.word	0x00010002

08003c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	4611      	mov	r1, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	817b      	strh	r3, [r7, #10]
 8003c46:	460b      	mov	r3, r1
 8003c48:	813b      	strh	r3, [r7, #8]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f8c2 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c94:	d103      	bne.n	8003c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0aa      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	6a3a      	ldr	r2, [r7, #32]
 8003cb6:	4952      	ldr	r1, [pc, #328]	@ (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f91d 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e097      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	6a39      	ldr	r1, [r7, #32]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f9a8 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d107      	bne.n	8003d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e076      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d105      	bne.n	8003d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	e021      	b.n	8003d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d1c:	893b      	ldrh	r3, [r7, #8]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f982 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e050      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d56:	893b      	ldrh	r3, [r7, #8]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d62:	6a39      	ldr	r1, [r7, #32]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f967 	bl	8004038 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e035      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f82b 	bl	8003e04 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dc2:	d103      	bne.n	8003dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e013      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	4906      	ldr	r1, [pc, #24]	@ (8003e00 <I2C_RequestMemoryRead+0x1cc>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f886 	bl	8003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	00010002 	.word	0x00010002

08003e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e14:	e048      	b.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d044      	beq.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fe ff13 	bl	8002c48 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d139      	bne.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10d      	bne.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	e00c      	b.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	43da      	mvns	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	4013      	ands	r3, r2
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	bf0c      	ite	eq
 8003e6c:	2301      	moveq	r3, #1
 8003e6e:	2300      	movne	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d116      	bne.n	8003ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e023      	b.n	8003ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10d      	bne.n	8003ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2301      	moveq	r3, #1
 8003ec6:	2300      	movne	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	e00c      	b.n	8003ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d093      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f06:	e071      	b.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f16:	d123      	bne.n	8003f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e067      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d041      	beq.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fe fe6e 	bl	8002c48 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d136      	bne.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10c      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e00b      	b.n	8003fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d016      	beq.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e021      	b.n	8004030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10c      	bne.n	8004010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	43da      	mvns	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4013      	ands	r3, r2
 8004002:	b29b      	uxth	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e00b      	b.n	8004028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	43da      	mvns	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	f47f af6d 	bne.w	8003f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004044:	e034      	b.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f8e3 	bl	8004212 <I2C_IsAcknowledgeFailed>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e034      	b.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d028      	beq.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fdf3 	bl	8002c48 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11d      	bne.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	2b80      	cmp	r3, #128	@ 0x80
 8004080:	d016      	beq.n	80040b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e007      	b.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b80      	cmp	r3, #128	@ 0x80
 80040bc:	d1c3      	bne.n	8004046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d4:	e034      	b.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f89b 	bl	8004212 <I2C_IsAcknowledgeFailed>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e034      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d028      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe fdab 	bl	8002c48 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11d      	bne.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d016      	beq.n	8004140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b04      	cmp	r3, #4
 800414c:	d1c3      	bne.n	80040d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004164:	e049      	b.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d119      	bne.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e030      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fe fd4e 	bl	8002c48 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d016      	beq.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b40      	cmp	r3, #64	@ 0x40
 8004206:	d1ae      	bne.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d11b      	bne.n	8004262 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004232:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr
	...

08004270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e272      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8087 	beq.w	800439e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004290:	4b92      	ldr	r3, [pc, #584]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b04      	cmp	r3, #4
 800429a:	d00c      	beq.n	80042b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800429c:	4b8f      	ldr	r3, [pc, #572]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d112      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
 80042a8:	4b8c      	ldr	r3, [pc, #560]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b4:	d10b      	bne.n	80042ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b6:	4b89      	ldr	r3, [pc, #548]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d06c      	beq.n	800439c <HAL_RCC_OscConfig+0x12c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d168      	bne.n	800439c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e24c      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x76>
 80042d8:	4b80      	ldr	r3, [pc, #512]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a7f      	ldr	r2, [pc, #508]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e02e      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b7b      	ldr	r3, [pc, #492]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7a      	ldr	r2, [pc, #488]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b78      	ldr	r3, [pc, #480]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a77      	ldr	r2, [pc, #476]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e01d      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0xbc>
 8004312:	4b72      	ldr	r3, [pc, #456]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a71      	ldr	r2, [pc, #452]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b6f      	ldr	r3, [pc, #444]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a6e      	ldr	r2, [pc, #440]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xd4>
 800432c:	4b6b      	ldr	r3, [pc, #428]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6a      	ldr	r2, [pc, #424]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b68      	ldr	r3, [pc, #416]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a67      	ldr	r2, [pc, #412]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434c:	f7fe fc7c 	bl	8002c48 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fe fc78 	bl	8002c48 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	@ 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e200      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	4b5d      	ldr	r3, [pc, #372]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0xe4>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fe fc68 	bl	8002c48 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fe fc64 	bl	8002c48 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e1ec      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	4b53      	ldr	r3, [pc, #332]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x10c>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d063      	beq.n	8004472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043aa:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043b6:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d11c      	bne.n	80043fc <HAL_RCC_OscConfig+0x18c>
 80043c2:	4b46      	ldr	r3, [pc, #280]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d116      	bne.n	80043fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	4b43      	ldr	r3, [pc, #268]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d005      	beq.n	80043e6 <HAL_RCC_OscConfig+0x176>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1c0      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e6:	4b3d      	ldr	r3, [pc, #244]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4939      	ldr	r1, [pc, #228]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	e03a      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d020      	beq.n	8004446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004404:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fe fc1d 	bl	8002c48 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004412:	f7fe fc19 	bl	8002c48 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e1a1      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	4b2d      	ldr	r3, [pc, #180]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004430:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	4927      	ldr	r1, [pc, #156]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
 8004444:	e015      	b.n	8004472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004446:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <HAL_RCC_OscConfig+0x270>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe fbfc 	bl	8002c48 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004454:	f7fe fbf8 	bl	8002c48 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e180      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d03a      	beq.n	80044f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d019      	beq.n	80044ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fe fbdc 	bl	8002c48 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004494:	f7fe fbd8 	bl	8002c48 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e160      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <HAL_RCC_OscConfig+0x26c>)
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044b2:	2001      	movs	r0, #1
 80044b4:	f000 faba 	bl	8004a2c <RCC_Delay>
 80044b8:	e01c      	b.n	80044f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <HAL_RCC_OscConfig+0x274>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c0:	f7fe fbc2 	bl	8002c48 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c6:	e00f      	b.n	80044e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fe fbbe 	bl	8002c48 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d908      	bls.n	80044e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e146      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	42420000 	.word	0x42420000
 80044e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b92      	ldr	r3, [pc, #584]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e9      	bne.n	80044c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a6 	beq.w	800464e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b8b      	ldr	r3, [pc, #556]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	4b88      	ldr	r3, [pc, #544]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a87      	ldr	r2, [pc, #540]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451c:	61d3      	str	r3, [r2, #28]
 800451e:	4b85      	ldr	r3, [pc, #532]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	4b82      	ldr	r3, [pc, #520]	@ (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d118      	bne.n	800456c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453a:	4b7f      	ldr	r3, [pc, #508]	@ (8004738 <HAL_RCC_OscConfig+0x4c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7e      	ldr	r2, [pc, #504]	@ (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004546:	f7fe fb7f 	bl	8002c48 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fe fb7b 	bl	8002c48 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b64      	cmp	r3, #100	@ 0x64
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e103      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	4b75      	ldr	r3, [pc, #468]	@ (8004738 <HAL_RCC_OscConfig+0x4c8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x312>
 8004574:	4b6f      	ldr	r3, [pc, #444]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a6e      	ldr	r2, [pc, #440]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6213      	str	r3, [r2, #32]
 8004580:	e02d      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x334>
 800458a:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a69      	ldr	r2, [pc, #420]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	f023 0301 	bic.w	r3, r3, #1
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	4b67      	ldr	r3, [pc, #412]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4a66      	ldr	r2, [pc, #408]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	6213      	str	r3, [r2, #32]
 80045a2:	e01c      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_OscConfig+0x356>
 80045ac:	4b61      	ldr	r3, [pc, #388]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a60      	ldr	r2, [pc, #384]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4a5d      	ldr	r2, [pc, #372]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	e00b      	b.n	80045de <HAL_RCC_OscConfig+0x36e>
 80045c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a5a      	ldr	r2, [pc, #360]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6213      	str	r3, [r2, #32]
 80045d2:	4b58      	ldr	r3, [pc, #352]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4a57      	ldr	r2, [pc, #348]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fe fb2f 	bl	8002c48 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe fb2b 	bl	8002c48 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0b1      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	4b4b      	ldr	r3, [pc, #300]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ee      	beq.n	80045ee <HAL_RCC_OscConfig+0x37e>
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fe fb19 	bl	8002c48 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fe fb15 	bl	8002c48 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e09b      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	4b40      	ldr	r3, [pc, #256]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b3c      	ldr	r3, [pc, #240]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	4a3b      	ldr	r2, [pc, #236]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800464c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 8087 	beq.w	8004766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004658:	4b36      	ldr	r3, [pc, #216]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d061      	beq.n	8004728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d146      	bne.n	80046fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b33      	ldr	r3, [pc, #204]	@ (800473c <HAL_RCC_OscConfig+0x4cc>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fae9 	bl	8002c48 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fae5 	bl	8002c48 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e06d      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468c:	4b29      	ldr	r3, [pc, #164]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046a0:	d108      	bne.n	80046b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4921      	ldr	r1, [pc, #132]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a19      	ldr	r1, [r3, #32]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	430b      	orrs	r3, r1
 80046c6:	491b      	ldr	r1, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046cc:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <HAL_RCC_OscConfig+0x4cc>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d2:	f7fe fab9 	bl	8002c48 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe fab5 	bl	8002c48 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e03d      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ec:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x46a>
 80046f8:	e035      	b.n	8004766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fa:	4b10      	ldr	r3, [pc, #64]	@ (800473c <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe faa2 	bl	8002c48 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fe fa9e 	bl	8002c48 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e026      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471a:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x498>
 8004726:	e01e      	b.n	8004766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e019      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
 800473c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_OscConfig+0x500>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	429a      	cmp	r2, r3
 8004752:	d106      	bne.n	8004762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0d0      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b6a      	ldr	r3, [pc, #424]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d910      	bls.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b67      	ldr	r3, [pc, #412]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 0207 	bic.w	r2, r3, #7
 800479e:	4965      	ldr	r1, [pc, #404]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b63      	ldr	r3, [pc, #396]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0b8      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d0:	4b59      	ldr	r3, [pc, #356]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4a58      	ldr	r2, [pc, #352]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e8:	4b53      	ldr	r3, [pc, #332]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a52      	ldr	r2, [pc, #328]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b50      	ldr	r3, [pc, #320]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	494d      	ldr	r1, [pc, #308]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d040      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b47      	ldr	r3, [pc, #284]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d115      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e07f      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b41      	ldr	r3, [pc, #260]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e073      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3d      	ldr	r3, [pc, #244]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e06b      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4936      	ldr	r1, [pc, #216]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fe f9f0 	bl	8002c48 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fe f9ec 	bl	8002c48 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e053      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b27      	ldr	r3, [pc, #156]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d210      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b24      	ldr	r3, [pc, #144]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 0207 	bic.w	r2, r3, #7
 80048aa:	4922      	ldr	r1, [pc, #136]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	4b20      	ldr	r3, [pc, #128]	@ (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d001      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4916      	ldr	r1, [pc, #88]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d009      	beq.n	8004902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ee:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	490e      	ldr	r1, [pc, #56]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004902:	f000 f821 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	490a      	ldr	r1, [pc, #40]	@ (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	5ccb      	ldrb	r3, [r1, r3]
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <HAL_RCC_ClockConfig+0x1cc>)
 800491c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800491e:	4b09      	ldr	r3, [pc, #36]	@ (8004944 <HAL_RCC_ClockConfig+0x1d0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe f94e 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40022000 	.word	0x40022000
 8004938:	40021000 	.word	0x40021000
 800493c:	0800af48 	.word	0x0800af48
 8004940:	20000090 	.word	0x20000090
 8004944:	20000094 	.word	0x20000094

08004948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	2300      	movs	r3, #0
 800495c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004962:	4b1e      	ldr	r3, [pc, #120]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 030c 	and.w	r3, r3, #12
 800496e:	2b04      	cmp	r3, #4
 8004970:	d002      	beq.n	8004978 <HAL_RCC_GetSysClockFreq+0x30>
 8004972:	2b08      	cmp	r3, #8
 8004974:	d003      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x36>
 8004976:	e027      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800497a:	613b      	str	r3, [r7, #16]
      break;
 800497c:	e027      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d010      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004996:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	0c5b      	lsrs	r3, r3, #17
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	4a11      	ldr	r2, [pc, #68]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049a2:	5cd3      	ldrb	r3, [r2, r3]
 80049a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a0d      	ldr	r2, [pc, #52]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049aa:	fb03 f202 	mul.w	r2, r3, r2
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e004      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a0c      	ldr	r2, [pc, #48]	@ (80049ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	613b      	str	r3, [r7, #16]
      break;
 80049c6:	e002      	b.n	80049ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049c8:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80049ca:	613b      	str	r3, [r7, #16]
      break;
 80049cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ce:	693b      	ldr	r3, [r7, #16]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40021000 	.word	0x40021000
 80049e0:	007a1200 	.word	0x007a1200
 80049e4:	0800af68 	.word	0x0800af68
 80049e8:	0800af78 	.word	0x0800af78
 80049ec:	003d0900 	.word	0x003d0900

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b02      	ldr	r3, [pc, #8]	@ (8004a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	20000090 	.word	0x20000090

08004a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a08:	f7ff fff2 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	0a1b      	lsrs	r3, r3, #8
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	4903      	ldr	r1, [pc, #12]	@ (8004a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1a:	5ccb      	ldrb	r3, [r1, r3]
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	0800af58 	.word	0x0800af58

08004a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <RCC_Delay+0x34>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a0a      	ldr	r2, [pc, #40]	@ (8004a64 <RCC_Delay+0x38>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0a5b      	lsrs	r3, r3, #9
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	fb02 f303 	mul.w	r3, r2, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a48:	bf00      	nop
  }
  while (Delay --);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e5a      	subs	r2, r3, #1
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1f9      	bne.n	8004a48 <RCC_Delay+0x1c>
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	20000090 	.word	0x20000090
 8004a64:	10624dd3 	.word	0x10624dd3

08004a68 <__cvt>:
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6e:	461d      	mov	r5, r3
 8004a70:	bfbb      	ittet	lt
 8004a72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004a76:	461d      	movlt	r5, r3
 8004a78:	2300      	movge	r3, #0
 8004a7a:	232d      	movlt	r3, #45	@ 0x2d
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	4614      	mov	r4, r2
 8004a80:	bfb8      	it	lt
 8004a82:	4614      	movlt	r4, r2
 8004a84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004a86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004a88:	7013      	strb	r3, [r2, #0]
 8004a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004a90:	f023 0820 	bic.w	r8, r3, #32
 8004a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a98:	d005      	beq.n	8004aa6 <__cvt+0x3e>
 8004a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a9e:	d100      	bne.n	8004aa2 <__cvt+0x3a>
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e000      	b.n	8004aa8 <__cvt+0x40>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	aa07      	add	r2, sp, #28
 8004aaa:	9204      	str	r2, [sp, #16]
 8004aac:	aa06      	add	r2, sp, #24
 8004aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ab2:	e9cd 3600 	strd	r3, r6, [sp]
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	462b      	mov	r3, r5
 8004aba:	f001 f8a9 	bl	8005c10 <_dtoa_r>
 8004abe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ac2:	4607      	mov	r7, r0
 8004ac4:	d119      	bne.n	8004afa <__cvt+0x92>
 8004ac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004ac8:	07db      	lsls	r3, r3, #31
 8004aca:	d50e      	bpl.n	8004aea <__cvt+0x82>
 8004acc:	eb00 0906 	add.w	r9, r0, r6
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	f7fb ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8004adc:	b108      	cbz	r0, 8004ae2 <__cvt+0x7a>
 8004ade:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ae2:	2230      	movs	r2, #48	@ 0x30
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	454b      	cmp	r3, r9
 8004ae8:	d31e      	bcc.n	8004b28 <__cvt+0xc0>
 8004aea:	4638      	mov	r0, r7
 8004aec:	9b07      	ldr	r3, [sp, #28]
 8004aee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004af0:	1bdb      	subs	r3, r3, r7
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	b008      	add	sp, #32
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004afe:	eb00 0906 	add.w	r9, r0, r6
 8004b02:	d1e5      	bne.n	8004ad0 <__cvt+0x68>
 8004b04:	7803      	ldrb	r3, [r0, #0]
 8004b06:	2b30      	cmp	r3, #48	@ 0x30
 8004b08:	d10a      	bne.n	8004b20 <__cvt+0xb8>
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb ff49 	bl	80009a8 <__aeabi_dcmpeq>
 8004b16:	b918      	cbnz	r0, 8004b20 <__cvt+0xb8>
 8004b18:	f1c6 0601 	rsb	r6, r6, #1
 8004b1c:	f8ca 6000 	str.w	r6, [sl]
 8004b20:	f8da 3000 	ldr.w	r3, [sl]
 8004b24:	4499      	add	r9, r3
 8004b26:	e7d3      	b.n	8004ad0 <__cvt+0x68>
 8004b28:	1c59      	adds	r1, r3, #1
 8004b2a:	9107      	str	r1, [sp, #28]
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e7d9      	b.n	8004ae4 <__cvt+0x7c>

08004b30 <__exponent>:
 8004b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b32:	2900      	cmp	r1, #0
 8004b34:	bfb6      	itet	lt
 8004b36:	232d      	movlt	r3, #45	@ 0x2d
 8004b38:	232b      	movge	r3, #43	@ 0x2b
 8004b3a:	4249      	neglt	r1, r1
 8004b3c:	2909      	cmp	r1, #9
 8004b3e:	7002      	strb	r2, [r0, #0]
 8004b40:	7043      	strb	r3, [r0, #1]
 8004b42:	dd29      	ble.n	8004b98 <__exponent+0x68>
 8004b44:	f10d 0307 	add.w	r3, sp, #7
 8004b48:	461d      	mov	r5, r3
 8004b4a:	270a      	movs	r7, #10
 8004b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b50:	461a      	mov	r2, r3
 8004b52:	fb07 1416 	mls	r4, r7, r6, r1
 8004b56:	3430      	adds	r4, #48	@ 0x30
 8004b58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b5c:	460c      	mov	r4, r1
 8004b5e:	2c63      	cmp	r4, #99	@ 0x63
 8004b60:	4631      	mov	r1, r6
 8004b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b66:	dcf1      	bgt.n	8004b4c <__exponent+0x1c>
 8004b68:	3130      	adds	r1, #48	@ 0x30
 8004b6a:	1e94      	subs	r4, r2, #2
 8004b6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b70:	4623      	mov	r3, r4
 8004b72:	1c41      	adds	r1, r0, #1
 8004b74:	42ab      	cmp	r3, r5
 8004b76:	d30a      	bcc.n	8004b8e <__exponent+0x5e>
 8004b78:	f10d 0309 	add.w	r3, sp, #9
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	42ac      	cmp	r4, r5
 8004b80:	bf88      	it	hi
 8004b82:	2300      	movhi	r3, #0
 8004b84:	3302      	adds	r3, #2
 8004b86:	4403      	add	r3, r0
 8004b88:	1a18      	subs	r0, r3, r0
 8004b8a:	b003      	add	sp, #12
 8004b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b96:	e7ed      	b.n	8004b74 <__exponent+0x44>
 8004b98:	2330      	movs	r3, #48	@ 0x30
 8004b9a:	3130      	adds	r1, #48	@ 0x30
 8004b9c:	7083      	strb	r3, [r0, #2]
 8004b9e:	70c1      	strb	r1, [r0, #3]
 8004ba0:	1d03      	adds	r3, r0, #4
 8004ba2:	e7f1      	b.n	8004b88 <__exponent+0x58>

08004ba4 <_printf_float>:
 8004ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	b091      	sub	sp, #68	@ 0x44
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f000 ff0b 	bl	80059d0 <_localeconv_r>
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	9308      	str	r3, [sp, #32]
 8004bc0:	f7fb fac6 	bl	8000150 <strlen>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8004bce:	3307      	adds	r3, #7
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	f103 0208 	add.w	r2, r3, #8
 8004bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004be0:	f8c8 2000 	str.w	r2, [r8]
 8004be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004bec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004bfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8004e70 <_printf_float+0x2cc>)
 8004c00:	f7fb ff04 	bl	8000a0c <__aeabi_dcmpun>
 8004c04:	bb70      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	4b98      	ldr	r3, [pc, #608]	@ (8004e70 <_printf_float+0x2cc>)
 8004c10:	f7fb fede 	bl	80009d0 <__aeabi_dcmple>
 8004c14:	bb30      	cbnz	r0, 8004c64 <_printf_float+0xc0>
 8004c16:	2200      	movs	r2, #0
 8004c18:	2300      	movs	r3, #0
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	4649      	mov	r1, r9
 8004c1e:	f7fb fecd 	bl	80009bc <__aeabi_dcmplt>
 8004c22:	b110      	cbz	r0, 8004c2a <_printf_float+0x86>
 8004c24:	232d      	movs	r3, #45	@ 0x2d
 8004c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c2a:	4a92      	ldr	r2, [pc, #584]	@ (8004e74 <_printf_float+0x2d0>)
 8004c2c:	4b92      	ldr	r3, [pc, #584]	@ (8004e78 <_printf_float+0x2d4>)
 8004c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c32:	bf94      	ite	ls
 8004c34:	4690      	movls	r8, r2
 8004c36:	4698      	movhi	r8, r3
 8004c38:	2303      	movs	r3, #3
 8004c3a:	f04f 0900 	mov.w	r9, #0
 8004c3e:	6123      	str	r3, [r4, #16]
 8004c40:	f02b 0304 	bic.w	r3, fp, #4
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	4633      	mov	r3, r6
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	9700      	str	r7, [sp, #0]
 8004c4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004c50:	f000 f9d4 	bl	8004ffc <_printf_common>
 8004c54:	3001      	adds	r0, #1
 8004c56:	f040 8090 	bne.w	8004d7a <_printf_float+0x1d6>
 8004c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5e:	b011      	add	sp, #68	@ 0x44
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	f7fb fece 	bl	8000a0c <__aeabi_dcmpun>
 8004c70:	b148      	cbz	r0, 8004c86 <_printf_float+0xe2>
 8004c72:	464b      	mov	r3, r9
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bfb8      	it	lt
 8004c78:	232d      	movlt	r3, #45	@ 0x2d
 8004c7a:	4a80      	ldr	r2, [pc, #512]	@ (8004e7c <_printf_float+0x2d8>)
 8004c7c:	bfb8      	it	lt
 8004c7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c82:	4b7f      	ldr	r3, [pc, #508]	@ (8004e80 <_printf_float+0x2dc>)
 8004c84:	e7d3      	b.n	8004c2e <_printf_float+0x8a>
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	d13f      	bne.n	8004d10 <_printf_float+0x16c>
 8004c90:	2306      	movs	r3, #6
 8004c92:	6063      	str	r3, [r4, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004c9a:	6023      	str	r3, [r4, #0]
 8004c9c:	9206      	str	r2, [sp, #24]
 8004c9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ca0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ca4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004cac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	464b      	mov	r3, r9
 8004cba:	910a      	str	r1, [sp, #40]	@ 0x28
 8004cbc:	f7ff fed4 	bl	8004a68 <__cvt>
 8004cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	2947      	cmp	r1, #71	@ 0x47
 8004cc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004cc8:	d128      	bne.n	8004d1c <_printf_float+0x178>
 8004cca:	1cc8      	adds	r0, r1, #3
 8004ccc:	db02      	blt.n	8004cd4 <_printf_float+0x130>
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	4299      	cmp	r1, r3
 8004cd2:	dd40      	ble.n	8004d56 <_printf_float+0x1b2>
 8004cd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004cd8:	fa5f fa8a 	uxtb.w	sl, sl
 8004cdc:	4652      	mov	r2, sl
 8004cde:	3901      	subs	r1, #1
 8004ce0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004ce4:	910d      	str	r1, [sp, #52]	@ 0x34
 8004ce6:	f7ff ff23 	bl	8004b30 <__exponent>
 8004cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004cec:	4681      	mov	r9, r0
 8004cee:	1813      	adds	r3, r2, r0
 8004cf0:	2a01      	cmp	r2, #1
 8004cf2:	6123      	str	r3, [r4, #16]
 8004cf4:	dc02      	bgt.n	8004cfc <_printf_float+0x158>
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	07d2      	lsls	r2, r2, #31
 8004cfa:	d501      	bpl.n	8004d00 <_printf_float+0x15c>
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d09e      	beq.n	8004c46 <_printf_float+0xa2>
 8004d08:	232d      	movs	r3, #45	@ 0x2d
 8004d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d0e:	e79a      	b.n	8004c46 <_printf_float+0xa2>
 8004d10:	2947      	cmp	r1, #71	@ 0x47
 8004d12:	d1bf      	bne.n	8004c94 <_printf_float+0xf0>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1bd      	bne.n	8004c94 <_printf_float+0xf0>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e7ba      	b.n	8004c92 <_printf_float+0xee>
 8004d1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d20:	d9dc      	bls.n	8004cdc <_printf_float+0x138>
 8004d22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d26:	d118      	bne.n	8004d5a <_printf_float+0x1b6>
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	dd0b      	ble.n	8004d46 <_printf_float+0x1a2>
 8004d2e:	6121      	str	r1, [r4, #16]
 8004d30:	b913      	cbnz	r3, 8004d38 <_printf_float+0x194>
 8004d32:	6822      	ldr	r2, [r4, #0]
 8004d34:	07d0      	lsls	r0, r2, #31
 8004d36:	d502      	bpl.n	8004d3e <_printf_float+0x19a>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	440b      	add	r3, r1
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	f04f 0900 	mov.w	r9, #0
 8004d42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d44:	e7dc      	b.n	8004d00 <_printf_float+0x15c>
 8004d46:	b913      	cbnz	r3, 8004d4e <_printf_float+0x1aa>
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	07d2      	lsls	r2, r2, #31
 8004d4c:	d501      	bpl.n	8004d52 <_printf_float+0x1ae>
 8004d4e:	3302      	adds	r3, #2
 8004d50:	e7f4      	b.n	8004d3c <_printf_float+0x198>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e7f2      	b.n	8004d3c <_printf_float+0x198>
 8004d56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d5c:	4299      	cmp	r1, r3
 8004d5e:	db05      	blt.n	8004d6c <_printf_float+0x1c8>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	6121      	str	r1, [r4, #16]
 8004d64:	07d8      	lsls	r0, r3, #31
 8004d66:	d5ea      	bpl.n	8004d3e <_printf_float+0x19a>
 8004d68:	1c4b      	adds	r3, r1, #1
 8004d6a:	e7e7      	b.n	8004d3c <_printf_float+0x198>
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	bfcc      	ite	gt
 8004d70:	2201      	movgt	r2, #1
 8004d72:	f1c1 0202 	rsble	r2, r1, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	e7e0      	b.n	8004d3c <_printf_float+0x198>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	055a      	lsls	r2, r3, #21
 8004d7e:	d407      	bmi.n	8004d90 <_printf_float+0x1ec>
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	4642      	mov	r2, r8
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	d12b      	bne.n	8004de6 <_printf_float+0x242>
 8004d8e:	e764      	b.n	8004c5a <_printf_float+0xb6>
 8004d90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d94:	f240 80dc 	bls.w	8004f50 <_printf_float+0x3ac>
 8004d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f7fb fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d033      	beq.n	8004e10 <_printf_float+0x26c>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4631      	mov	r1, r6
 8004dac:	4628      	mov	r0, r5
 8004dae:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <_printf_float+0x2e0>)
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	f43f af51 	beq.w	8004c5a <_printf_float+0xb6>
 8004db8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004dbc:	4543      	cmp	r3, r8
 8004dbe:	db02      	blt.n	8004dc6 <_printf_float+0x222>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	07d8      	lsls	r0, r3, #31
 8004dc4:	d50f      	bpl.n	8004de6 <_printf_float+0x242>
 8004dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f af42 	beq.w	8004c5a <_printf_float+0xb6>
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	f108 38ff 	add.w	r8, r8, #4294967295
 8004dde:	f104 0a1a 	add.w	sl, r4, #26
 8004de2:	45c8      	cmp	r8, r9
 8004de4:	dc09      	bgt.n	8004dfa <_printf_float+0x256>
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	079b      	lsls	r3, r3, #30
 8004dea:	f100 8102 	bmi.w	8004ff2 <_printf_float+0x44e>
 8004dee:	68e0      	ldr	r0, [r4, #12]
 8004df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004df2:	4298      	cmp	r0, r3
 8004df4:	bfb8      	it	lt
 8004df6:	4618      	movlt	r0, r3
 8004df8:	e731      	b.n	8004c5e <_printf_float+0xba>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f af28 	beq.w	8004c5a <_printf_float+0xb6>
 8004e0a:	f109 0901 	add.w	r9, r9, #1
 8004e0e:	e7e8      	b.n	8004de2 <_printf_float+0x23e>
 8004e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dc38      	bgt.n	8004e88 <_printf_float+0x2e4>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4a19      	ldr	r2, [pc, #100]	@ (8004e84 <_printf_float+0x2e0>)
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f af1a 	beq.w	8004c5a <_printf_float+0xb6>
 8004e26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004e2a:	ea59 0303 	orrs.w	r3, r9, r3
 8004e2e:	d102      	bne.n	8004e36 <_printf_float+0x292>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	07d9      	lsls	r1, r3, #31
 8004e34:	d5d7      	bpl.n	8004de6 <_printf_float+0x242>
 8004e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f af0a 	beq.w	8004c5a <_printf_float+0xb6>
 8004e46:	f04f 0a00 	mov.w	sl, #0
 8004e4a:	f104 0b1a 	add.w	fp, r4, #26
 8004e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e50:	425b      	negs	r3, r3
 8004e52:	4553      	cmp	r3, sl
 8004e54:	dc01      	bgt.n	8004e5a <_printf_float+0x2b6>
 8004e56:	464b      	mov	r3, r9
 8004e58:	e793      	b.n	8004d82 <_printf_float+0x1de>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	465a      	mov	r2, fp
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f aef8 	beq.w	8004c5a <_printf_float+0xb6>
 8004e6a:	f10a 0a01 	add.w	sl, sl, #1
 8004e6e:	e7ee      	b.n	8004e4e <_printf_float+0x2aa>
 8004e70:	7fefffff 	.word	0x7fefffff
 8004e74:	0800af7a 	.word	0x0800af7a
 8004e78:	0800af7e 	.word	0x0800af7e
 8004e7c:	0800af82 	.word	0x0800af82
 8004e80:	0800af86 	.word	0x0800af86
 8004e84:	0800af8a 	.word	0x0800af8a
 8004e88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e8e:	4553      	cmp	r3, sl
 8004e90:	bfa8      	it	ge
 8004e92:	4653      	movge	r3, sl
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	4699      	mov	r9, r3
 8004e98:	dc36      	bgt.n	8004f08 <_printf_float+0x364>
 8004e9a:	f04f 0b00 	mov.w	fp, #0
 8004e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ea2:	f104 021a 	add.w	r2, r4, #26
 8004ea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eaa:	eba3 0309 	sub.w	r3, r3, r9
 8004eae:	455b      	cmp	r3, fp
 8004eb0:	dc31      	bgt.n	8004f16 <_printf_float+0x372>
 8004eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eb4:	459a      	cmp	sl, r3
 8004eb6:	dc3a      	bgt.n	8004f2e <_printf_float+0x38a>
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	07da      	lsls	r2, r3, #31
 8004ebc:	d437      	bmi.n	8004f2e <_printf_float+0x38a>
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ec0:	ebaa 0903 	sub.w	r9, sl, r3
 8004ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ec6:	ebaa 0303 	sub.w	r3, sl, r3
 8004eca:	4599      	cmp	r9, r3
 8004ecc:	bfa8      	it	ge
 8004ece:	4699      	movge	r9, r3
 8004ed0:	f1b9 0f00 	cmp.w	r9, #0
 8004ed4:	dc33      	bgt.n	8004f3e <_printf_float+0x39a>
 8004ed6:	f04f 0800 	mov.w	r8, #0
 8004eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ede:	f104 0b1a 	add.w	fp, r4, #26
 8004ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8004ee8:	eba3 0309 	sub.w	r3, r3, r9
 8004eec:	4543      	cmp	r3, r8
 8004eee:	f77f af7a 	ble.w	8004de6 <_printf_float+0x242>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	465a      	mov	r2, fp
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	f43f aeac 	beq.w	8004c5a <_printf_float+0xb6>
 8004f02:	f108 0801 	add.w	r8, r8, #1
 8004f06:	e7ec      	b.n	8004ee2 <_printf_float+0x33e>
 8004f08:	4642      	mov	r2, r8
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	d1c2      	bne.n	8004e9a <_printf_float+0x2f6>
 8004f14:	e6a1      	b.n	8004c5a <_printf_float+0xb6>
 8004f16:	2301      	movs	r3, #1
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004f1e:	47b8      	blx	r7
 8004f20:	3001      	adds	r0, #1
 8004f22:	f43f ae9a 	beq.w	8004c5a <_printf_float+0xb6>
 8004f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f28:	f10b 0b01 	add.w	fp, fp, #1
 8004f2c:	e7bb      	b.n	8004ea6 <_printf_float+0x302>
 8004f2e:	4631      	mov	r1, r6
 8004f30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1c0      	bne.n	8004ebe <_printf_float+0x31a>
 8004f3c:	e68d      	b.n	8004c5a <_printf_float+0xb6>
 8004f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f40:	464b      	mov	r3, r9
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	4442      	add	r2, r8
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1c3      	bne.n	8004ed6 <_printf_float+0x332>
 8004f4e:	e684      	b.n	8004c5a <_printf_float+0xb6>
 8004f50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004f54:	f1ba 0f01 	cmp.w	sl, #1
 8004f58:	dc01      	bgt.n	8004f5e <_printf_float+0x3ba>
 8004f5a:	07db      	lsls	r3, r3, #31
 8004f5c:	d536      	bpl.n	8004fcc <_printf_float+0x428>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4642      	mov	r2, r8
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f ae76 	beq.w	8004c5a <_printf_float+0xb6>
 8004f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae6e 	beq.w	8004c5a <_printf_float+0xb6>
 8004f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f82:	2200      	movs	r2, #0
 8004f84:	2300      	movs	r3, #0
 8004f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f8a:	f7fb fd0d 	bl	80009a8 <__aeabi_dcmpeq>
 8004f8e:	b9c0      	cbnz	r0, 8004fc2 <_printf_float+0x41e>
 8004f90:	4653      	mov	r3, sl
 8004f92:	f108 0201 	add.w	r2, r8, #1
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d10c      	bne.n	8004fba <_printf_float+0x416>
 8004fa0:	e65b      	b.n	8004c5a <_printf_float+0xb6>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	465a      	mov	r2, fp
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	f43f ae54 	beq.w	8004c5a <_printf_float+0xb6>
 8004fb2:	f108 0801 	add.w	r8, r8, #1
 8004fb6:	45d0      	cmp	r8, sl
 8004fb8:	dbf3      	blt.n	8004fa2 <_printf_float+0x3fe>
 8004fba:	464b      	mov	r3, r9
 8004fbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004fc0:	e6e0      	b.n	8004d84 <_printf_float+0x1e0>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f104 0b1a 	add.w	fp, r4, #26
 8004fca:	e7f4      	b.n	8004fb6 <_printf_float+0x412>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4642      	mov	r2, r8
 8004fd0:	e7e1      	b.n	8004f96 <_printf_float+0x3f2>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	464a      	mov	r2, r9
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47b8      	blx	r7
 8004fdc:	3001      	adds	r0, #1
 8004fde:	f43f ae3c 	beq.w	8004c5a <_printf_float+0xb6>
 8004fe2:	f108 0801 	add.w	r8, r8, #1
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004fea:	1a5b      	subs	r3, r3, r1
 8004fec:	4543      	cmp	r3, r8
 8004fee:	dcf0      	bgt.n	8004fd2 <_printf_float+0x42e>
 8004ff0:	e6fd      	b.n	8004dee <_printf_float+0x24a>
 8004ff2:	f04f 0800 	mov.w	r8, #0
 8004ff6:	f104 0919 	add.w	r9, r4, #25
 8004ffa:	e7f4      	b.n	8004fe6 <_printf_float+0x442>

08004ffc <_printf_common>:
 8004ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005000:	4616      	mov	r6, r2
 8005002:	4698      	mov	r8, r3
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	4607      	mov	r7, r0
 800500a:	4293      	cmp	r3, r2
 800500c:	bfb8      	it	lt
 800500e:	4613      	movlt	r3, r2
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005016:	460c      	mov	r4, r1
 8005018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800501c:	b10a      	cbz	r2, 8005022 <_printf_common+0x26>
 800501e:	3301      	adds	r3, #1
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	0699      	lsls	r1, r3, #26
 8005026:	bf42      	ittt	mi
 8005028:	6833      	ldrmi	r3, [r6, #0]
 800502a:	3302      	addmi	r3, #2
 800502c:	6033      	strmi	r3, [r6, #0]
 800502e:	6825      	ldr	r5, [r4, #0]
 8005030:	f015 0506 	ands.w	r5, r5, #6
 8005034:	d106      	bne.n	8005044 <_printf_common+0x48>
 8005036:	f104 0a19 	add.w	sl, r4, #25
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	6832      	ldr	r2, [r6, #0]
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	42ab      	cmp	r3, r5
 8005042:	dc2b      	bgt.n	800509c <_printf_common+0xa0>
 8005044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	3b00      	subs	r3, #0
 800504c:	bf18      	it	ne
 800504e:	2301      	movne	r3, #1
 8005050:	0692      	lsls	r2, r2, #26
 8005052:	d430      	bmi.n	80050b6 <_printf_common+0xba>
 8005054:	4641      	mov	r1, r8
 8005056:	4638      	mov	r0, r7
 8005058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800505c:	47c8      	blx	r9
 800505e:	3001      	adds	r0, #1
 8005060:	d023      	beq.n	80050aa <_printf_common+0xae>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	f003 0306 	and.w	r3, r3, #6
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf14      	ite	ne
 800506e:	2500      	movne	r5, #0
 8005070:	6833      	ldreq	r3, [r6, #0]
 8005072:	f04f 0600 	mov.w	r6, #0
 8005076:	bf08      	it	eq
 8005078:	68e5      	ldreq	r5, [r4, #12]
 800507a:	f104 041a 	add.w	r4, r4, #26
 800507e:	bf08      	it	eq
 8005080:	1aed      	subeq	r5, r5, r3
 8005082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005086:	bf08      	it	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	4293      	cmp	r3, r2
 800508e:	bfc4      	itt	gt
 8005090:	1a9b      	subgt	r3, r3, r2
 8005092:	18ed      	addgt	r5, r5, r3
 8005094:	42b5      	cmp	r5, r6
 8005096:	d11a      	bne.n	80050ce <_printf_common+0xd2>
 8005098:	2000      	movs	r0, #0
 800509a:	e008      	b.n	80050ae <_printf_common+0xb2>
 800509c:	2301      	movs	r3, #1
 800509e:	4652      	mov	r2, sl
 80050a0:	4641      	mov	r1, r8
 80050a2:	4638      	mov	r0, r7
 80050a4:	47c8      	blx	r9
 80050a6:	3001      	adds	r0, #1
 80050a8:	d103      	bne.n	80050b2 <_printf_common+0xb6>
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	3501      	adds	r5, #1
 80050b4:	e7c1      	b.n	800503a <_printf_common+0x3e>
 80050b6:	2030      	movs	r0, #48	@ 0x30
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050c4:	4422      	add	r2, r4
 80050c6:	3302      	adds	r3, #2
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050cc:	e7c2      	b.n	8005054 <_printf_common+0x58>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4622      	mov	r2, r4
 80050d2:	4641      	mov	r1, r8
 80050d4:	4638      	mov	r0, r7
 80050d6:	47c8      	blx	r9
 80050d8:	3001      	adds	r0, #1
 80050da:	d0e6      	beq.n	80050aa <_printf_common+0xae>
 80050dc:	3601      	adds	r6, #1
 80050de:	e7d9      	b.n	8005094 <_printf_common+0x98>

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	7e0f      	ldrb	r7, [r1, #24]
 80050e6:	4691      	mov	r9, r2
 80050e8:	2f78      	cmp	r7, #120	@ 0x78
 80050ea:	4680      	mov	r8, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	469a      	mov	sl, r3
 80050f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	@ 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d3 	beq.w	80052a8 <_printf_i+0x1c8>
 8005102:	2f58      	cmp	r7, #88	@ 0x58
 8005104:	f000 80ba 	beq.w	800527c <_printf_i+0x19c>
 8005108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a101      	add	r1, pc, #4	@ (adr r1, 8005120 <_printf_i+0x40>)
 800511c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	0800528f 	.word	0x0800528f
 8005150:	080051b7 	.word	0x080051b7
 8005154:	08005249 	.word	0x08005249
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052b1 	.word	0x080052b1
 8005164:	08005109 	.word	0x08005109
 8005168:	080051b7 	.word	0x080051b7
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	08005251 	.word	0x08005251
 8005178:	6833      	ldr	r3, [r6, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6032      	str	r2, [r6, #0]
 8005180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e09e      	b.n	80052ca <_printf_i+0x1ea>
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	6031      	str	r1, [r6, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	d501      	bpl.n	800519c <_printf_i+0xbc>
 8005198:	681d      	ldr	r5, [r3, #0]
 800519a:	e003      	b.n	80051a4 <_printf_i+0xc4>
 800519c:	0645      	lsls	r5, r0, #25
 800519e:	d5fb      	bpl.n	8005198 <_printf_i+0xb8>
 80051a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051a4:	2d00      	cmp	r5, #0
 80051a6:	da03      	bge.n	80051b0 <_printf_i+0xd0>
 80051a8:	232d      	movs	r3, #45	@ 0x2d
 80051aa:	426d      	negs	r5, r5
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051b0:	230a      	movs	r3, #10
 80051b2:	4859      	ldr	r0, [pc, #356]	@ (8005318 <_printf_i+0x238>)
 80051b4:	e011      	b.n	80051da <_printf_i+0xfa>
 80051b6:	6821      	ldr	r1, [r4, #0]
 80051b8:	6833      	ldr	r3, [r6, #0]
 80051ba:	0608      	lsls	r0, r1, #24
 80051bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051c0:	d402      	bmi.n	80051c8 <_printf_i+0xe8>
 80051c2:	0649      	lsls	r1, r1, #25
 80051c4:	bf48      	it	mi
 80051c6:	b2ad      	uxthmi	r5, r5
 80051c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ca:	6033      	str	r3, [r6, #0]
 80051cc:	bf14      	ite	ne
 80051ce:	230a      	movne	r3, #10
 80051d0:	2308      	moveq	r3, #8
 80051d2:	4851      	ldr	r0, [pc, #324]	@ (8005318 <_printf_i+0x238>)
 80051d4:	2100      	movs	r1, #0
 80051d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051da:	6866      	ldr	r6, [r4, #4]
 80051dc:	2e00      	cmp	r6, #0
 80051de:	bfa8      	it	ge
 80051e0:	6821      	ldrge	r1, [r4, #0]
 80051e2:	60a6      	str	r6, [r4, #8]
 80051e4:	bfa4      	itt	ge
 80051e6:	f021 0104 	bicge.w	r1, r1, #4
 80051ea:	6021      	strge	r1, [r4, #0]
 80051ec:	b90d      	cbnz	r5, 80051f2 <_printf_i+0x112>
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	d04b      	beq.n	800528a <_printf_i+0x1aa>
 80051f2:	4616      	mov	r6, r2
 80051f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80051f8:	fb03 5711 	mls	r7, r3, r1, r5
 80051fc:	5dc7      	ldrb	r7, [r0, r7]
 80051fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005202:	462f      	mov	r7, r5
 8005204:	42bb      	cmp	r3, r7
 8005206:	460d      	mov	r5, r1
 8005208:	d9f4      	bls.n	80051f4 <_printf_i+0x114>
 800520a:	2b08      	cmp	r3, #8
 800520c:	d10b      	bne.n	8005226 <_printf_i+0x146>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	07df      	lsls	r7, r3, #31
 8005212:	d508      	bpl.n	8005226 <_printf_i+0x146>
 8005214:	6923      	ldr	r3, [r4, #16]
 8005216:	6861      	ldr	r1, [r4, #4]
 8005218:	4299      	cmp	r1, r3
 800521a:	bfde      	ittt	le
 800521c:	2330      	movle	r3, #48	@ 0x30
 800521e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005222:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005226:	1b92      	subs	r2, r2, r6
 8005228:	6122      	str	r2, [r4, #16]
 800522a:	464b      	mov	r3, r9
 800522c:	4621      	mov	r1, r4
 800522e:	4640      	mov	r0, r8
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	aa03      	add	r2, sp, #12
 8005236:	f7ff fee1 	bl	8004ffc <_printf_common>
 800523a:	3001      	adds	r0, #1
 800523c:	d14a      	bne.n	80052d4 <_printf_i+0x1f4>
 800523e:	f04f 30ff 	mov.w	r0, #4294967295
 8005242:	b004      	add	sp, #16
 8005244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f043 0320 	orr.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	2778      	movs	r7, #120	@ 0x78
 8005252:	4832      	ldr	r0, [pc, #200]	@ (800531c <_printf_i+0x23c>)
 8005254:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	6831      	ldr	r1, [r6, #0]
 800525c:	061f      	lsls	r7, r3, #24
 800525e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005262:	d402      	bmi.n	800526a <_printf_i+0x18a>
 8005264:	065f      	lsls	r7, r3, #25
 8005266:	bf48      	it	mi
 8005268:	b2ad      	uxthmi	r5, r5
 800526a:	6031      	str	r1, [r6, #0]
 800526c:	07d9      	lsls	r1, r3, #31
 800526e:	bf44      	itt	mi
 8005270:	f043 0320 	orrmi.w	r3, r3, #32
 8005274:	6023      	strmi	r3, [r4, #0]
 8005276:	b11d      	cbz	r5, 8005280 <_printf_i+0x1a0>
 8005278:	2310      	movs	r3, #16
 800527a:	e7ab      	b.n	80051d4 <_printf_i+0xf4>
 800527c:	4826      	ldr	r0, [pc, #152]	@ (8005318 <_printf_i+0x238>)
 800527e:	e7e9      	b.n	8005254 <_printf_i+0x174>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f023 0320 	bic.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	e7f6      	b.n	8005278 <_printf_i+0x198>
 800528a:	4616      	mov	r6, r2
 800528c:	e7bd      	b.n	800520a <_printf_i+0x12a>
 800528e:	6833      	ldr	r3, [r6, #0]
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6961      	ldr	r1, [r4, #20]
 8005296:	6030      	str	r0, [r6, #0]
 8005298:	062e      	lsls	r6, r5, #24
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	d501      	bpl.n	80052a2 <_printf_i+0x1c2>
 800529e:	6019      	str	r1, [r3, #0]
 80052a0:	e002      	b.n	80052a8 <_printf_i+0x1c8>
 80052a2:	0668      	lsls	r0, r5, #25
 80052a4:	d5fb      	bpl.n	800529e <_printf_i+0x1be>
 80052a6:	8019      	strh	r1, [r3, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	4616      	mov	r6, r2
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	e7bc      	b.n	800522a <_printf_i+0x14a>
 80052b0:	6833      	ldr	r3, [r6, #0]
 80052b2:	2100      	movs	r1, #0
 80052b4:	1d1a      	adds	r2, r3, #4
 80052b6:	6032      	str	r2, [r6, #0]
 80052b8:	681e      	ldr	r6, [r3, #0]
 80052ba:	6862      	ldr	r2, [r4, #4]
 80052bc:	4630      	mov	r0, r6
 80052be:	f000 fbfe 	bl	8005abe <memchr>
 80052c2:	b108      	cbz	r0, 80052c8 <_printf_i+0x1e8>
 80052c4:	1b80      	subs	r0, r0, r6
 80052c6:	6060      	str	r0, [r4, #4]
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	2300      	movs	r3, #0
 80052ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d2:	e7aa      	b.n	800522a <_printf_i+0x14a>
 80052d4:	4632      	mov	r2, r6
 80052d6:	4649      	mov	r1, r9
 80052d8:	4640      	mov	r0, r8
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	47d0      	blx	sl
 80052de:	3001      	adds	r0, #1
 80052e0:	d0ad      	beq.n	800523e <_printf_i+0x15e>
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	079b      	lsls	r3, r3, #30
 80052e6:	d413      	bmi.n	8005310 <_printf_i+0x230>
 80052e8:	68e0      	ldr	r0, [r4, #12]
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	4298      	cmp	r0, r3
 80052ee:	bfb8      	it	lt
 80052f0:	4618      	movlt	r0, r3
 80052f2:	e7a6      	b.n	8005242 <_printf_i+0x162>
 80052f4:	2301      	movs	r3, #1
 80052f6:	4632      	mov	r2, r6
 80052f8:	4649      	mov	r1, r9
 80052fa:	4640      	mov	r0, r8
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d09d      	beq.n	800523e <_printf_i+0x15e>
 8005302:	3501      	adds	r5, #1
 8005304:	68e3      	ldr	r3, [r4, #12]
 8005306:	9903      	ldr	r1, [sp, #12]
 8005308:	1a5b      	subs	r3, r3, r1
 800530a:	42ab      	cmp	r3, r5
 800530c:	dcf2      	bgt.n	80052f4 <_printf_i+0x214>
 800530e:	e7eb      	b.n	80052e8 <_printf_i+0x208>
 8005310:	2500      	movs	r5, #0
 8005312:	f104 0619 	add.w	r6, r4, #25
 8005316:	e7f5      	b.n	8005304 <_printf_i+0x224>
 8005318:	0800af8c 	.word	0x0800af8c
 800531c:	0800af9d 	.word	0x0800af9d

08005320 <_scanf_float>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b087      	sub	sp, #28
 8005326:	9303      	str	r3, [sp, #12]
 8005328:	688b      	ldr	r3, [r1, #8]
 800532a:	4617      	mov	r7, r2
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005332:	bf82      	ittt	hi
 8005334:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005338:	eb03 0b05 	addhi.w	fp, r3, r5
 800533c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005340:	460a      	mov	r2, r1
 8005342:	f04f 0500 	mov.w	r5, #0
 8005346:	bf88      	it	hi
 8005348:	608b      	strhi	r3, [r1, #8]
 800534a:	680b      	ldr	r3, [r1, #0]
 800534c:	4680      	mov	r8, r0
 800534e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005352:	f842 3b1c 	str.w	r3, [r2], #28
 8005356:	460c      	mov	r4, r1
 8005358:	bf98      	it	ls
 800535a:	f04f 0b00 	movls.w	fp, #0
 800535e:	4616      	mov	r6, r2
 8005360:	46aa      	mov	sl, r5
 8005362:	46a9      	mov	r9, r5
 8005364:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005368:	9201      	str	r2, [sp, #4]
 800536a:	9502      	str	r5, [sp, #8]
 800536c:	68a2      	ldr	r2, [r4, #8]
 800536e:	b152      	cbz	r2, 8005386 <_scanf_float+0x66>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b4e      	cmp	r3, #78	@ 0x4e
 8005376:	d865      	bhi.n	8005444 <_scanf_float+0x124>
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	d83d      	bhi.n	80053f8 <_scanf_float+0xd8>
 800537c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005380:	b2c8      	uxtb	r0, r1
 8005382:	280e      	cmp	r0, #14
 8005384:	d93b      	bls.n	80053fe <_scanf_float+0xde>
 8005386:	f1b9 0f00 	cmp.w	r9, #0
 800538a:	d003      	beq.n	8005394 <_scanf_float+0x74>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005398:	f1ba 0f01 	cmp.w	sl, #1
 800539c:	f200 8118 	bhi.w	80055d0 <_scanf_float+0x2b0>
 80053a0:	9b01      	ldr	r3, [sp, #4]
 80053a2:	429e      	cmp	r6, r3
 80053a4:	f200 8109 	bhi.w	80055ba <_scanf_float+0x29a>
 80053a8:	2001      	movs	r0, #1
 80053aa:	b007      	add	sp, #28
 80053ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80053b4:	2a0d      	cmp	r2, #13
 80053b6:	d8e6      	bhi.n	8005386 <_scanf_float+0x66>
 80053b8:	a101      	add	r1, pc, #4	@ (adr r1, 80053c0 <_scanf_float+0xa0>)
 80053ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80053be:	bf00      	nop
 80053c0:	08005507 	.word	0x08005507
 80053c4:	08005387 	.word	0x08005387
 80053c8:	08005387 	.word	0x08005387
 80053cc:	08005387 	.word	0x08005387
 80053d0:	08005567 	.word	0x08005567
 80053d4:	0800553f 	.word	0x0800553f
 80053d8:	08005387 	.word	0x08005387
 80053dc:	08005387 	.word	0x08005387
 80053e0:	08005515 	.word	0x08005515
 80053e4:	08005387 	.word	0x08005387
 80053e8:	08005387 	.word	0x08005387
 80053ec:	08005387 	.word	0x08005387
 80053f0:	08005387 	.word	0x08005387
 80053f4:	080054cd 	.word	0x080054cd
 80053f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80053fc:	e7da      	b.n	80053b4 <_scanf_float+0x94>
 80053fe:	290e      	cmp	r1, #14
 8005400:	d8c1      	bhi.n	8005386 <_scanf_float+0x66>
 8005402:	a001      	add	r0, pc, #4	@ (adr r0, 8005408 <_scanf_float+0xe8>)
 8005404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005408:	080054bd 	.word	0x080054bd
 800540c:	08005387 	.word	0x08005387
 8005410:	080054bd 	.word	0x080054bd
 8005414:	08005553 	.word	0x08005553
 8005418:	08005387 	.word	0x08005387
 800541c:	08005465 	.word	0x08005465
 8005420:	080054a3 	.word	0x080054a3
 8005424:	080054a3 	.word	0x080054a3
 8005428:	080054a3 	.word	0x080054a3
 800542c:	080054a3 	.word	0x080054a3
 8005430:	080054a3 	.word	0x080054a3
 8005434:	080054a3 	.word	0x080054a3
 8005438:	080054a3 	.word	0x080054a3
 800543c:	080054a3 	.word	0x080054a3
 8005440:	080054a3 	.word	0x080054a3
 8005444:	2b6e      	cmp	r3, #110	@ 0x6e
 8005446:	d809      	bhi.n	800545c <_scanf_float+0x13c>
 8005448:	2b60      	cmp	r3, #96	@ 0x60
 800544a:	d8b1      	bhi.n	80053b0 <_scanf_float+0x90>
 800544c:	2b54      	cmp	r3, #84	@ 0x54
 800544e:	d07b      	beq.n	8005548 <_scanf_float+0x228>
 8005450:	2b59      	cmp	r3, #89	@ 0x59
 8005452:	d198      	bne.n	8005386 <_scanf_float+0x66>
 8005454:	2d07      	cmp	r5, #7
 8005456:	d196      	bne.n	8005386 <_scanf_float+0x66>
 8005458:	2508      	movs	r5, #8
 800545a:	e02c      	b.n	80054b6 <_scanf_float+0x196>
 800545c:	2b74      	cmp	r3, #116	@ 0x74
 800545e:	d073      	beq.n	8005548 <_scanf_float+0x228>
 8005460:	2b79      	cmp	r3, #121	@ 0x79
 8005462:	e7f6      	b.n	8005452 <_scanf_float+0x132>
 8005464:	6821      	ldr	r1, [r4, #0]
 8005466:	05c8      	lsls	r0, r1, #23
 8005468:	d51b      	bpl.n	80054a2 <_scanf_float+0x182>
 800546a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800546e:	6021      	str	r1, [r4, #0]
 8005470:	f109 0901 	add.w	r9, r9, #1
 8005474:	f1bb 0f00 	cmp.w	fp, #0
 8005478:	d003      	beq.n	8005482 <_scanf_float+0x162>
 800547a:	3201      	adds	r2, #1
 800547c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005480:	60a2      	str	r2, [r4, #8]
 8005482:	68a3      	ldr	r3, [r4, #8]
 8005484:	3b01      	subs	r3, #1
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	6923      	ldr	r3, [r4, #16]
 800548a:	3301      	adds	r3, #1
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3b01      	subs	r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	f340 8087 	ble.w	80055a8 <_scanf_float+0x288>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	e764      	b.n	800536c <_scanf_float+0x4c>
 80054a2:	eb1a 0105 	adds.w	r1, sl, r5
 80054a6:	f47f af6e 	bne.w	8005386 <_scanf_float+0x66>
 80054aa:	460d      	mov	r5, r1
 80054ac:	468a      	mov	sl, r1
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80054b4:	6022      	str	r2, [r4, #0]
 80054b6:	f806 3b01 	strb.w	r3, [r6], #1
 80054ba:	e7e2      	b.n	8005482 <_scanf_float+0x162>
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	0610      	lsls	r0, r2, #24
 80054c0:	f57f af61 	bpl.w	8005386 <_scanf_float+0x66>
 80054c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054c8:	6022      	str	r2, [r4, #0]
 80054ca:	e7f4      	b.n	80054b6 <_scanf_float+0x196>
 80054cc:	f1ba 0f00 	cmp.w	sl, #0
 80054d0:	d10e      	bne.n	80054f0 <_scanf_float+0x1d0>
 80054d2:	f1b9 0f00 	cmp.w	r9, #0
 80054d6:	d10e      	bne.n	80054f6 <_scanf_float+0x1d6>
 80054d8:	6822      	ldr	r2, [r4, #0]
 80054da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80054de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80054e2:	d108      	bne.n	80054f6 <_scanf_float+0x1d6>
 80054e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80054e8:	f04f 0a01 	mov.w	sl, #1
 80054ec:	6022      	str	r2, [r4, #0]
 80054ee:	e7e2      	b.n	80054b6 <_scanf_float+0x196>
 80054f0:	f1ba 0f02 	cmp.w	sl, #2
 80054f4:	d055      	beq.n	80055a2 <_scanf_float+0x282>
 80054f6:	2d01      	cmp	r5, #1
 80054f8:	d002      	beq.n	8005500 <_scanf_float+0x1e0>
 80054fa:	2d04      	cmp	r5, #4
 80054fc:	f47f af43 	bne.w	8005386 <_scanf_float+0x66>
 8005500:	3501      	adds	r5, #1
 8005502:	b2ed      	uxtb	r5, r5
 8005504:	e7d7      	b.n	80054b6 <_scanf_float+0x196>
 8005506:	f1ba 0f01 	cmp.w	sl, #1
 800550a:	f47f af3c 	bne.w	8005386 <_scanf_float+0x66>
 800550e:	f04f 0a02 	mov.w	sl, #2
 8005512:	e7d0      	b.n	80054b6 <_scanf_float+0x196>
 8005514:	b97d      	cbnz	r5, 8005536 <_scanf_float+0x216>
 8005516:	f1b9 0f00 	cmp.w	r9, #0
 800551a:	f47f af37 	bne.w	800538c <_scanf_float+0x6c>
 800551e:	6822      	ldr	r2, [r4, #0]
 8005520:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005524:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005528:	f040 8103 	bne.w	8005732 <_scanf_float+0x412>
 800552c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005530:	2501      	movs	r5, #1
 8005532:	6022      	str	r2, [r4, #0]
 8005534:	e7bf      	b.n	80054b6 <_scanf_float+0x196>
 8005536:	2d03      	cmp	r5, #3
 8005538:	d0e2      	beq.n	8005500 <_scanf_float+0x1e0>
 800553a:	2d05      	cmp	r5, #5
 800553c:	e7de      	b.n	80054fc <_scanf_float+0x1dc>
 800553e:	2d02      	cmp	r5, #2
 8005540:	f47f af21 	bne.w	8005386 <_scanf_float+0x66>
 8005544:	2503      	movs	r5, #3
 8005546:	e7b6      	b.n	80054b6 <_scanf_float+0x196>
 8005548:	2d06      	cmp	r5, #6
 800554a:	f47f af1c 	bne.w	8005386 <_scanf_float+0x66>
 800554e:	2507      	movs	r5, #7
 8005550:	e7b1      	b.n	80054b6 <_scanf_float+0x196>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	0591      	lsls	r1, r2, #22
 8005556:	f57f af16 	bpl.w	8005386 <_scanf_float+0x66>
 800555a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800555e:	6022      	str	r2, [r4, #0]
 8005560:	f8cd 9008 	str.w	r9, [sp, #8]
 8005564:	e7a7      	b.n	80054b6 <_scanf_float+0x196>
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800556c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005570:	d006      	beq.n	8005580 <_scanf_float+0x260>
 8005572:	0550      	lsls	r0, r2, #21
 8005574:	f57f af07 	bpl.w	8005386 <_scanf_float+0x66>
 8005578:	f1b9 0f00 	cmp.w	r9, #0
 800557c:	f000 80d9 	beq.w	8005732 <_scanf_float+0x412>
 8005580:	0591      	lsls	r1, r2, #22
 8005582:	bf58      	it	pl
 8005584:	9902      	ldrpl	r1, [sp, #8]
 8005586:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800558a:	bf58      	it	pl
 800558c:	eba9 0101 	subpl.w	r1, r9, r1
 8005590:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005594:	f04f 0900 	mov.w	r9, #0
 8005598:	bf58      	it	pl
 800559a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	e789      	b.n	80054b6 <_scanf_float+0x196>
 80055a2:	f04f 0a03 	mov.w	sl, #3
 80055a6:	e786      	b.n	80054b6 <_scanf_float+0x196>
 80055a8:	4639      	mov	r1, r7
 80055aa:	4640      	mov	r0, r8
 80055ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055b0:	4798      	blx	r3
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f43f aeda 	beq.w	800536c <_scanf_float+0x4c>
 80055b8:	e6e5      	b.n	8005386 <_scanf_float+0x66>
 80055ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055be:	463a      	mov	r2, r7
 80055c0:	4640      	mov	r0, r8
 80055c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055c6:	4798      	blx	r3
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	e6e7      	b.n	80053a0 <_scanf_float+0x80>
 80055d0:	1e6b      	subs	r3, r5, #1
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d824      	bhi.n	8005620 <_scanf_float+0x300>
 80055d6:	2d02      	cmp	r5, #2
 80055d8:	d836      	bhi.n	8005648 <_scanf_float+0x328>
 80055da:	9b01      	ldr	r3, [sp, #4]
 80055dc:	429e      	cmp	r6, r3
 80055de:	f67f aee3 	bls.w	80053a8 <_scanf_float+0x88>
 80055e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055e6:	463a      	mov	r2, r7
 80055e8:	4640      	mov	r0, r8
 80055ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80055ee:	4798      	blx	r3
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	6123      	str	r3, [r4, #16]
 80055f6:	e7f0      	b.n	80055da <_scanf_float+0x2ba>
 80055f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055fc:	463a      	mov	r2, r7
 80055fe:	4640      	mov	r0, r8
 8005600:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005604:	4798      	blx	r3
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	3b01      	subs	r3, #1
 800560a:	6123      	str	r3, [r4, #16]
 800560c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005610:	fa5f fa8a 	uxtb.w	sl, sl
 8005614:	f1ba 0f02 	cmp.w	sl, #2
 8005618:	d1ee      	bne.n	80055f8 <_scanf_float+0x2d8>
 800561a:	3d03      	subs	r5, #3
 800561c:	b2ed      	uxtb	r5, r5
 800561e:	1b76      	subs	r6, r6, r5
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	05da      	lsls	r2, r3, #23
 8005624:	d530      	bpl.n	8005688 <_scanf_float+0x368>
 8005626:	055b      	lsls	r3, r3, #21
 8005628:	d511      	bpl.n	800564e <_scanf_float+0x32e>
 800562a:	9b01      	ldr	r3, [sp, #4]
 800562c:	429e      	cmp	r6, r3
 800562e:	f67f aebb 	bls.w	80053a8 <_scanf_float+0x88>
 8005632:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005636:	463a      	mov	r2, r7
 8005638:	4640      	mov	r0, r8
 800563a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800563e:	4798      	blx	r3
 8005640:	6923      	ldr	r3, [r4, #16]
 8005642:	3b01      	subs	r3, #1
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	e7f0      	b.n	800562a <_scanf_float+0x30a>
 8005648:	46aa      	mov	sl, r5
 800564a:	46b3      	mov	fp, r6
 800564c:	e7de      	b.n	800560c <_scanf_float+0x2ec>
 800564e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	2965      	cmp	r1, #101	@ 0x65
 8005656:	f103 33ff 	add.w	r3, r3, #4294967295
 800565a:	f106 35ff 	add.w	r5, r6, #4294967295
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	d00c      	beq.n	800567c <_scanf_float+0x35c>
 8005662:	2945      	cmp	r1, #69	@ 0x45
 8005664:	d00a      	beq.n	800567c <_scanf_float+0x35c>
 8005666:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800566a:	463a      	mov	r2, r7
 800566c:	4640      	mov	r0, r8
 800566e:	4798      	blx	r3
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005676:	3b01      	subs	r3, #1
 8005678:	1eb5      	subs	r5, r6, #2
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	463a      	mov	r2, r7
 800567e:	4640      	mov	r0, r8
 8005680:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005684:	4798      	blx	r3
 8005686:	462e      	mov	r6, r5
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	f012 0210 	ands.w	r2, r2, #16
 800568e:	d001      	beq.n	8005694 <_scanf_float+0x374>
 8005690:	2000      	movs	r0, #0
 8005692:	e68a      	b.n	80053aa <_scanf_float+0x8a>
 8005694:	7032      	strb	r2, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a0:	d11c      	bne.n	80056dc <_scanf_float+0x3bc>
 80056a2:	9b02      	ldr	r3, [sp, #8]
 80056a4:	454b      	cmp	r3, r9
 80056a6:	eba3 0209 	sub.w	r2, r3, r9
 80056aa:	d123      	bne.n	80056f4 <_scanf_float+0x3d4>
 80056ac:	2200      	movs	r2, #0
 80056ae:	4640      	mov	r0, r8
 80056b0:	9901      	ldr	r1, [sp, #4]
 80056b2:	f002 fc15 	bl	8007ee0 <_strtod_r>
 80056b6:	9b03      	ldr	r3, [sp, #12]
 80056b8:	6825      	ldr	r5, [r4, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f015 0f02 	tst.w	r5, #2
 80056c0:	4606      	mov	r6, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	f103 0204 	add.w	r2, r3, #4
 80056c8:	d01f      	beq.n	800570a <_scanf_float+0x3ea>
 80056ca:	9903      	ldr	r1, [sp, #12]
 80056cc:	600a      	str	r2, [r1, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	e9c3 6700 	strd	r6, r7, [r3]
 80056d4:	68e3      	ldr	r3, [r4, #12]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60e3      	str	r3, [r4, #12]
 80056da:	e7d9      	b.n	8005690 <_scanf_float+0x370>
 80056dc:	9b04      	ldr	r3, [sp, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0e4      	beq.n	80056ac <_scanf_float+0x38c>
 80056e2:	9905      	ldr	r1, [sp, #20]
 80056e4:	230a      	movs	r3, #10
 80056e6:	4640      	mov	r0, r8
 80056e8:	3101      	adds	r1, #1
 80056ea:	f002 fc79 	bl	8007fe0 <_strtol_r>
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	9e05      	ldr	r6, [sp, #20]
 80056f2:	1ac2      	subs	r2, r0, r3
 80056f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80056f8:	429e      	cmp	r6, r3
 80056fa:	bf28      	it	cs
 80056fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005700:	4630      	mov	r0, r6
 8005702:	490d      	ldr	r1, [pc, #52]	@ (8005738 <_scanf_float+0x418>)
 8005704:	f000 f8de 	bl	80058c4 <siprintf>
 8005708:	e7d0      	b.n	80056ac <_scanf_float+0x38c>
 800570a:	076d      	lsls	r5, r5, #29
 800570c:	d4dd      	bmi.n	80056ca <_scanf_float+0x3aa>
 800570e:	9d03      	ldr	r5, [sp, #12]
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	681d      	ldr	r5, [r3, #0]
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	f7fb f978 	bl	8000a0c <__aeabi_dcmpun>
 800571c:	b120      	cbz	r0, 8005728 <_scanf_float+0x408>
 800571e:	4807      	ldr	r0, [pc, #28]	@ (800573c <_scanf_float+0x41c>)
 8005720:	f000 f9ea 	bl	8005af8 <nanf>
 8005724:	6028      	str	r0, [r5, #0]
 8005726:	e7d5      	b.n	80056d4 <_scanf_float+0x3b4>
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fb f9cc 	bl	8000ac8 <__aeabi_d2f>
 8005730:	e7f8      	b.n	8005724 <_scanf_float+0x404>
 8005732:	f04f 0900 	mov.w	r9, #0
 8005736:	e62d      	b.n	8005394 <_scanf_float+0x74>
 8005738:	0800afae 	.word	0x0800afae
 800573c:	0800b345 	.word	0x0800b345

08005740 <std>:
 8005740:	2300      	movs	r3, #0
 8005742:	b510      	push	{r4, lr}
 8005744:	4604      	mov	r4, r0
 8005746:	e9c0 3300 	strd	r3, r3, [r0]
 800574a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800574e:	6083      	str	r3, [r0, #8]
 8005750:	8181      	strh	r1, [r0, #12]
 8005752:	6643      	str	r3, [r0, #100]	@ 0x64
 8005754:	81c2      	strh	r2, [r0, #14]
 8005756:	6183      	str	r3, [r0, #24]
 8005758:	4619      	mov	r1, r3
 800575a:	2208      	movs	r2, #8
 800575c:	305c      	adds	r0, #92	@ 0x5c
 800575e:	f000 f92e 	bl	80059be <memset>
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <std+0x58>)
 8005764:	6224      	str	r4, [r4, #32]
 8005766:	6263      	str	r3, [r4, #36]	@ 0x24
 8005768:	4b0c      	ldr	r3, [pc, #48]	@ (800579c <std+0x5c>)
 800576a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <std+0x60>)
 800576e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005770:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <std+0x64>)
 8005772:	6323      	str	r3, [r4, #48]	@ 0x30
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <std+0x68>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d006      	beq.n	8005788 <std+0x48>
 800577a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800577e:	4294      	cmp	r4, r2
 8005780:	d002      	beq.n	8005788 <std+0x48>
 8005782:	33d0      	adds	r3, #208	@ 0xd0
 8005784:	429c      	cmp	r4, r3
 8005786:	d105      	bne.n	8005794 <std+0x54>
 8005788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005790:	f000 b992 	b.w	8005ab8 <__retarget_lock_init_recursive>
 8005794:	bd10      	pop	{r4, pc}
 8005796:	bf00      	nop
 8005798:	08005905 	.word	0x08005905
 800579c:	08005927 	.word	0x08005927
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	08005983 	.word	0x08005983
 80057a8:	20000794 	.word	0x20000794

080057ac <stdio_exit_handler>:
 80057ac:	4a02      	ldr	r2, [pc, #8]	@ (80057b8 <stdio_exit_handler+0xc>)
 80057ae:	4903      	ldr	r1, [pc, #12]	@ (80057bc <stdio_exit_handler+0x10>)
 80057b0:	4803      	ldr	r0, [pc, #12]	@ (80057c0 <stdio_exit_handler+0x14>)
 80057b2:	f000 b869 	b.w	8005888 <_fwalk_sglue>
 80057b6:	bf00      	nop
 80057b8:	2000009c 	.word	0x2000009c
 80057bc:	08008395 	.word	0x08008395
 80057c0:	200000ac 	.word	0x200000ac

080057c4 <cleanup_stdio>:
 80057c4:	6841      	ldr	r1, [r0, #4]
 80057c6:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <cleanup_stdio+0x34>)
 80057c8:	b510      	push	{r4, lr}
 80057ca:	4299      	cmp	r1, r3
 80057cc:	4604      	mov	r4, r0
 80057ce:	d001      	beq.n	80057d4 <cleanup_stdio+0x10>
 80057d0:	f002 fde0 	bl	8008394 <_fflush_r>
 80057d4:	68a1      	ldr	r1, [r4, #8]
 80057d6:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <cleanup_stdio+0x38>)
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <cleanup_stdio+0x1e>
 80057dc:	4620      	mov	r0, r4
 80057de:	f002 fdd9 	bl	8008394 <_fflush_r>
 80057e2:	68e1      	ldr	r1, [r4, #12]
 80057e4:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <cleanup_stdio+0x3c>)
 80057e6:	4299      	cmp	r1, r3
 80057e8:	d004      	beq.n	80057f4 <cleanup_stdio+0x30>
 80057ea:	4620      	mov	r0, r4
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f002 bdd0 	b.w	8008394 <_fflush_r>
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	20000794 	.word	0x20000794
 80057fc:	200007fc 	.word	0x200007fc
 8005800:	20000864 	.word	0x20000864

08005804 <global_stdio_init.part.0>:
 8005804:	b510      	push	{r4, lr}
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <global_stdio_init.part.0+0x30>)
 8005808:	4c0b      	ldr	r4, [pc, #44]	@ (8005838 <global_stdio_init.part.0+0x34>)
 800580a:	4a0c      	ldr	r2, [pc, #48]	@ (800583c <global_stdio_init.part.0+0x38>)
 800580c:	4620      	mov	r0, r4
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	2104      	movs	r1, #4
 8005812:	2200      	movs	r2, #0
 8005814:	f7ff ff94 	bl	8005740 <std>
 8005818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800581c:	2201      	movs	r2, #1
 800581e:	2109      	movs	r1, #9
 8005820:	f7ff ff8e 	bl	8005740 <std>
 8005824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005828:	2202      	movs	r2, #2
 800582a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582e:	2112      	movs	r1, #18
 8005830:	f7ff bf86 	b.w	8005740 <std>
 8005834:	200008cc 	.word	0x200008cc
 8005838:	20000794 	.word	0x20000794
 800583c:	080057ad 	.word	0x080057ad

08005840 <__sfp_lock_acquire>:
 8005840:	4801      	ldr	r0, [pc, #4]	@ (8005848 <__sfp_lock_acquire+0x8>)
 8005842:	f000 b93a 	b.w	8005aba <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	200008d5 	.word	0x200008d5

0800584c <__sfp_lock_release>:
 800584c:	4801      	ldr	r0, [pc, #4]	@ (8005854 <__sfp_lock_release+0x8>)
 800584e:	f000 b935 	b.w	8005abc <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	200008d5 	.word	0x200008d5

08005858 <__sinit>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4604      	mov	r4, r0
 800585c:	f7ff fff0 	bl	8005840 <__sfp_lock_acquire>
 8005860:	6a23      	ldr	r3, [r4, #32]
 8005862:	b11b      	cbz	r3, 800586c <__sinit+0x14>
 8005864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005868:	f7ff bff0 	b.w	800584c <__sfp_lock_release>
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <__sinit+0x28>)
 800586e:	6223      	str	r3, [r4, #32]
 8005870:	4b04      	ldr	r3, [pc, #16]	@ (8005884 <__sinit+0x2c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f5      	bne.n	8005864 <__sinit+0xc>
 8005878:	f7ff ffc4 	bl	8005804 <global_stdio_init.part.0>
 800587c:	e7f2      	b.n	8005864 <__sinit+0xc>
 800587e:	bf00      	nop
 8005880:	080057c5 	.word	0x080057c5
 8005884:	200008cc 	.word	0x200008cc

08005888 <_fwalk_sglue>:
 8005888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800588c:	4607      	mov	r7, r0
 800588e:	4688      	mov	r8, r1
 8005890:	4614      	mov	r4, r2
 8005892:	2600      	movs	r6, #0
 8005894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005898:	f1b9 0901 	subs.w	r9, r9, #1
 800589c:	d505      	bpl.n	80058aa <_fwalk_sglue+0x22>
 800589e:	6824      	ldr	r4, [r4, #0]
 80058a0:	2c00      	cmp	r4, #0
 80058a2:	d1f7      	bne.n	8005894 <_fwalk_sglue+0xc>
 80058a4:	4630      	mov	r0, r6
 80058a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d907      	bls.n	80058c0 <_fwalk_sglue+0x38>
 80058b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058b4:	3301      	adds	r3, #1
 80058b6:	d003      	beq.n	80058c0 <_fwalk_sglue+0x38>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	4306      	orrs	r6, r0
 80058c0:	3568      	adds	r5, #104	@ 0x68
 80058c2:	e7e9      	b.n	8005898 <_fwalk_sglue+0x10>

080058c4 <siprintf>:
 80058c4:	b40e      	push	{r1, r2, r3}
 80058c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80058ca:	b500      	push	{lr}
 80058cc:	b09c      	sub	sp, #112	@ 0x70
 80058ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	9006      	str	r0, [sp, #24]
 80058d4:	9107      	str	r1, [sp, #28]
 80058d6:	9104      	str	r1, [sp, #16]
 80058d8:	4808      	ldr	r0, [pc, #32]	@ (80058fc <siprintf+0x38>)
 80058da:	4909      	ldr	r1, [pc, #36]	@ (8005900 <siprintf+0x3c>)
 80058dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e0:	9105      	str	r1, [sp, #20]
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	a902      	add	r1, sp, #8
 80058e6:	9301      	str	r3, [sp, #4]
 80058e8:	f002 fbd8 	bl	800809c <_svfiprintf_r>
 80058ec:	2200      	movs	r2, #0
 80058ee:	9b02      	ldr	r3, [sp, #8]
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	b01c      	add	sp, #112	@ 0x70
 80058f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f8:	b003      	add	sp, #12
 80058fa:	4770      	bx	lr
 80058fc:	200000a8 	.word	0x200000a8
 8005900:	ffff0208 	.word	0xffff0208

08005904 <__sread>:
 8005904:	b510      	push	{r4, lr}
 8005906:	460c      	mov	r4, r1
 8005908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590c:	f000 f886 	bl	8005a1c <_read_r>
 8005910:	2800      	cmp	r0, #0
 8005912:	bfab      	itete	ge
 8005914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005916:	89a3      	ldrhlt	r3, [r4, #12]
 8005918:	181b      	addge	r3, r3, r0
 800591a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800591e:	bfac      	ite	ge
 8005920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005922:	81a3      	strhlt	r3, [r4, #12]
 8005924:	bd10      	pop	{r4, pc}

08005926 <__swrite>:
 8005926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800592a:	461f      	mov	r7, r3
 800592c:	898b      	ldrh	r3, [r1, #12]
 800592e:	4605      	mov	r5, r0
 8005930:	05db      	lsls	r3, r3, #23
 8005932:	460c      	mov	r4, r1
 8005934:	4616      	mov	r6, r2
 8005936:	d505      	bpl.n	8005944 <__swrite+0x1e>
 8005938:	2302      	movs	r3, #2
 800593a:	2200      	movs	r2, #0
 800593c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005940:	f000 f85a 	bl	80059f8 <_lseek_r>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	4632      	mov	r2, r6
 8005948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	4628      	mov	r0, r5
 8005950:	463b      	mov	r3, r7
 8005952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595a:	f000 b871 	b.w	8005a40 <_write_r>

0800595e <__sseek>:
 800595e:	b510      	push	{r4, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005966:	f000 f847 	bl	80059f8 <_lseek_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	bf15      	itete	ne
 8005970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800597a:	81a3      	strheq	r3, [r4, #12]
 800597c:	bf18      	it	ne
 800597e:	81a3      	strhne	r3, [r4, #12]
 8005980:	bd10      	pop	{r4, pc}

08005982 <__sclose>:
 8005982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005986:	f000 b827 	b.w	80059d8 <_close_r>

0800598a <memmove>:
 800598a:	4288      	cmp	r0, r1
 800598c:	b510      	push	{r4, lr}
 800598e:	eb01 0402 	add.w	r4, r1, r2
 8005992:	d902      	bls.n	800599a <memmove+0x10>
 8005994:	4284      	cmp	r4, r0
 8005996:	4623      	mov	r3, r4
 8005998:	d807      	bhi.n	80059aa <memmove+0x20>
 800599a:	1e43      	subs	r3, r0, #1
 800599c:	42a1      	cmp	r1, r4
 800599e:	d008      	beq.n	80059b2 <memmove+0x28>
 80059a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059a8:	e7f8      	b.n	800599c <memmove+0x12>
 80059aa:	4601      	mov	r1, r0
 80059ac:	4402      	add	r2, r0
 80059ae:	428a      	cmp	r2, r1
 80059b0:	d100      	bne.n	80059b4 <memmove+0x2a>
 80059b2:	bd10      	pop	{r4, pc}
 80059b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059bc:	e7f7      	b.n	80059ae <memmove+0x24>

080059be <memset>:
 80059be:	4603      	mov	r3, r0
 80059c0:	4402      	add	r2, r0
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d100      	bne.n	80059c8 <memset+0xa>
 80059c6:	4770      	bx	lr
 80059c8:	f803 1b01 	strb.w	r1, [r3], #1
 80059cc:	e7f9      	b.n	80059c2 <memset+0x4>
	...

080059d0 <_localeconv_r>:
 80059d0:	4800      	ldr	r0, [pc, #0]	@ (80059d4 <_localeconv_r+0x4>)
 80059d2:	4770      	bx	lr
 80059d4:	200001e8 	.word	0x200001e8

080059d8 <_close_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	2300      	movs	r3, #0
 80059dc:	4d05      	ldr	r5, [pc, #20]	@ (80059f4 <_close_r+0x1c>)
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fc fcb1 	bl	800234a <_close>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_close_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_close_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	200008d0 	.word	0x200008d0

080059f8 <_lseek_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4604      	mov	r4, r0
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	2200      	movs	r2, #0
 8005a02:	4d05      	ldr	r5, [pc, #20]	@ (8005a18 <_lseek_r+0x20>)
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fc fcc3 	bl	8002392 <_lseek>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d102      	bne.n	8005a16 <_lseek_r+0x1e>
 8005a10:	682b      	ldr	r3, [r5, #0]
 8005a12:	b103      	cbz	r3, 8005a16 <_lseek_r+0x1e>
 8005a14:	6023      	str	r3, [r4, #0]
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	200008d0 	.word	0x200008d0

08005a1c <_read_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4604      	mov	r4, r0
 8005a20:	4608      	mov	r0, r1
 8005a22:	4611      	mov	r1, r2
 8005a24:	2200      	movs	r2, #0
 8005a26:	4d05      	ldr	r5, [pc, #20]	@ (8005a3c <_read_r+0x20>)
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fc fc54 	bl	80022d8 <_read>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_read_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_read_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	200008d0 	.word	0x200008d0

08005a40 <_write_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4604      	mov	r4, r0
 8005a44:	4608      	mov	r0, r1
 8005a46:	4611      	mov	r1, r2
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4d05      	ldr	r5, [pc, #20]	@ (8005a60 <_write_r+0x20>)
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f7fc fc5f 	bl	8002312 <_write>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_write_r+0x1e>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_write_r+0x1e>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200008d0 	.word	0x200008d0

08005a64 <__errno>:
 8005a64:	4b01      	ldr	r3, [pc, #4]	@ (8005a6c <__errno+0x8>)
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	200000a8 	.word	0x200000a8

08005a70 <__libc_init_array>:
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	2600      	movs	r6, #0
 8005a74:	4d0c      	ldr	r5, [pc, #48]	@ (8005aa8 <__libc_init_array+0x38>)
 8005a76:	4c0d      	ldr	r4, [pc, #52]	@ (8005aac <__libc_init_array+0x3c>)
 8005a78:	1b64      	subs	r4, r4, r5
 8005a7a:	10a4      	asrs	r4, r4, #2
 8005a7c:	42a6      	cmp	r6, r4
 8005a7e:	d109      	bne.n	8005a94 <__libc_init_array+0x24>
 8005a80:	f004 feca 	bl	800a818 <_init>
 8005a84:	2600      	movs	r6, #0
 8005a86:	4d0a      	ldr	r5, [pc, #40]	@ (8005ab0 <__libc_init_array+0x40>)
 8005a88:	4c0a      	ldr	r4, [pc, #40]	@ (8005ab4 <__libc_init_array+0x44>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	42a6      	cmp	r6, r4
 8005a90:	d105      	bne.n	8005a9e <__libc_init_array+0x2e>
 8005a92:	bd70      	pop	{r4, r5, r6, pc}
 8005a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a98:	4798      	blx	r3
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7ee      	b.n	8005a7c <__libc_init_array+0xc>
 8005a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aa2:	4798      	blx	r3
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	e7f2      	b.n	8005a8e <__libc_init_array+0x1e>
 8005aa8:	0800b5f8 	.word	0x0800b5f8
 8005aac:	0800b5f8 	.word	0x0800b5f8
 8005ab0:	0800b5f8 	.word	0x0800b5f8
 8005ab4:	0800b5fc 	.word	0x0800b5fc

08005ab8 <__retarget_lock_init_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_acquire_recursive>:
 8005aba:	4770      	bx	lr

08005abc <__retarget_lock_release_recursive>:
 8005abc:	4770      	bx	lr

08005abe <memchr>:
 8005abe:	4603      	mov	r3, r0
 8005ac0:	b510      	push	{r4, lr}
 8005ac2:	b2c9      	uxtb	r1, r1
 8005ac4:	4402      	add	r2, r0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	d101      	bne.n	8005ad0 <memchr+0x12>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e003      	b.n	8005ad8 <memchr+0x1a>
 8005ad0:	7804      	ldrb	r4, [r0, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	428c      	cmp	r4, r1
 8005ad6:	d1f6      	bne.n	8005ac6 <memchr+0x8>
 8005ad8:	bd10      	pop	{r4, pc}

08005ada <memcpy>:
 8005ada:	440a      	add	r2, r1
 8005adc:	4291      	cmp	r1, r2
 8005ade:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ae2:	d100      	bne.n	8005ae6 <memcpy+0xc>
 8005ae4:	4770      	bx	lr
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aec:	4291      	cmp	r1, r2
 8005aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af2:	d1f9      	bne.n	8005ae8 <memcpy+0xe>
 8005af4:	bd10      	pop	{r4, pc}
	...

08005af8 <nanf>:
 8005af8:	4800      	ldr	r0, [pc, #0]	@ (8005afc <nanf+0x4>)
 8005afa:	4770      	bx	lr
 8005afc:	7fc00000 	.word	0x7fc00000

08005b00 <quorem>:
 8005b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	6903      	ldr	r3, [r0, #16]
 8005b06:	690c      	ldr	r4, [r1, #16]
 8005b08:	4607      	mov	r7, r0
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	db7e      	blt.n	8005c0c <quorem+0x10c>
 8005b0e:	3c01      	subs	r4, #1
 8005b10:	00a3      	lsls	r3, r4, #2
 8005b12:	f100 0514 	add.w	r5, r0, #20
 8005b16:	f101 0814 	add.w	r8, r1, #20
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b36:	d32e      	bcc.n	8005b96 <quorem+0x96>
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	46c4      	mov	ip, r8
 8005b3e:	46ae      	mov	lr, r5
 8005b40:	46d3      	mov	fp, sl
 8005b42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b46:	b298      	uxth	r0, r3
 8005b48:	fb06 a000 	mla	r0, r6, r0, sl
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	0c02      	lsrs	r2, r0, #16
 8005b50:	fb06 2303 	mla	r3, r6, r3, r2
 8005b54:	f8de 2000 	ldr.w	r2, [lr]
 8005b58:	b280      	uxth	r0, r0
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	1a12      	subs	r2, r2, r0
 8005b5e:	445a      	add	r2, fp
 8005b60:	f8de 0000 	ldr.w	r0, [lr]
 8005b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b72:	b292      	uxth	r2, r2
 8005b74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b78:	45e1      	cmp	r9, ip
 8005b7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b7e:	f84e 2b04 	str.w	r2, [lr], #4
 8005b82:	d2de      	bcs.n	8005b42 <quorem+0x42>
 8005b84:	9b00      	ldr	r3, [sp, #0]
 8005b86:	58eb      	ldr	r3, [r5, r3]
 8005b88:	b92b      	cbnz	r3, 8005b96 <quorem+0x96>
 8005b8a:	9b01      	ldr	r3, [sp, #4]
 8005b8c:	3b04      	subs	r3, #4
 8005b8e:	429d      	cmp	r5, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	d32f      	bcc.n	8005bf4 <quorem+0xf4>
 8005b94:	613c      	str	r4, [r7, #16]
 8005b96:	4638      	mov	r0, r7
 8005b98:	f001 f9c2 	bl	8006f20 <__mcmp>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	db25      	blt.n	8005bec <quorem+0xec>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ba8:	f8d1 c000 	ldr.w	ip, [r1]
 8005bac:	fa1f fe82 	uxth.w	lr, r2
 8005bb0:	fa1f f38c 	uxth.w	r3, ip
 8005bb4:	eba3 030e 	sub.w	r3, r3, lr
 8005bb8:	4403      	add	r3, r0
 8005bba:	0c12      	lsrs	r2, r2, #16
 8005bbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bca:	45c1      	cmp	r9, r8
 8005bcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bd0:	f841 3b04 	str.w	r3, [r1], #4
 8005bd4:	d2e6      	bcs.n	8005ba4 <quorem+0xa4>
 8005bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bde:	b922      	cbnz	r2, 8005bea <quorem+0xea>
 8005be0:	3b04      	subs	r3, #4
 8005be2:	429d      	cmp	r5, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	d30b      	bcc.n	8005c00 <quorem+0x100>
 8005be8:	613c      	str	r4, [r7, #16]
 8005bea:	3601      	adds	r6, #1
 8005bec:	4630      	mov	r0, r6
 8005bee:	b003      	add	sp, #12
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	3b04      	subs	r3, #4
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d1cb      	bne.n	8005b94 <quorem+0x94>
 8005bfc:	3c01      	subs	r4, #1
 8005bfe:	e7c6      	b.n	8005b8e <quorem+0x8e>
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	3b04      	subs	r3, #4
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d1ef      	bne.n	8005be8 <quorem+0xe8>
 8005c08:	3c01      	subs	r4, #1
 8005c0a:	e7ea      	b.n	8005be2 <quorem+0xe2>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7ee      	b.n	8005bee <quorem+0xee>

08005c10 <_dtoa_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	69c7      	ldr	r7, [r0, #28]
 8005c1a:	b097      	sub	sp, #92	@ 0x5c
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c24:	b97f      	cbnz	r7, 8005c46 <_dtoa_r+0x36>
 8005c26:	2010      	movs	r0, #16
 8005c28:	f000 fe02 	bl	8006830 <malloc>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c32:	b920      	cbnz	r0, 8005c3e <_dtoa_r+0x2e>
 8005c34:	21ef      	movs	r1, #239	@ 0xef
 8005c36:	4ba8      	ldr	r3, [pc, #672]	@ (8005ed8 <_dtoa_r+0x2c8>)
 8005c38:	48a8      	ldr	r0, [pc, #672]	@ (8005edc <_dtoa_r+0x2cc>)
 8005c3a:	f002 fbfb 	bl	8008434 <__assert_func>
 8005c3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c42:	6007      	str	r7, [r0, #0]
 8005c44:	60c7      	str	r7, [r0, #12]
 8005c46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c4a:	6819      	ldr	r1, [r3, #0]
 8005c4c:	b159      	cbz	r1, 8005c66 <_dtoa_r+0x56>
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	604a      	str	r2, [r1, #4]
 8005c56:	608b      	str	r3, [r1, #8]
 8005c58:	4658      	mov	r0, fp
 8005c5a:	f000 fedf 	bl	8006a1c <_Bfree>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	1e2b      	subs	r3, r5, #0
 8005c68:	bfaf      	iteee	ge
 8005c6a:	2300      	movge	r3, #0
 8005c6c:	2201      	movlt	r2, #1
 8005c6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c72:	9303      	strlt	r3, [sp, #12]
 8005c74:	bfa8      	it	ge
 8005c76:	6033      	strge	r3, [r6, #0]
 8005c78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c7c:	4b98      	ldr	r3, [pc, #608]	@ (8005ee0 <_dtoa_r+0x2d0>)
 8005c7e:	bfb8      	it	lt
 8005c80:	6032      	strlt	r2, [r6, #0]
 8005c82:	ea33 0308 	bics.w	r3, r3, r8
 8005c86:	d112      	bne.n	8005cae <_dtoa_r+0x9e>
 8005c88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c94:	4323      	orrs	r3, r4
 8005c96:	f000 8550 	beq.w	800673a <_dtoa_r+0xb2a>
 8005c9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005ee4 <_dtoa_r+0x2d4>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8552 	beq.w	800674a <_dtoa_r+0xb3a>
 8005ca6:	f10a 0303 	add.w	r3, sl, #3
 8005caa:	f000 bd4c 	b.w	8006746 <_dtoa_r+0xb36>
 8005cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cb2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f7fa fe73 	bl	80009a8 <__aeabi_dcmpeq>
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	b158      	cbz	r0, 8005cde <_dtoa_r+0xce>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cce:	b113      	cbz	r3, 8005cd6 <_dtoa_r+0xc6>
 8005cd0:	4b85      	ldr	r3, [pc, #532]	@ (8005ee8 <_dtoa_r+0x2d8>)
 8005cd2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005eec <_dtoa_r+0x2dc>
 8005cda:	f000 bd36 	b.w	800674a <_dtoa_r+0xb3a>
 8005cde:	ab14      	add	r3, sp, #80	@ 0x50
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	ab15      	add	r3, sp, #84	@ 0x54
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cec:	f001 fa30 	bl	8007150 <__d2b>
 8005cf0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005cf4:	4681      	mov	r9, r0
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d077      	beq.n	8005dea <_dtoa_r+0x1da>
 8005cfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d10:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d12:	4619      	mov	r1, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	4b76      	ldr	r3, [pc, #472]	@ (8005ef0 <_dtoa_r+0x2e0>)
 8005d18:	f7fa fa26 	bl	8000168 <__aeabi_dsub>
 8005d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec0 <_dtoa_r+0x2b0>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fbd9 	bl	80004d8 <__aeabi_dmul>
 8005d26:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec8 <_dtoa_r+0x2b8>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fa1e 	bl	800016c <__adddf3>
 8005d30:	4604      	mov	r4, r0
 8005d32:	4630      	mov	r0, r6
 8005d34:	460d      	mov	r5, r1
 8005d36:	f7fa fb65 	bl	8000404 <__aeabi_i2d>
 8005d3a:	a365      	add	r3, pc, #404	@ (adr r3, 8005ed0 <_dtoa_r+0x2c0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fbca 	bl	80004d8 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fa0e 	bl	800016c <__adddf3>
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa fe70 	bl	8000a38 <__aeabi_d2iz>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7fa fe2b 	bl	80009bc <__aeabi_dcmplt>
 8005d66:	b140      	cbz	r0, 8005d7a <_dtoa_r+0x16a>
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7fa fb4b 	bl	8000404 <__aeabi_i2d>
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f7fa fe19 	bl	80009a8 <__aeabi_dcmpeq>
 8005d76:	b900      	cbnz	r0, 8005d7a <_dtoa_r+0x16a>
 8005d78:	3f01      	subs	r7, #1
 8005d7a:	2f16      	cmp	r7, #22
 8005d7c:	d853      	bhi.n	8005e26 <_dtoa_r+0x216>
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d82:	4b5c      	ldr	r3, [pc, #368]	@ (8005ef4 <_dtoa_r+0x2e4>)
 8005d84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fe16 	bl	80009bc <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d04a      	beq.n	8005e2a <_dtoa_r+0x21a>
 8005d94:	2300      	movs	r3, #0
 8005d96:	3f01      	subs	r7, #1
 8005d98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d9c:	1b9b      	subs	r3, r3, r6
 8005d9e:	1e5a      	subs	r2, r3, #1
 8005da0:	bf46      	itte	mi
 8005da2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005da6:	2300      	movmi	r3, #0
 8005da8:	f04f 0800 	movpl.w	r8, #0
 8005dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dae:	bf48      	it	mi
 8005db0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	db3b      	blt.n	8005e2e <_dtoa_r+0x21e>
 8005db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005dba:	443b      	add	r3, r7
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d866      	bhi.n	8005e96 <_dtoa_r+0x286>
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	bfc4      	itt	gt
 8005dcc:	3b04      	subgt	r3, #4
 8005dce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005dd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dd2:	bfc8      	it	gt
 8005dd4:	2400      	movgt	r4, #0
 8005dd6:	f1a3 0302 	sub.w	r3, r3, #2
 8005dda:	bfd8      	it	le
 8005ddc:	2401      	movle	r4, #1
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d864      	bhi.n	8005eac <_dtoa_r+0x29c>
 8005de2:	e8df f003 	tbb	[pc, r3]
 8005de6:	382b      	.short	0x382b
 8005de8:	5636      	.short	0x5636
 8005dea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005dee:	441e      	add	r6, r3
 8005df0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	bfc1      	itttt	gt
 8005df8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e08:	bfd6      	itet	le
 8005e0a:	f1c3 0320 	rsble	r3, r3, #32
 8005e0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e12:	fa04 f003 	lslle.w	r0, r4, r3
 8005e16:	f7fa fae5 	bl	80003e4 <__aeabi_ui2d>
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e20:	3e01      	subs	r6, #1
 8005e22:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e24:	e775      	b.n	8005d12 <_dtoa_r+0x102>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7b6      	b.n	8005d98 <_dtoa_r+0x188>
 8005e2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e2c:	e7b5      	b.n	8005d9a <_dtoa_r+0x18a>
 8005e2e:	427b      	negs	r3, r7
 8005e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e32:	2300      	movs	r3, #0
 8005e34:	eba8 0807 	sub.w	r8, r8, r7
 8005e38:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e3a:	e7c2      	b.n	8005dc2 <_dtoa_r+0x1b2>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dc35      	bgt.n	8005eb2 <_dtoa_r+0x2a2>
 8005e46:	2301      	movs	r3, #1
 8005e48:	461a      	mov	r2, r3
 8005e4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e50:	e00b      	b.n	8005e6a <_dtoa_r+0x25a>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e7f3      	b.n	8005e3e <_dtoa_r+0x22e>
 8005e56:	2300      	movs	r3, #0
 8005e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	9308      	str	r3, [sp, #32]
 8005e60:	3301      	adds	r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	bfb8      	it	lt
 8005e68:	2301      	movlt	r3, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e72:	f102 0514 	add.w	r5, r2, #20
 8005e76:	429d      	cmp	r5, r3
 8005e78:	d91f      	bls.n	8005eba <_dtoa_r+0x2aa>
 8005e7a:	6041      	str	r1, [r0, #4]
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 fd8d 	bl	800699c <_Balloc>
 8005e82:	4682      	mov	sl, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d139      	bne.n	8005efc <_dtoa_r+0x2ec>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef8 <_dtoa_r+0x2e8>)
 8005e90:	e6d2      	b.n	8005c38 <_dtoa_r+0x28>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7e0      	b.n	8005e58 <_dtoa_r+0x248>
 8005e96:	2401      	movs	r4, #1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ea8:	2312      	movs	r3, #18
 8005eaa:	e7d0      	b.n	8005e4e <_dtoa_r+0x23e>
 8005eac:	2301      	movs	r3, #1
 8005eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb0:	e7f5      	b.n	8005e9e <_dtoa_r+0x28e>
 8005eb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005eb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005eb8:	e7d7      	b.n	8005e6a <_dtoa_r+0x25a>
 8005eba:	3101      	adds	r1, #1
 8005ebc:	0052      	lsls	r2, r2, #1
 8005ebe:	e7d8      	b.n	8005e72 <_dtoa_r+0x262>
 8005ec0:	636f4361 	.word	0x636f4361
 8005ec4:	3fd287a7 	.word	0x3fd287a7
 8005ec8:	8b60c8b3 	.word	0x8b60c8b3
 8005ecc:	3fc68a28 	.word	0x3fc68a28
 8005ed0:	509f79fb 	.word	0x509f79fb
 8005ed4:	3fd34413 	.word	0x3fd34413
 8005ed8:	0800afc0 	.word	0x0800afc0
 8005edc:	0800afd7 	.word	0x0800afd7
 8005ee0:	7ff00000 	.word	0x7ff00000
 8005ee4:	0800afbc 	.word	0x0800afbc
 8005ee8:	0800af8b 	.word	0x0800af8b
 8005eec:	0800af8a 	.word	0x0800af8a
 8005ef0:	3ff80000 	.word	0x3ff80000
 8005ef4:	0800b0d0 	.word	0x0800b0d0
 8005ef8:	0800b02f 	.word	0x0800b02f
 8005efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f00:	6018      	str	r0, [r3, #0]
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	2b0e      	cmp	r3, #14
 8005f06:	f200 80a4 	bhi.w	8006052 <_dtoa_r+0x442>
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	f000 80a1 	beq.w	8006052 <_dtoa_r+0x442>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	dd33      	ble.n	8005f7c <_dtoa_r+0x36c>
 8005f14:	4b86      	ldr	r3, [pc, #536]	@ (8006130 <_dtoa_r+0x520>)
 8005f16:	f007 020f 	and.w	r2, r7, #15
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	05f8      	lsls	r0, r7, #23
 8005f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f2c:	d516      	bpl.n	8005f5c <_dtoa_r+0x34c>
 8005f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f32:	4b80      	ldr	r3, [pc, #512]	@ (8006134 <_dtoa_r+0x524>)
 8005f34:	2603      	movs	r6, #3
 8005f36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f3a:	f7fa fbf7 	bl	800072c <__aeabi_ddiv>
 8005f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f42:	f004 040f 	and.w	r4, r4, #15
 8005f46:	4d7b      	ldr	r5, [pc, #492]	@ (8006134 <_dtoa_r+0x524>)
 8005f48:	b954      	cbnz	r4, 8005f60 <_dtoa_r+0x350>
 8005f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f52:	f7fa fbeb 	bl	800072c <__aeabi_ddiv>
 8005f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5a:	e028      	b.n	8005fae <_dtoa_r+0x39e>
 8005f5c:	2602      	movs	r6, #2
 8005f5e:	e7f2      	b.n	8005f46 <_dtoa_r+0x336>
 8005f60:	07e1      	lsls	r1, r4, #31
 8005f62:	d508      	bpl.n	8005f76 <_dtoa_r+0x366>
 8005f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f6c:	f7fa fab4 	bl	80004d8 <__aeabi_dmul>
 8005f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f74:	3601      	adds	r6, #1
 8005f76:	1064      	asrs	r4, r4, #1
 8005f78:	3508      	adds	r5, #8
 8005f7a:	e7e5      	b.n	8005f48 <_dtoa_r+0x338>
 8005f7c:	f000 80d2 	beq.w	8006124 <_dtoa_r+0x514>
 8005f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f84:	427c      	negs	r4, r7
 8005f86:	4b6a      	ldr	r3, [pc, #424]	@ (8006130 <_dtoa_r+0x520>)
 8005f88:	f004 020f 	and.w	r2, r4, #15
 8005f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa faa0 	bl	80004d8 <__aeabi_dmul>
 8005f98:	2602      	movs	r6, #2
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa0:	4d64      	ldr	r5, [pc, #400]	@ (8006134 <_dtoa_r+0x524>)
 8005fa2:	1124      	asrs	r4, r4, #4
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	f040 80b2 	bne.w	800610e <_dtoa_r+0x4fe>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1d3      	bne.n	8005f56 <_dtoa_r+0x346>
 8005fae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80b7 	beq.w	8006128 <_dtoa_r+0x518>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8006138 <_dtoa_r+0x528>)
 8005fc2:	f7fa fcfb 	bl	80009bc <__aeabi_dcmplt>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f000 80ae 	beq.w	8006128 <_dtoa_r+0x518>
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80aa 	beq.w	8006128 <_dtoa_r+0x518>
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dd37      	ble.n	800604a <_dtoa_r+0x43a>
 8005fda:	1e7b      	subs	r3, r7, #1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4b55      	ldr	r3, [pc, #340]	@ (800613c <_dtoa_r+0x52c>)
 8005fe6:	f7fa fa77 	bl	80004d8 <__aeabi_dmul>
 8005fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fee:	9c08      	ldr	r4, [sp, #32]
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7fa fa06 	bl	8000404 <__aeabi_i2d>
 8005ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ffc:	f7fa fa6c 	bl	80004d8 <__aeabi_dmul>
 8006000:	2200      	movs	r2, #0
 8006002:	4b4f      	ldr	r3, [pc, #316]	@ (8006140 <_dtoa_r+0x530>)
 8006004:	f7fa f8b2 	bl	800016c <__adddf3>
 8006008:	4605      	mov	r5, r0
 800600a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800600e:	2c00      	cmp	r4, #0
 8006010:	f040 809a 	bne.w	8006148 <_dtoa_r+0x538>
 8006014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <_dtoa_r+0x534>)
 800601c:	f7fa f8a4 	bl	8000168 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006028:	462a      	mov	r2, r5
 800602a:	4633      	mov	r3, r6
 800602c:	f7fa fce4 	bl	80009f8 <__aeabi_dcmpgt>
 8006030:	2800      	cmp	r0, #0
 8006032:	f040 828e 	bne.w	8006552 <_dtoa_r+0x942>
 8006036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603a:	462a      	mov	r2, r5
 800603c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006040:	f7fa fcbc 	bl	80009bc <__aeabi_dcmplt>
 8006044:	2800      	cmp	r0, #0
 8006046:	f040 8127 	bne.w	8006298 <_dtoa_r+0x688>
 800604a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800604e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006052:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006054:	2b00      	cmp	r3, #0
 8006056:	f2c0 8163 	blt.w	8006320 <_dtoa_r+0x710>
 800605a:	2f0e      	cmp	r7, #14
 800605c:	f300 8160 	bgt.w	8006320 <_dtoa_r+0x710>
 8006060:	4b33      	ldr	r3, [pc, #204]	@ (8006130 <_dtoa_r+0x520>)
 8006062:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006066:	e9d3 3400 	ldrd	r3, r4, [r3]
 800606a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800606e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006070:	2b00      	cmp	r3, #0
 8006072:	da03      	bge.n	800607c <_dtoa_r+0x46c>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f340 8100 	ble.w	800627c <_dtoa_r+0x66c>
 800607c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006080:	4656      	mov	r6, sl
 8006082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	f7fa fb4f 	bl	800072c <__aeabi_ddiv>
 800608e:	f7fa fcd3 	bl	8000a38 <__aeabi_d2iz>
 8006092:	4680      	mov	r8, r0
 8006094:	f7fa f9b6 	bl	8000404 <__aeabi_i2d>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	f7fa fa1c 	bl	80004d8 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4620      	mov	r0, r4
 80060a6:	4629      	mov	r1, r5
 80060a8:	f7fa f85e 	bl	8000168 <__aeabi_dsub>
 80060ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060b0:	9d07      	ldr	r5, [sp, #28]
 80060b2:	f806 4b01 	strb.w	r4, [r6], #1
 80060b6:	eba6 040a 	sub.w	r4, r6, sl
 80060ba:	42a5      	cmp	r5, r4
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	f040 8116 	bne.w	80062f0 <_dtoa_r+0x6e0>
 80060c4:	f7fa f852 	bl	800016c <__adddf3>
 80060c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060cc:	4604      	mov	r4, r0
 80060ce:	460d      	mov	r5, r1
 80060d0:	f7fa fc92 	bl	80009f8 <__aeabi_dcmpgt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 80f8 	bne.w	80062ca <_dtoa_r+0x6ba>
 80060da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fc61 	bl	80009a8 <__aeabi_dcmpeq>
 80060e6:	b118      	cbz	r0, 80060f0 <_dtoa_r+0x4e0>
 80060e8:	f018 0f01 	tst.w	r8, #1
 80060ec:	f040 80ed 	bne.w	80062ca <_dtoa_r+0x6ba>
 80060f0:	4649      	mov	r1, r9
 80060f2:	4658      	mov	r0, fp
 80060f4:	f000 fc92 	bl	8006a1c <_Bfree>
 80060f8:	2300      	movs	r3, #0
 80060fa:	7033      	strb	r3, [r6, #0]
 80060fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060fe:	3701      	adds	r7, #1
 8006100:	601f      	str	r7, [r3, #0]
 8006102:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8320 	beq.w	800674a <_dtoa_r+0xb3a>
 800610a:	601e      	str	r6, [r3, #0]
 800610c:	e31d      	b.n	800674a <_dtoa_r+0xb3a>
 800610e:	07e2      	lsls	r2, r4, #31
 8006110:	d505      	bpl.n	800611e <_dtoa_r+0x50e>
 8006112:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006116:	f7fa f9df 	bl	80004d8 <__aeabi_dmul>
 800611a:	2301      	movs	r3, #1
 800611c:	3601      	adds	r6, #1
 800611e:	1064      	asrs	r4, r4, #1
 8006120:	3508      	adds	r5, #8
 8006122:	e73f      	b.n	8005fa4 <_dtoa_r+0x394>
 8006124:	2602      	movs	r6, #2
 8006126:	e742      	b.n	8005fae <_dtoa_r+0x39e>
 8006128:	9c07      	ldr	r4, [sp, #28]
 800612a:	9704      	str	r7, [sp, #16]
 800612c:	e761      	b.n	8005ff2 <_dtoa_r+0x3e2>
 800612e:	bf00      	nop
 8006130:	0800b0d0 	.word	0x0800b0d0
 8006134:	0800b0a8 	.word	0x0800b0a8
 8006138:	3ff00000 	.word	0x3ff00000
 800613c:	40240000 	.word	0x40240000
 8006140:	401c0000 	.word	0x401c0000
 8006144:	40140000 	.word	0x40140000
 8006148:	4b70      	ldr	r3, [pc, #448]	@ (800630c <_dtoa_r+0x6fc>)
 800614a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800614c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006154:	4454      	add	r4, sl
 8006156:	2900      	cmp	r1, #0
 8006158:	d045      	beq.n	80061e6 <_dtoa_r+0x5d6>
 800615a:	2000      	movs	r0, #0
 800615c:	496c      	ldr	r1, [pc, #432]	@ (8006310 <_dtoa_r+0x700>)
 800615e:	f7fa fae5 	bl	800072c <__aeabi_ddiv>
 8006162:	4633      	mov	r3, r6
 8006164:	462a      	mov	r2, r5
 8006166:	f7f9 ffff 	bl	8000168 <__aeabi_dsub>
 800616a:	4656      	mov	r6, sl
 800616c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006174:	f7fa fc60 	bl	8000a38 <__aeabi_d2iz>
 8006178:	4605      	mov	r5, r0
 800617a:	f7fa f943 	bl	8000404 <__aeabi_i2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006186:	f7f9 ffef 	bl	8000168 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	3530      	adds	r5, #48	@ 0x30
 8006190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006198:	f806 5b01 	strb.w	r5, [r6], #1
 800619c:	f7fa fc0e 	bl	80009bc <__aeabi_dcmplt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d163      	bne.n	800626c <_dtoa_r+0x65c>
 80061a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a8:	2000      	movs	r0, #0
 80061aa:	495a      	ldr	r1, [pc, #360]	@ (8006314 <_dtoa_r+0x704>)
 80061ac:	f7f9 ffdc 	bl	8000168 <__aeabi_dsub>
 80061b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b4:	f7fa fc02 	bl	80009bc <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 8087 	bne.w	80062cc <_dtoa_r+0x6bc>
 80061be:	42a6      	cmp	r6, r4
 80061c0:	f43f af43 	beq.w	800604a <_dtoa_r+0x43a>
 80061c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b53      	ldr	r3, [pc, #332]	@ (8006318 <_dtoa_r+0x708>)
 80061cc:	f7fa f984 	bl	80004d8 <__aeabi_dmul>
 80061d0:	2200      	movs	r2, #0
 80061d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	4b4f      	ldr	r3, [pc, #316]	@ (8006318 <_dtoa_r+0x708>)
 80061dc:	f7fa f97c 	bl	80004d8 <__aeabi_dmul>
 80061e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e4:	e7c4      	b.n	8006170 <_dtoa_r+0x560>
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	f7fa f975 	bl	80004d8 <__aeabi_dmul>
 80061ee:	4656      	mov	r6, sl
 80061f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	f7fa fc1d 	bl	8000a38 <__aeabi_d2iz>
 80061fe:	4605      	mov	r5, r0
 8006200:	f7fa f900 	bl	8000404 <__aeabi_i2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620c:	f7f9 ffac 	bl	8000168 <__aeabi_dsub>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	3530      	adds	r5, #48	@ 0x30
 8006216:	f806 5b01 	strb.w	r5, [r6], #1
 800621a:	42a6      	cmp	r6, r4
 800621c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	d124      	bne.n	8006270 <_dtoa_r+0x660>
 8006226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800622a:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <_dtoa_r+0x700>)
 800622c:	f7f9 ff9e 	bl	800016c <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006238:	f7fa fbde 	bl	80009f8 <__aeabi_dcmpgt>
 800623c:	2800      	cmp	r0, #0
 800623e:	d145      	bne.n	80062cc <_dtoa_r+0x6bc>
 8006240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006244:	2000      	movs	r0, #0
 8006246:	4932      	ldr	r1, [pc, #200]	@ (8006310 <_dtoa_r+0x700>)
 8006248:	f7f9 ff8e 	bl	8000168 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006254:	f7fa fbb2 	bl	80009bc <__aeabi_dcmplt>
 8006258:	2800      	cmp	r0, #0
 800625a:	f43f aef6 	beq.w	800604a <_dtoa_r+0x43a>
 800625e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006260:	1e73      	subs	r3, r6, #1
 8006262:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006264:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d0f8      	beq.n	800625e <_dtoa_r+0x64e>
 800626c:	9f04      	ldr	r7, [sp, #16]
 800626e:	e73f      	b.n	80060f0 <_dtoa_r+0x4e0>
 8006270:	4b29      	ldr	r3, [pc, #164]	@ (8006318 <_dtoa_r+0x708>)
 8006272:	f7fa f931 	bl	80004d8 <__aeabi_dmul>
 8006276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627a:	e7bc      	b.n	80061f6 <_dtoa_r+0x5e6>
 800627c:	d10c      	bne.n	8006298 <_dtoa_r+0x688>
 800627e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006282:	2200      	movs	r2, #0
 8006284:	4b25      	ldr	r3, [pc, #148]	@ (800631c <_dtoa_r+0x70c>)
 8006286:	f7fa f927 	bl	80004d8 <__aeabi_dmul>
 800628a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800628e:	f7fa fba9 	bl	80009e4 <__aeabi_dcmpge>
 8006292:	2800      	cmp	r0, #0
 8006294:	f000 815b 	beq.w	800654e <_dtoa_r+0x93e>
 8006298:	2400      	movs	r4, #0
 800629a:	4625      	mov	r5, r4
 800629c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800629e:	4656      	mov	r6, sl
 80062a0:	43db      	mvns	r3, r3
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	2700      	movs	r7, #0
 80062a6:	4621      	mov	r1, r4
 80062a8:	4658      	mov	r0, fp
 80062aa:	f000 fbb7 	bl	8006a1c <_Bfree>
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d0dc      	beq.n	800626c <_dtoa_r+0x65c>
 80062b2:	b12f      	cbz	r7, 80062c0 <_dtoa_r+0x6b0>
 80062b4:	42af      	cmp	r7, r5
 80062b6:	d003      	beq.n	80062c0 <_dtoa_r+0x6b0>
 80062b8:	4639      	mov	r1, r7
 80062ba:	4658      	mov	r0, fp
 80062bc:	f000 fbae 	bl	8006a1c <_Bfree>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fbaa 	bl	8006a1c <_Bfree>
 80062c8:	e7d0      	b.n	800626c <_dtoa_r+0x65c>
 80062ca:	9704      	str	r7, [sp, #16]
 80062cc:	4633      	mov	r3, r6
 80062ce:	461e      	mov	r6, r3
 80062d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062d4:	2a39      	cmp	r2, #57	@ 0x39
 80062d6:	d107      	bne.n	80062e8 <_dtoa_r+0x6d8>
 80062d8:	459a      	cmp	sl, r3
 80062da:	d1f8      	bne.n	80062ce <_dtoa_r+0x6be>
 80062dc:	9a04      	ldr	r2, [sp, #16]
 80062de:	3201      	adds	r2, #1
 80062e0:	9204      	str	r2, [sp, #16]
 80062e2:	2230      	movs	r2, #48	@ 0x30
 80062e4:	f88a 2000 	strb.w	r2, [sl]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	3201      	adds	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e7bd      	b.n	800626c <_dtoa_r+0x65c>
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <_dtoa_r+0x708>)
 80062f4:	f7fa f8f0 	bl	80004d8 <__aeabi_dmul>
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	f7fa fb52 	bl	80009a8 <__aeabi_dcmpeq>
 8006304:	2800      	cmp	r0, #0
 8006306:	f43f aebc 	beq.w	8006082 <_dtoa_r+0x472>
 800630a:	e6f1      	b.n	80060f0 <_dtoa_r+0x4e0>
 800630c:	0800b0d0 	.word	0x0800b0d0
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	3ff00000 	.word	0x3ff00000
 8006318:	40240000 	.word	0x40240000
 800631c:	40140000 	.word	0x40140000
 8006320:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006322:	2a00      	cmp	r2, #0
 8006324:	f000 80db 	beq.w	80064de <_dtoa_r+0x8ce>
 8006328:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800632a:	2a01      	cmp	r2, #1
 800632c:	f300 80bf 	bgt.w	80064ae <_dtoa_r+0x89e>
 8006330:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006332:	2a00      	cmp	r2, #0
 8006334:	f000 80b7 	beq.w	80064a6 <_dtoa_r+0x896>
 8006338:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800633c:	4646      	mov	r6, r8
 800633e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006342:	2101      	movs	r1, #1
 8006344:	441a      	add	r2, r3
 8006346:	4658      	mov	r0, fp
 8006348:	4498      	add	r8, r3
 800634a:	9209      	str	r2, [sp, #36]	@ 0x24
 800634c:	f000 fc64 	bl	8006c18 <__i2b>
 8006350:	4605      	mov	r5, r0
 8006352:	b15e      	cbz	r6, 800636c <_dtoa_r+0x75c>
 8006354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd08      	ble.n	800636c <_dtoa_r+0x75c>
 800635a:	42b3      	cmp	r3, r6
 800635c:	bfa8      	it	ge
 800635e:	4633      	movge	r3, r6
 8006360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006362:	eba8 0803 	sub.w	r8, r8, r3
 8006366:	1af6      	subs	r6, r6, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	9309      	str	r3, [sp, #36]	@ 0x24
 800636c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636e:	b1f3      	cbz	r3, 80063ae <_dtoa_r+0x79e>
 8006370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80b7 	beq.w	80064e6 <_dtoa_r+0x8d6>
 8006378:	b18c      	cbz	r4, 800639e <_dtoa_r+0x78e>
 800637a:	4629      	mov	r1, r5
 800637c:	4622      	mov	r2, r4
 800637e:	4658      	mov	r0, fp
 8006380:	f000 fd08 	bl	8006d94 <__pow5mult>
 8006384:	464a      	mov	r2, r9
 8006386:	4601      	mov	r1, r0
 8006388:	4605      	mov	r5, r0
 800638a:	4658      	mov	r0, fp
 800638c:	f000 fc5a 	bl	8006c44 <__multiply>
 8006390:	4649      	mov	r1, r9
 8006392:	9004      	str	r0, [sp, #16]
 8006394:	4658      	mov	r0, fp
 8006396:	f000 fb41 	bl	8006a1c <_Bfree>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	4699      	mov	r9, r3
 800639e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a0:	1b1a      	subs	r2, r3, r4
 80063a2:	d004      	beq.n	80063ae <_dtoa_r+0x79e>
 80063a4:	4649      	mov	r1, r9
 80063a6:	4658      	mov	r0, fp
 80063a8:	f000 fcf4 	bl	8006d94 <__pow5mult>
 80063ac:	4681      	mov	r9, r0
 80063ae:	2101      	movs	r1, #1
 80063b0:	4658      	mov	r0, fp
 80063b2:	f000 fc31 	bl	8006c18 <__i2b>
 80063b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b8:	4604      	mov	r4, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 81c9 	beq.w	8006752 <_dtoa_r+0xb42>
 80063c0:	461a      	mov	r2, r3
 80063c2:	4601      	mov	r1, r0
 80063c4:	4658      	mov	r0, fp
 80063c6:	f000 fce5 	bl	8006d94 <__pow5mult>
 80063ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063cc:	4604      	mov	r4, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	f300 808f 	bgt.w	80064f2 <_dtoa_r+0x8e2>
 80063d4:	9b02      	ldr	r3, [sp, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8087 	bne.w	80064ea <_dtoa_r+0x8da>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8083 	bne.w	80064ee <_dtoa_r+0x8de>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063ee:	0d1b      	lsrs	r3, r3, #20
 80063f0:	051b      	lsls	r3, r3, #20
 80063f2:	b12b      	cbz	r3, 8006400 <_dtoa_r+0x7f0>
 80063f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f6:	f108 0801 	add.w	r8, r8, #1
 80063fa:	3301      	adds	r3, #1
 80063fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fe:	2301      	movs	r3, #1
 8006400:	930a      	str	r3, [sp, #40]	@ 0x28
 8006402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 81aa 	beq.w	800675e <_dtoa_r+0xb4e>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006410:	6918      	ldr	r0, [r3, #16]
 8006412:	f000 fbb5 	bl	8006b80 <__hi0bits>
 8006416:	f1c0 0020 	rsb	r0, r0, #32
 800641a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641c:	4418      	add	r0, r3
 800641e:	f010 001f 	ands.w	r0, r0, #31
 8006422:	d071      	beq.n	8006508 <_dtoa_r+0x8f8>
 8006424:	f1c0 0320 	rsb	r3, r0, #32
 8006428:	2b04      	cmp	r3, #4
 800642a:	dd65      	ble.n	80064f8 <_dtoa_r+0x8e8>
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	f1c0 001c 	rsb	r0, r0, #28
 8006432:	4403      	add	r3, r0
 8006434:	4480      	add	r8, r0
 8006436:	4406      	add	r6, r0
 8006438:	9309      	str	r3, [sp, #36]	@ 0x24
 800643a:	f1b8 0f00 	cmp.w	r8, #0
 800643e:	dd05      	ble.n	800644c <_dtoa_r+0x83c>
 8006440:	4649      	mov	r1, r9
 8006442:	4642      	mov	r2, r8
 8006444:	4658      	mov	r0, fp
 8006446:	f000 fcff 	bl	8006e48 <__lshift>
 800644a:	4681      	mov	r9, r0
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd05      	ble.n	800645e <_dtoa_r+0x84e>
 8006452:	4621      	mov	r1, r4
 8006454:	461a      	mov	r2, r3
 8006456:	4658      	mov	r0, fp
 8006458:	f000 fcf6 	bl	8006e48 <__lshift>
 800645c:	4604      	mov	r4, r0
 800645e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d053      	beq.n	800650c <_dtoa_r+0x8fc>
 8006464:	4621      	mov	r1, r4
 8006466:	4648      	mov	r0, r9
 8006468:	f000 fd5a 	bl	8006f20 <__mcmp>
 800646c:	2800      	cmp	r0, #0
 800646e:	da4d      	bge.n	800650c <_dtoa_r+0x8fc>
 8006470:	1e7b      	subs	r3, r7, #1
 8006472:	4649      	mov	r1, r9
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	220a      	movs	r2, #10
 8006478:	2300      	movs	r3, #0
 800647a:	4658      	mov	r0, fp
 800647c:	f000 faf0 	bl	8006a60 <__multadd>
 8006480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006482:	4681      	mov	r9, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 816c 	beq.w	8006762 <_dtoa_r+0xb52>
 800648a:	2300      	movs	r3, #0
 800648c:	4629      	mov	r1, r5
 800648e:	220a      	movs	r2, #10
 8006490:	4658      	mov	r0, fp
 8006492:	f000 fae5 	bl	8006a60 <__multadd>
 8006496:	9b08      	ldr	r3, [sp, #32]
 8006498:	4605      	mov	r5, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc61      	bgt.n	8006562 <_dtoa_r+0x952>
 800649e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	dc3b      	bgt.n	800651c <_dtoa_r+0x90c>
 80064a4:	e05d      	b.n	8006562 <_dtoa_r+0x952>
 80064a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ac:	e746      	b.n	800633c <_dtoa_r+0x72c>
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	1e5c      	subs	r4, r3, #1
 80064b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	bfbf      	itttt	lt
 80064b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80064bc:	1ae3      	sublt	r3, r4, r3
 80064be:	18d2      	addlt	r2, r2, r3
 80064c0:	bfa8      	it	ge
 80064c2:	1b1c      	subge	r4, r3, r4
 80064c4:	9b07      	ldr	r3, [sp, #28]
 80064c6:	bfbe      	ittt	lt
 80064c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80064cc:	2400      	movlt	r4, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bfb5      	itete	lt
 80064d2:	eba8 0603 	sublt.w	r6, r8, r3
 80064d6:	4646      	movge	r6, r8
 80064d8:	2300      	movlt	r3, #0
 80064da:	9b07      	ldrge	r3, [sp, #28]
 80064dc:	e730      	b.n	8006340 <_dtoa_r+0x730>
 80064de:	4646      	mov	r6, r8
 80064e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064e4:	e735      	b.n	8006352 <_dtoa_r+0x742>
 80064e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e8:	e75c      	b.n	80063a4 <_dtoa_r+0x794>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e788      	b.n	8006400 <_dtoa_r+0x7f0>
 80064ee:	9b02      	ldr	r3, [sp, #8]
 80064f0:	e786      	b.n	8006400 <_dtoa_r+0x7f0>
 80064f2:	2300      	movs	r3, #0
 80064f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f6:	e788      	b.n	800640a <_dtoa_r+0x7fa>
 80064f8:	d09f      	beq.n	800643a <_dtoa_r+0x82a>
 80064fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064fc:	331c      	adds	r3, #28
 80064fe:	441a      	add	r2, r3
 8006500:	4498      	add	r8, r3
 8006502:	441e      	add	r6, r3
 8006504:	9209      	str	r2, [sp, #36]	@ 0x24
 8006506:	e798      	b.n	800643a <_dtoa_r+0x82a>
 8006508:	4603      	mov	r3, r0
 800650a:	e7f6      	b.n	80064fa <_dtoa_r+0x8ea>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	9704      	str	r7, [sp, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc20      	bgt.n	8006556 <_dtoa_r+0x946>
 8006514:	9308      	str	r3, [sp, #32]
 8006516:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006518:	2b02      	cmp	r3, #2
 800651a:	dd1e      	ble.n	800655a <_dtoa_r+0x94a>
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f aebc 	bne.w	800629c <_dtoa_r+0x68c>
 8006524:	4621      	mov	r1, r4
 8006526:	2205      	movs	r2, #5
 8006528:	4658      	mov	r0, fp
 800652a:	f000 fa99 	bl	8006a60 <__multadd>
 800652e:	4601      	mov	r1, r0
 8006530:	4604      	mov	r4, r0
 8006532:	4648      	mov	r0, r9
 8006534:	f000 fcf4 	bl	8006f20 <__mcmp>
 8006538:	2800      	cmp	r0, #0
 800653a:	f77f aeaf 	ble.w	800629c <_dtoa_r+0x68c>
 800653e:	2331      	movs	r3, #49	@ 0x31
 8006540:	4656      	mov	r6, sl
 8006542:	f806 3b01 	strb.w	r3, [r6], #1
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	e6aa      	b.n	80062a4 <_dtoa_r+0x694>
 800654e:	9c07      	ldr	r4, [sp, #28]
 8006550:	9704      	str	r7, [sp, #16]
 8006552:	4625      	mov	r5, r4
 8006554:	e7f3      	b.n	800653e <_dtoa_r+0x92e>
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	9308      	str	r3, [sp, #32]
 800655a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8104 	beq.w	800676a <_dtoa_r+0xb5a>
 8006562:	2e00      	cmp	r6, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x962>
 8006566:	4629      	mov	r1, r5
 8006568:	4632      	mov	r2, r6
 800656a:	4658      	mov	r0, fp
 800656c:	f000 fc6c 	bl	8006e48 <__lshift>
 8006570:	4605      	mov	r5, r0
 8006572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05a      	beq.n	800662e <_dtoa_r+0xa1e>
 8006578:	4658      	mov	r0, fp
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	f000 fa0e 	bl	800699c <_Balloc>
 8006580:	4606      	mov	r6, r0
 8006582:	b928      	cbnz	r0, 8006590 <_dtoa_r+0x980>
 8006584:	4602      	mov	r2, r0
 8006586:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800658a:	4b83      	ldr	r3, [pc, #524]	@ (8006798 <_dtoa_r+0xb88>)
 800658c:	f7ff bb54 	b.w	8005c38 <_dtoa_r+0x28>
 8006590:	692a      	ldr	r2, [r5, #16]
 8006592:	f105 010c 	add.w	r1, r5, #12
 8006596:	3202      	adds	r2, #2
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	300c      	adds	r0, #12
 800659c:	f7ff fa9d 	bl	8005ada <memcpy>
 80065a0:	2201      	movs	r2, #1
 80065a2:	4631      	mov	r1, r6
 80065a4:	4658      	mov	r0, fp
 80065a6:	f000 fc4f 	bl	8006e48 <__lshift>
 80065aa:	462f      	mov	r7, r5
 80065ac:	4605      	mov	r5, r0
 80065ae:	f10a 0301 	add.w	r3, sl, #1
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	9b08      	ldr	r3, [sp, #32]
 80065b6:	4453      	add	r3, sl
 80065b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	4621      	mov	r1, r4
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4648      	mov	r0, r9
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	f7ff fa98 	bl	8005b00 <quorem>
 80065d0:	4639      	mov	r1, r7
 80065d2:	9008      	str	r0, [sp, #32]
 80065d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065d8:	4648      	mov	r0, r9
 80065da:	f000 fca1 	bl	8006f20 <__mcmp>
 80065de:	462a      	mov	r2, r5
 80065e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80065e2:	4621      	mov	r1, r4
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fcb7 	bl	8006f58 <__mdiff>
 80065ea:	68c2      	ldr	r2, [r0, #12]
 80065ec:	4606      	mov	r6, r0
 80065ee:	bb02      	cbnz	r2, 8006632 <_dtoa_r+0xa22>
 80065f0:	4601      	mov	r1, r0
 80065f2:	4648      	mov	r0, r9
 80065f4:	f000 fc94 	bl	8006f20 <__mcmp>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4631      	mov	r1, r6
 80065fc:	4658      	mov	r0, fp
 80065fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006600:	f000 fa0c 	bl	8006a1c <_Bfree>
 8006604:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006608:	9e07      	ldr	r6, [sp, #28]
 800660a:	ea43 0102 	orr.w	r1, r3, r2
 800660e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006610:	4319      	orrs	r1, r3
 8006612:	d110      	bne.n	8006636 <_dtoa_r+0xa26>
 8006614:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006618:	d029      	beq.n	800666e <_dtoa_r+0xa5e>
 800661a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd02      	ble.n	8006626 <_dtoa_r+0xa16>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006626:	9b02      	ldr	r3, [sp, #8]
 8006628:	f883 8000 	strb.w	r8, [r3]
 800662c:	e63b      	b.n	80062a6 <_dtoa_r+0x696>
 800662e:	4628      	mov	r0, r5
 8006630:	e7bb      	b.n	80065aa <_dtoa_r+0x99a>
 8006632:	2201      	movs	r2, #1
 8006634:	e7e1      	b.n	80065fa <_dtoa_r+0x9ea>
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	db04      	blt.n	8006646 <_dtoa_r+0xa36>
 800663c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800663e:	430b      	orrs	r3, r1
 8006640:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006642:	430b      	orrs	r3, r1
 8006644:	d120      	bne.n	8006688 <_dtoa_r+0xa78>
 8006646:	2a00      	cmp	r2, #0
 8006648:	dded      	ble.n	8006626 <_dtoa_r+0xa16>
 800664a:	4649      	mov	r1, r9
 800664c:	2201      	movs	r2, #1
 800664e:	4658      	mov	r0, fp
 8006650:	f000 fbfa 	bl	8006e48 <__lshift>
 8006654:	4621      	mov	r1, r4
 8006656:	4681      	mov	r9, r0
 8006658:	f000 fc62 	bl	8006f20 <__mcmp>
 800665c:	2800      	cmp	r0, #0
 800665e:	dc03      	bgt.n	8006668 <_dtoa_r+0xa58>
 8006660:	d1e1      	bne.n	8006626 <_dtoa_r+0xa16>
 8006662:	f018 0f01 	tst.w	r8, #1
 8006666:	d0de      	beq.n	8006626 <_dtoa_r+0xa16>
 8006668:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800666c:	d1d8      	bne.n	8006620 <_dtoa_r+0xa10>
 800666e:	2339      	movs	r3, #57	@ 0x39
 8006670:	9a02      	ldr	r2, [sp, #8]
 8006672:	7013      	strb	r3, [r2, #0]
 8006674:	4633      	mov	r3, r6
 8006676:	461e      	mov	r6, r3
 8006678:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800667c:	3b01      	subs	r3, #1
 800667e:	2a39      	cmp	r2, #57	@ 0x39
 8006680:	d052      	beq.n	8006728 <_dtoa_r+0xb18>
 8006682:	3201      	adds	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e60e      	b.n	80062a6 <_dtoa_r+0x696>
 8006688:	2a00      	cmp	r2, #0
 800668a:	dd07      	ble.n	800669c <_dtoa_r+0xa8c>
 800668c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006690:	d0ed      	beq.n	800666e <_dtoa_r+0xa5e>
 8006692:	9a02      	ldr	r2, [sp, #8]
 8006694:	f108 0301 	add.w	r3, r8, #1
 8006698:	7013      	strb	r3, [r2, #0]
 800669a:	e604      	b.n	80062a6 <_dtoa_r+0x696>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d028      	beq.n	80066fc <_dtoa_r+0xaec>
 80066aa:	4649      	mov	r1, r9
 80066ac:	2300      	movs	r3, #0
 80066ae:	220a      	movs	r2, #10
 80066b0:	4658      	mov	r0, fp
 80066b2:	f000 f9d5 	bl	8006a60 <__multadd>
 80066b6:	42af      	cmp	r7, r5
 80066b8:	4681      	mov	r9, r0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	f04f 020a 	mov.w	r2, #10
 80066c2:	4639      	mov	r1, r7
 80066c4:	4658      	mov	r0, fp
 80066c6:	d107      	bne.n	80066d8 <_dtoa_r+0xac8>
 80066c8:	f000 f9ca 	bl	8006a60 <__multadd>
 80066cc:	4607      	mov	r7, r0
 80066ce:	4605      	mov	r5, r0
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	9307      	str	r3, [sp, #28]
 80066d6:	e774      	b.n	80065c2 <_dtoa_r+0x9b2>
 80066d8:	f000 f9c2 	bl	8006a60 <__multadd>
 80066dc:	4629      	mov	r1, r5
 80066de:	4607      	mov	r7, r0
 80066e0:	2300      	movs	r3, #0
 80066e2:	220a      	movs	r2, #10
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 f9bb 	bl	8006a60 <__multadd>
 80066ea:	4605      	mov	r5, r0
 80066ec:	e7f0      	b.n	80066d0 <_dtoa_r+0xac0>
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	2700      	movs	r7, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfcc      	ite	gt
 80066f6:	461e      	movgt	r6, r3
 80066f8:	2601      	movle	r6, #1
 80066fa:	4456      	add	r6, sl
 80066fc:	4649      	mov	r1, r9
 80066fe:	2201      	movs	r2, #1
 8006700:	4658      	mov	r0, fp
 8006702:	f000 fba1 	bl	8006e48 <__lshift>
 8006706:	4621      	mov	r1, r4
 8006708:	4681      	mov	r9, r0
 800670a:	f000 fc09 	bl	8006f20 <__mcmp>
 800670e:	2800      	cmp	r0, #0
 8006710:	dcb0      	bgt.n	8006674 <_dtoa_r+0xa64>
 8006712:	d102      	bne.n	800671a <_dtoa_r+0xb0a>
 8006714:	f018 0f01 	tst.w	r8, #1
 8006718:	d1ac      	bne.n	8006674 <_dtoa_r+0xa64>
 800671a:	4633      	mov	r3, r6
 800671c:	461e      	mov	r6, r3
 800671e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006722:	2a30      	cmp	r2, #48	@ 0x30
 8006724:	d0fa      	beq.n	800671c <_dtoa_r+0xb0c>
 8006726:	e5be      	b.n	80062a6 <_dtoa_r+0x696>
 8006728:	459a      	cmp	sl, r3
 800672a:	d1a4      	bne.n	8006676 <_dtoa_r+0xa66>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	2331      	movs	r3, #49	@ 0x31
 8006734:	f88a 3000 	strb.w	r3, [sl]
 8006738:	e5b5      	b.n	80062a6 <_dtoa_r+0x696>
 800673a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800673c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800679c <_dtoa_r+0xb8c>
 8006740:	b11b      	cbz	r3, 800674a <_dtoa_r+0xb3a>
 8006742:	f10a 0308 	add.w	r3, sl, #8
 8006746:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4650      	mov	r0, sl
 800674c:	b017      	add	sp, #92	@ 0x5c
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006754:	2b01      	cmp	r3, #1
 8006756:	f77f ae3d 	ble.w	80063d4 <_dtoa_r+0x7c4>
 800675a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675c:	930a      	str	r3, [sp, #40]	@ 0x28
 800675e:	2001      	movs	r0, #1
 8006760:	e65b      	b.n	800641a <_dtoa_r+0x80a>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f77f aed6 	ble.w	8006516 <_dtoa_r+0x906>
 800676a:	4656      	mov	r6, sl
 800676c:	4621      	mov	r1, r4
 800676e:	4648      	mov	r0, r9
 8006770:	f7ff f9c6 	bl	8005b00 <quorem>
 8006774:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	f806 8b01 	strb.w	r8, [r6], #1
 800677e:	eba6 020a 	sub.w	r2, r6, sl
 8006782:	4293      	cmp	r3, r2
 8006784:	ddb3      	ble.n	80066ee <_dtoa_r+0xade>
 8006786:	4649      	mov	r1, r9
 8006788:	2300      	movs	r3, #0
 800678a:	220a      	movs	r2, #10
 800678c:	4658      	mov	r0, fp
 800678e:	f000 f967 	bl	8006a60 <__multadd>
 8006792:	4681      	mov	r9, r0
 8006794:	e7ea      	b.n	800676c <_dtoa_r+0xb5c>
 8006796:	bf00      	nop
 8006798:	0800b02f 	.word	0x0800b02f
 800679c:	0800afb3 	.word	0x0800afb3

080067a0 <_free_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4605      	mov	r5, r0
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d040      	beq.n	800682a <_free_r+0x8a>
 80067a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ac:	1f0c      	subs	r4, r1, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	18e4      	addlt	r4, r4, r3
 80067b4:	f000 f8e6 	bl	8006984 <__malloc_lock>
 80067b8:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <_free_r+0x8c>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	b933      	cbnz	r3, 80067cc <_free_r+0x2c>
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	6014      	str	r4, [r2, #0]
 80067c2:	4628      	mov	r0, r5
 80067c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c8:	f000 b8e2 	b.w	8006990 <__malloc_unlock>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf01      	itttt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	1809      	addeq	r1, r1, r0
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	e7ed      	b.n	80067be <_free_r+0x1e>
 80067e2:	461a      	mov	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b10b      	cbz	r3, 80067ec <_free_r+0x4c>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d9fa      	bls.n	80067e2 <_free_r+0x42>
 80067ec:	6811      	ldr	r1, [r2, #0]
 80067ee:	1850      	adds	r0, r2, r1
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d10b      	bne.n	800680c <_free_r+0x6c>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	4401      	add	r1, r0
 80067f8:	1850      	adds	r0, r2, r1
 80067fa:	4283      	cmp	r3, r0
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	d1e0      	bne.n	80067c2 <_free_r+0x22>
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4408      	add	r0, r1
 8006806:	6010      	str	r0, [r2, #0]
 8006808:	6053      	str	r3, [r2, #4]
 800680a:	e7da      	b.n	80067c2 <_free_r+0x22>
 800680c:	d902      	bls.n	8006814 <_free_r+0x74>
 800680e:	230c      	movs	r3, #12
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	e7d6      	b.n	80067c2 <_free_r+0x22>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	1821      	adds	r1, r4, r0
 8006818:	428b      	cmp	r3, r1
 800681a:	bf01      	itttt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	1809      	addeq	r1, r1, r0
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6054      	str	r4, [r2, #4]
 8006828:	e7cb      	b.n	80067c2 <_free_r+0x22>
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200008dc 	.word	0x200008dc

08006830 <malloc>:
 8006830:	4b02      	ldr	r3, [pc, #8]	@ (800683c <malloc+0xc>)
 8006832:	4601      	mov	r1, r0
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	f000 b825 	b.w	8006884 <_malloc_r>
 800683a:	bf00      	nop
 800683c:	200000a8 	.word	0x200000a8

08006840 <sbrk_aligned>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4e0f      	ldr	r6, [pc, #60]	@ (8006880 <sbrk_aligned+0x40>)
 8006844:	460c      	mov	r4, r1
 8006846:	6831      	ldr	r1, [r6, #0]
 8006848:	4605      	mov	r5, r0
 800684a:	b911      	cbnz	r1, 8006852 <sbrk_aligned+0x12>
 800684c:	f001 fddc 	bl	8008408 <_sbrk_r>
 8006850:	6030      	str	r0, [r6, #0]
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	f001 fdd7 	bl	8008408 <_sbrk_r>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d103      	bne.n	8006866 <sbrk_aligned+0x26>
 800685e:	f04f 34ff 	mov.w	r4, #4294967295
 8006862:	4620      	mov	r0, r4
 8006864:	bd70      	pop	{r4, r5, r6, pc}
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d0f8      	beq.n	8006862 <sbrk_aligned+0x22>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f001 fdc8 	bl	8008408 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d1f2      	bne.n	8006862 <sbrk_aligned+0x22>
 800687c:	e7ef      	b.n	800685e <sbrk_aligned+0x1e>
 800687e:	bf00      	nop
 8006880:	200008d8 	.word	0x200008d8

08006884 <_malloc_r>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	1ccd      	adds	r5, r1, #3
 800688a:	f025 0503 	bic.w	r5, r5, #3
 800688e:	3508      	adds	r5, #8
 8006890:	2d0c      	cmp	r5, #12
 8006892:	bf38      	it	cc
 8006894:	250c      	movcc	r5, #12
 8006896:	2d00      	cmp	r5, #0
 8006898:	4606      	mov	r6, r0
 800689a:	db01      	blt.n	80068a0 <_malloc_r+0x1c>
 800689c:	42a9      	cmp	r1, r5
 800689e:	d904      	bls.n	80068aa <_malloc_r+0x26>
 80068a0:	230c      	movs	r3, #12
 80068a2:	6033      	str	r3, [r6, #0]
 80068a4:	2000      	movs	r0, #0
 80068a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006980 <_malloc_r+0xfc>
 80068ae:	f000 f869 	bl	8006984 <__malloc_lock>
 80068b2:	f8d8 3000 	ldr.w	r3, [r8]
 80068b6:	461c      	mov	r4, r3
 80068b8:	bb44      	cbnz	r4, 800690c <_malloc_r+0x88>
 80068ba:	4629      	mov	r1, r5
 80068bc:	4630      	mov	r0, r6
 80068be:	f7ff ffbf 	bl	8006840 <sbrk_aligned>
 80068c2:	1c43      	adds	r3, r0, #1
 80068c4:	4604      	mov	r4, r0
 80068c6:	d158      	bne.n	800697a <_malloc_r+0xf6>
 80068c8:	f8d8 4000 	ldr.w	r4, [r8]
 80068cc:	4627      	mov	r7, r4
 80068ce:	2f00      	cmp	r7, #0
 80068d0:	d143      	bne.n	800695a <_malloc_r+0xd6>
 80068d2:	2c00      	cmp	r4, #0
 80068d4:	d04b      	beq.n	800696e <_malloc_r+0xea>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	eb04 0903 	add.w	r9, r4, r3
 80068e0:	f001 fd92 	bl	8008408 <_sbrk_r>
 80068e4:	4581      	cmp	r9, r0
 80068e6:	d142      	bne.n	800696e <_malloc_r+0xea>
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	4630      	mov	r0, r6
 80068ec:	1a6d      	subs	r5, r5, r1
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7ff ffa6 	bl	8006840 <sbrk_aligned>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d03a      	beq.n	800696e <_malloc_r+0xea>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	442b      	add	r3, r5
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	bb62      	cbnz	r2, 8006960 <_malloc_r+0xdc>
 8006906:	f8c8 7000 	str.w	r7, [r8]
 800690a:	e00f      	b.n	800692c <_malloc_r+0xa8>
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	1b52      	subs	r2, r2, r5
 8006910:	d420      	bmi.n	8006954 <_malloc_r+0xd0>
 8006912:	2a0b      	cmp	r2, #11
 8006914:	d917      	bls.n	8006946 <_malloc_r+0xc2>
 8006916:	1961      	adds	r1, r4, r5
 8006918:	42a3      	cmp	r3, r4
 800691a:	6025      	str	r5, [r4, #0]
 800691c:	bf18      	it	ne
 800691e:	6059      	strne	r1, [r3, #4]
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	bf08      	it	eq
 8006924:	f8c8 1000 	streq.w	r1, [r8]
 8006928:	5162      	str	r2, [r4, r5]
 800692a:	604b      	str	r3, [r1, #4]
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f82f 	bl	8006990 <__malloc_unlock>
 8006932:	f104 000b 	add.w	r0, r4, #11
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	f020 0007 	bic.w	r0, r0, #7
 800693c:	1ac2      	subs	r2, r0, r3
 800693e:	bf1c      	itt	ne
 8006940:	1a1b      	subne	r3, r3, r0
 8006942:	50a3      	strne	r3, [r4, r2]
 8006944:	e7af      	b.n	80068a6 <_malloc_r+0x22>
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	42a3      	cmp	r3, r4
 800694a:	bf0c      	ite	eq
 800694c:	f8c8 2000 	streq.w	r2, [r8]
 8006950:	605a      	strne	r2, [r3, #4]
 8006952:	e7eb      	b.n	800692c <_malloc_r+0xa8>
 8006954:	4623      	mov	r3, r4
 8006956:	6864      	ldr	r4, [r4, #4]
 8006958:	e7ae      	b.n	80068b8 <_malloc_r+0x34>
 800695a:	463c      	mov	r4, r7
 800695c:	687f      	ldr	r7, [r7, #4]
 800695e:	e7b6      	b.n	80068ce <_malloc_r+0x4a>
 8006960:	461a      	mov	r2, r3
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	d1fb      	bne.n	8006960 <_malloc_r+0xdc>
 8006968:	2300      	movs	r3, #0
 800696a:	6053      	str	r3, [r2, #4]
 800696c:	e7de      	b.n	800692c <_malloc_r+0xa8>
 800696e:	230c      	movs	r3, #12
 8006970:	4630      	mov	r0, r6
 8006972:	6033      	str	r3, [r6, #0]
 8006974:	f000 f80c 	bl	8006990 <__malloc_unlock>
 8006978:	e794      	b.n	80068a4 <_malloc_r+0x20>
 800697a:	6005      	str	r5, [r0, #0]
 800697c:	e7d6      	b.n	800692c <_malloc_r+0xa8>
 800697e:	bf00      	nop
 8006980:	200008dc 	.word	0x200008dc

08006984 <__malloc_lock>:
 8006984:	4801      	ldr	r0, [pc, #4]	@ (800698c <__malloc_lock+0x8>)
 8006986:	f7ff b898 	b.w	8005aba <__retarget_lock_acquire_recursive>
 800698a:	bf00      	nop
 800698c:	200008d4 	.word	0x200008d4

08006990 <__malloc_unlock>:
 8006990:	4801      	ldr	r0, [pc, #4]	@ (8006998 <__malloc_unlock+0x8>)
 8006992:	f7ff b893 	b.w	8005abc <__retarget_lock_release_recursive>
 8006996:	bf00      	nop
 8006998:	200008d4 	.word	0x200008d4

0800699c <_Balloc>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	69c6      	ldr	r6, [r0, #28]
 80069a0:	4604      	mov	r4, r0
 80069a2:	460d      	mov	r5, r1
 80069a4:	b976      	cbnz	r6, 80069c4 <_Balloc+0x28>
 80069a6:	2010      	movs	r0, #16
 80069a8:	f7ff ff42 	bl	8006830 <malloc>
 80069ac:	4602      	mov	r2, r0
 80069ae:	61e0      	str	r0, [r4, #28]
 80069b0:	b920      	cbnz	r0, 80069bc <_Balloc+0x20>
 80069b2:	216b      	movs	r1, #107	@ 0x6b
 80069b4:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <_Balloc+0x78>)
 80069b6:	4818      	ldr	r0, [pc, #96]	@ (8006a18 <_Balloc+0x7c>)
 80069b8:	f001 fd3c 	bl	8008434 <__assert_func>
 80069bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069c0:	6006      	str	r6, [r0, #0]
 80069c2:	60c6      	str	r6, [r0, #12]
 80069c4:	69e6      	ldr	r6, [r4, #28]
 80069c6:	68f3      	ldr	r3, [r6, #12]
 80069c8:	b183      	cbz	r3, 80069ec <_Balloc+0x50>
 80069ca:	69e3      	ldr	r3, [r4, #28]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069d2:	b9b8      	cbnz	r0, 8006a04 <_Balloc+0x68>
 80069d4:	2101      	movs	r1, #1
 80069d6:	fa01 f605 	lsl.w	r6, r1, r5
 80069da:	1d72      	adds	r2, r6, #5
 80069dc:	4620      	mov	r0, r4
 80069de:	0092      	lsls	r2, r2, #2
 80069e0:	f001 fd46 	bl	8008470 <_calloc_r>
 80069e4:	b160      	cbz	r0, 8006a00 <_Balloc+0x64>
 80069e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069ea:	e00e      	b.n	8006a0a <_Balloc+0x6e>
 80069ec:	2221      	movs	r2, #33	@ 0x21
 80069ee:	2104      	movs	r1, #4
 80069f0:	4620      	mov	r0, r4
 80069f2:	f001 fd3d 	bl	8008470 <_calloc_r>
 80069f6:	69e3      	ldr	r3, [r4, #28]
 80069f8:	60f0      	str	r0, [r6, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e4      	bne.n	80069ca <_Balloc+0x2e>
 8006a00:	2000      	movs	r0, #0
 8006a02:	bd70      	pop	{r4, r5, r6, pc}
 8006a04:	6802      	ldr	r2, [r0, #0]
 8006a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a10:	e7f7      	b.n	8006a02 <_Balloc+0x66>
 8006a12:	bf00      	nop
 8006a14:	0800afc0 	.word	0x0800afc0
 8006a18:	0800b040 	.word	0x0800b040

08006a1c <_Bfree>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	69c6      	ldr	r6, [r0, #28]
 8006a20:	4605      	mov	r5, r0
 8006a22:	460c      	mov	r4, r1
 8006a24:	b976      	cbnz	r6, 8006a44 <_Bfree+0x28>
 8006a26:	2010      	movs	r0, #16
 8006a28:	f7ff ff02 	bl	8006830 <malloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	61e8      	str	r0, [r5, #28]
 8006a30:	b920      	cbnz	r0, 8006a3c <_Bfree+0x20>
 8006a32:	218f      	movs	r1, #143	@ 0x8f
 8006a34:	4b08      	ldr	r3, [pc, #32]	@ (8006a58 <_Bfree+0x3c>)
 8006a36:	4809      	ldr	r0, [pc, #36]	@ (8006a5c <_Bfree+0x40>)
 8006a38:	f001 fcfc 	bl	8008434 <__assert_func>
 8006a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a40:	6006      	str	r6, [r0, #0]
 8006a42:	60c6      	str	r6, [r0, #12]
 8006a44:	b13c      	cbz	r4, 8006a56 <_Bfree+0x3a>
 8006a46:	69eb      	ldr	r3, [r5, #28]
 8006a48:	6862      	ldr	r2, [r4, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a50:	6021      	str	r1, [r4, #0]
 8006a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	0800afc0 	.word	0x0800afc0
 8006a5c:	0800b040 	.word	0x0800b040

08006a60 <__multadd>:
 8006a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	4607      	mov	r7, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	461e      	mov	r6, r3
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	690d      	ldr	r5, [r1, #16]
 8006a6e:	f101 0c14 	add.w	ip, r1, #20
 8006a72:	f8dc 3000 	ldr.w	r3, [ip]
 8006a76:	3001      	adds	r0, #1
 8006a78:	b299      	uxth	r1, r3
 8006a7a:	fb02 6101 	mla	r1, r2, r1, r6
 8006a7e:	0c1e      	lsrs	r6, r3, #16
 8006a80:	0c0b      	lsrs	r3, r1, #16
 8006a82:	fb02 3306 	mla	r3, r2, r6, r3
 8006a86:	b289      	uxth	r1, r1
 8006a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a8c:	4285      	cmp	r5, r0
 8006a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a92:	f84c 1b04 	str.w	r1, [ip], #4
 8006a96:	dcec      	bgt.n	8006a72 <__multadd+0x12>
 8006a98:	b30e      	cbz	r6, 8006ade <__multadd+0x7e>
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	dc19      	bgt.n	8006ad4 <__multadd+0x74>
 8006aa0:	6861      	ldr	r1, [r4, #4]
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	3101      	adds	r1, #1
 8006aa6:	f7ff ff79 	bl	800699c <_Balloc>
 8006aaa:	4680      	mov	r8, r0
 8006aac:	b928      	cbnz	r0, 8006aba <__multadd+0x5a>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	21ba      	movs	r1, #186	@ 0xba
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <__multadd+0x84>)
 8006ab4:	480c      	ldr	r0, [pc, #48]	@ (8006ae8 <__multadd+0x88>)
 8006ab6:	f001 fcbd 	bl	8008434 <__assert_func>
 8006aba:	6922      	ldr	r2, [r4, #16]
 8006abc:	f104 010c 	add.w	r1, r4, #12
 8006ac0:	3202      	adds	r2, #2
 8006ac2:	0092      	lsls	r2, r2, #2
 8006ac4:	300c      	adds	r0, #12
 8006ac6:	f7ff f808 	bl	8005ada <memcpy>
 8006aca:	4621      	mov	r1, r4
 8006acc:	4638      	mov	r0, r7
 8006ace:	f7ff ffa5 	bl	8006a1c <_Bfree>
 8006ad2:	4644      	mov	r4, r8
 8006ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ad8:	3501      	adds	r5, #1
 8006ada:	615e      	str	r6, [r3, #20]
 8006adc:	6125      	str	r5, [r4, #16]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae4:	0800b02f 	.word	0x0800b02f
 8006ae8:	0800b040 	.word	0x0800b040

08006aec <__s2b>:
 8006aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af0:	4615      	mov	r5, r2
 8006af2:	2209      	movs	r2, #9
 8006af4:	461f      	mov	r7, r3
 8006af6:	3308      	adds	r3, #8
 8006af8:	460c      	mov	r4, r1
 8006afa:	fb93 f3f2 	sdiv	r3, r3, r2
 8006afe:	4606      	mov	r6, r0
 8006b00:	2201      	movs	r2, #1
 8006b02:	2100      	movs	r1, #0
 8006b04:	429a      	cmp	r2, r3
 8006b06:	db09      	blt.n	8006b1c <__s2b+0x30>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff ff47 	bl	800699c <_Balloc>
 8006b0e:	b940      	cbnz	r0, 8006b22 <__s2b+0x36>
 8006b10:	4602      	mov	r2, r0
 8006b12:	21d3      	movs	r1, #211	@ 0xd3
 8006b14:	4b18      	ldr	r3, [pc, #96]	@ (8006b78 <__s2b+0x8c>)
 8006b16:	4819      	ldr	r0, [pc, #100]	@ (8006b7c <__s2b+0x90>)
 8006b18:	f001 fc8c 	bl	8008434 <__assert_func>
 8006b1c:	0052      	lsls	r2, r2, #1
 8006b1e:	3101      	adds	r1, #1
 8006b20:	e7f0      	b.n	8006b04 <__s2b+0x18>
 8006b22:	9b08      	ldr	r3, [sp, #32]
 8006b24:	2d09      	cmp	r5, #9
 8006b26:	6143      	str	r3, [r0, #20]
 8006b28:	f04f 0301 	mov.w	r3, #1
 8006b2c:	6103      	str	r3, [r0, #16]
 8006b2e:	dd16      	ble.n	8006b5e <__s2b+0x72>
 8006b30:	f104 0909 	add.w	r9, r4, #9
 8006b34:	46c8      	mov	r8, r9
 8006b36:	442c      	add	r4, r5
 8006b38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	220a      	movs	r2, #10
 8006b40:	4630      	mov	r0, r6
 8006b42:	3b30      	subs	r3, #48	@ 0x30
 8006b44:	f7ff ff8c 	bl	8006a60 <__multadd>
 8006b48:	45a0      	cmp	r8, r4
 8006b4a:	d1f5      	bne.n	8006b38 <__s2b+0x4c>
 8006b4c:	f1a5 0408 	sub.w	r4, r5, #8
 8006b50:	444c      	add	r4, r9
 8006b52:	1b2d      	subs	r5, r5, r4
 8006b54:	1963      	adds	r3, r4, r5
 8006b56:	42bb      	cmp	r3, r7
 8006b58:	db04      	blt.n	8006b64 <__s2b+0x78>
 8006b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5e:	2509      	movs	r5, #9
 8006b60:	340a      	adds	r4, #10
 8006b62:	e7f6      	b.n	8006b52 <__s2b+0x66>
 8006b64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b68:	4601      	mov	r1, r0
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	3b30      	subs	r3, #48	@ 0x30
 8006b70:	f7ff ff76 	bl	8006a60 <__multadd>
 8006b74:	e7ee      	b.n	8006b54 <__s2b+0x68>
 8006b76:	bf00      	nop
 8006b78:	0800b02f 	.word	0x0800b02f
 8006b7c:	0800b040 	.word	0x0800b040

08006b80 <__hi0bits>:
 8006b80:	4603      	mov	r3, r0
 8006b82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b86:	bf3a      	itte	cc
 8006b88:	0403      	lslcc	r3, r0, #16
 8006b8a:	2010      	movcc	r0, #16
 8006b8c:	2000      	movcs	r0, #0
 8006b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b92:	bf3c      	itt	cc
 8006b94:	021b      	lslcc	r3, r3, #8
 8006b96:	3008      	addcc	r0, #8
 8006b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b9c:	bf3c      	itt	cc
 8006b9e:	011b      	lslcc	r3, r3, #4
 8006ba0:	3004      	addcc	r0, #4
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba6:	bf3c      	itt	cc
 8006ba8:	009b      	lslcc	r3, r3, #2
 8006baa:	3002      	addcc	r0, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	db05      	blt.n	8006bbc <__hi0bits+0x3c>
 8006bb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006bb4:	f100 0001 	add.w	r0, r0, #1
 8006bb8:	bf08      	it	eq
 8006bba:	2020      	moveq	r0, #32
 8006bbc:	4770      	bx	lr

08006bbe <__lo0bits>:
 8006bbe:	6803      	ldr	r3, [r0, #0]
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	f013 0007 	ands.w	r0, r3, #7
 8006bc6:	d00b      	beq.n	8006be0 <__lo0bits+0x22>
 8006bc8:	07d9      	lsls	r1, r3, #31
 8006bca:	d421      	bmi.n	8006c10 <__lo0bits+0x52>
 8006bcc:	0798      	lsls	r0, r3, #30
 8006bce:	bf49      	itett	mi
 8006bd0:	085b      	lsrmi	r3, r3, #1
 8006bd2:	089b      	lsrpl	r3, r3, #2
 8006bd4:	2001      	movmi	r0, #1
 8006bd6:	6013      	strmi	r3, [r2, #0]
 8006bd8:	bf5c      	itt	pl
 8006bda:	2002      	movpl	r0, #2
 8006bdc:	6013      	strpl	r3, [r2, #0]
 8006bde:	4770      	bx	lr
 8006be0:	b299      	uxth	r1, r3
 8006be2:	b909      	cbnz	r1, 8006be8 <__lo0bits+0x2a>
 8006be4:	2010      	movs	r0, #16
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	b2d9      	uxtb	r1, r3
 8006bea:	b909      	cbnz	r1, 8006bf0 <__lo0bits+0x32>
 8006bec:	3008      	adds	r0, #8
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	0719      	lsls	r1, r3, #28
 8006bf2:	bf04      	itt	eq
 8006bf4:	091b      	lsreq	r3, r3, #4
 8006bf6:	3004      	addeq	r0, #4
 8006bf8:	0799      	lsls	r1, r3, #30
 8006bfa:	bf04      	itt	eq
 8006bfc:	089b      	lsreq	r3, r3, #2
 8006bfe:	3002      	addeq	r0, #2
 8006c00:	07d9      	lsls	r1, r3, #31
 8006c02:	d403      	bmi.n	8006c0c <__lo0bits+0x4e>
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	f100 0001 	add.w	r0, r0, #1
 8006c0a:	d003      	beq.n	8006c14 <__lo0bits+0x56>
 8006c0c:	6013      	str	r3, [r2, #0]
 8006c0e:	4770      	bx	lr
 8006c10:	2000      	movs	r0, #0
 8006c12:	4770      	bx	lr
 8006c14:	2020      	movs	r0, #32
 8006c16:	4770      	bx	lr

08006c18 <__i2b>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	f7ff febd 	bl	800699c <_Balloc>
 8006c22:	4602      	mov	r2, r0
 8006c24:	b928      	cbnz	r0, 8006c32 <__i2b+0x1a>
 8006c26:	f240 1145 	movw	r1, #325	@ 0x145
 8006c2a:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <__i2b+0x24>)
 8006c2c:	4804      	ldr	r0, [pc, #16]	@ (8006c40 <__i2b+0x28>)
 8006c2e:	f001 fc01 	bl	8008434 <__assert_func>
 8006c32:	2301      	movs	r3, #1
 8006c34:	6144      	str	r4, [r0, #20]
 8006c36:	6103      	str	r3, [r0, #16]
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	bf00      	nop
 8006c3c:	0800b02f 	.word	0x0800b02f
 8006c40:	0800b040 	.word	0x0800b040

08006c44 <__multiply>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	4614      	mov	r4, r2
 8006c4a:	690a      	ldr	r2, [r1, #16]
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	460f      	mov	r7, r1
 8006c50:	429a      	cmp	r2, r3
 8006c52:	bfa2      	ittt	ge
 8006c54:	4623      	movge	r3, r4
 8006c56:	460c      	movge	r4, r1
 8006c58:	461f      	movge	r7, r3
 8006c5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c62:	68a3      	ldr	r3, [r4, #8]
 8006c64:	6861      	ldr	r1, [r4, #4]
 8006c66:	eb0a 0609 	add.w	r6, sl, r9
 8006c6a:	42b3      	cmp	r3, r6
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	bfb8      	it	lt
 8006c70:	3101      	addlt	r1, #1
 8006c72:	f7ff fe93 	bl	800699c <_Balloc>
 8006c76:	b930      	cbnz	r0, 8006c86 <__multiply+0x42>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c7e:	4b43      	ldr	r3, [pc, #268]	@ (8006d8c <__multiply+0x148>)
 8006c80:	4843      	ldr	r0, [pc, #268]	@ (8006d90 <__multiply+0x14c>)
 8006c82:	f001 fbd7 	bl	8008434 <__assert_func>
 8006c86:	f100 0514 	add.w	r5, r0, #20
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c92:	4543      	cmp	r3, r8
 8006c94:	d321      	bcc.n	8006cda <__multiply+0x96>
 8006c96:	f107 0114 	add.w	r1, r7, #20
 8006c9a:	f104 0214 	add.w	r2, r4, #20
 8006c9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ca2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	1b13      	subs	r3, r2, r4
 8006caa:	3b15      	subs	r3, #21
 8006cac:	f023 0303 	bic.w	r3, r3, #3
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	f104 0715 	add.w	r7, r4, #21
 8006cb6:	42ba      	cmp	r2, r7
 8006cb8:	bf38      	it	cc
 8006cba:	2304      	movcc	r3, #4
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	9103      	str	r1, [sp, #12]
 8006cc2:	428b      	cmp	r3, r1
 8006cc4:	d80c      	bhi.n	8006ce0 <__multiply+0x9c>
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	dd03      	ble.n	8006cd2 <__multiply+0x8e>
 8006cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d05a      	beq.n	8006d88 <__multiply+0x144>
 8006cd2:	6106      	str	r6, [r0, #16]
 8006cd4:	b005      	add	sp, #20
 8006cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cda:	f843 2b04 	str.w	r2, [r3], #4
 8006cde:	e7d8      	b.n	8006c92 <__multiply+0x4e>
 8006ce0:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ce4:	f1ba 0f00 	cmp.w	sl, #0
 8006ce8:	d023      	beq.n	8006d32 <__multiply+0xee>
 8006cea:	46a9      	mov	r9, r5
 8006cec:	f04f 0c00 	mov.w	ip, #0
 8006cf0:	f104 0e14 	add.w	lr, r4, #20
 8006cf4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006cf8:	f8d9 3000 	ldr.w	r3, [r9]
 8006cfc:	fa1f fb87 	uxth.w	fp, r7
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	fb0a 330b 	mla	r3, sl, fp, r3
 8006d06:	4463      	add	r3, ip
 8006d08:	f8d9 c000 	ldr.w	ip, [r9]
 8006d0c:	0c3f      	lsrs	r7, r7, #16
 8006d0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006d12:	fb0a c707 	mla	r7, sl, r7, ip
 8006d16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d20:	4572      	cmp	r2, lr
 8006d22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d26:	f849 3b04 	str.w	r3, [r9], #4
 8006d2a:	d8e3      	bhi.n	8006cf4 <__multiply+0xb0>
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	f845 c003 	str.w	ip, [r5, r3]
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3104      	adds	r1, #4
 8006d36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d3a:	f1b9 0f00 	cmp.w	r9, #0
 8006d3e:	d021      	beq.n	8006d84 <__multiply+0x140>
 8006d40:	46ae      	mov	lr, r5
 8006d42:	f04f 0a00 	mov.w	sl, #0
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	f104 0c14 	add.w	ip, r4, #20
 8006d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8006d50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	fb09 770b 	mla	r7, r9, fp, r7
 8006d5a:	4457      	add	r7, sl
 8006d5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d60:	f84e 3b04 	str.w	r3, [lr], #4
 8006d64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d6c:	f8be 3000 	ldrh.w	r3, [lr]
 8006d70:	4562      	cmp	r2, ip
 8006d72:	fb09 330a 	mla	r3, r9, sl, r3
 8006d76:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d7e:	d8e5      	bhi.n	8006d4c <__multiply+0x108>
 8006d80:	9f01      	ldr	r7, [sp, #4]
 8006d82:	51eb      	str	r3, [r5, r7]
 8006d84:	3504      	adds	r5, #4
 8006d86:	e79a      	b.n	8006cbe <__multiply+0x7a>
 8006d88:	3e01      	subs	r6, #1
 8006d8a:	e79c      	b.n	8006cc6 <__multiply+0x82>
 8006d8c:	0800b02f 	.word	0x0800b02f
 8006d90:	0800b040 	.word	0x0800b040

08006d94 <__pow5mult>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4615      	mov	r5, r2
 8006d9a:	f012 0203 	ands.w	r2, r2, #3
 8006d9e:	4607      	mov	r7, r0
 8006da0:	460e      	mov	r6, r1
 8006da2:	d007      	beq.n	8006db4 <__pow5mult+0x20>
 8006da4:	4c25      	ldr	r4, [pc, #148]	@ (8006e3c <__pow5mult+0xa8>)
 8006da6:	3a01      	subs	r2, #1
 8006da8:	2300      	movs	r3, #0
 8006daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dae:	f7ff fe57 	bl	8006a60 <__multadd>
 8006db2:	4606      	mov	r6, r0
 8006db4:	10ad      	asrs	r5, r5, #2
 8006db6:	d03d      	beq.n	8006e34 <__pow5mult+0xa0>
 8006db8:	69fc      	ldr	r4, [r7, #28]
 8006dba:	b97c      	cbnz	r4, 8006ddc <__pow5mult+0x48>
 8006dbc:	2010      	movs	r0, #16
 8006dbe:	f7ff fd37 	bl	8006830 <malloc>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	61f8      	str	r0, [r7, #28]
 8006dc6:	b928      	cbnz	r0, 8006dd4 <__pow5mult+0x40>
 8006dc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e40 <__pow5mult+0xac>)
 8006dce:	481d      	ldr	r0, [pc, #116]	@ (8006e44 <__pow5mult+0xb0>)
 8006dd0:	f001 fb30 	bl	8008434 <__assert_func>
 8006dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dd8:	6004      	str	r4, [r0, #0]
 8006dda:	60c4      	str	r4, [r0, #12]
 8006ddc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006de4:	b94c      	cbnz	r4, 8006dfa <__pow5mult+0x66>
 8006de6:	f240 2171 	movw	r1, #625	@ 0x271
 8006dea:	4638      	mov	r0, r7
 8006dec:	f7ff ff14 	bl	8006c18 <__i2b>
 8006df0:	2300      	movs	r3, #0
 8006df2:	4604      	mov	r4, r0
 8006df4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006df8:	6003      	str	r3, [r0, #0]
 8006dfa:	f04f 0900 	mov.w	r9, #0
 8006dfe:	07eb      	lsls	r3, r5, #31
 8006e00:	d50a      	bpl.n	8006e18 <__pow5mult+0x84>
 8006e02:	4631      	mov	r1, r6
 8006e04:	4622      	mov	r2, r4
 8006e06:	4638      	mov	r0, r7
 8006e08:	f7ff ff1c 	bl	8006c44 <__multiply>
 8006e0c:	4680      	mov	r8, r0
 8006e0e:	4631      	mov	r1, r6
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff fe03 	bl	8006a1c <_Bfree>
 8006e16:	4646      	mov	r6, r8
 8006e18:	106d      	asrs	r5, r5, #1
 8006e1a:	d00b      	beq.n	8006e34 <__pow5mult+0xa0>
 8006e1c:	6820      	ldr	r0, [r4, #0]
 8006e1e:	b938      	cbnz	r0, 8006e30 <__pow5mult+0x9c>
 8006e20:	4622      	mov	r2, r4
 8006e22:	4621      	mov	r1, r4
 8006e24:	4638      	mov	r0, r7
 8006e26:	f7ff ff0d 	bl	8006c44 <__multiply>
 8006e2a:	6020      	str	r0, [r4, #0]
 8006e2c:	f8c0 9000 	str.w	r9, [r0]
 8006e30:	4604      	mov	r4, r0
 8006e32:	e7e4      	b.n	8006dfe <__pow5mult+0x6a>
 8006e34:	4630      	mov	r0, r6
 8006e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3a:	bf00      	nop
 8006e3c:	0800b09c 	.word	0x0800b09c
 8006e40:	0800afc0 	.word	0x0800afc0
 8006e44:	0800b040 	.word	0x0800b040

08006e48 <__lshift>:
 8006e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	4607      	mov	r7, r0
 8006e50:	4691      	mov	r9, r2
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	6849      	ldr	r1, [r1, #4]
 8006e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e5a:	68a3      	ldr	r3, [r4, #8]
 8006e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e60:	f108 0601 	add.w	r6, r8, #1
 8006e64:	42b3      	cmp	r3, r6
 8006e66:	db0b      	blt.n	8006e80 <__lshift+0x38>
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff fd97 	bl	800699c <_Balloc>
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b948      	cbnz	r0, 8006e86 <__lshift+0x3e>
 8006e72:	4602      	mov	r2, r0
 8006e74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e78:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <__lshift+0xd0>)
 8006e7a:	4828      	ldr	r0, [pc, #160]	@ (8006f1c <__lshift+0xd4>)
 8006e7c:	f001 fada 	bl	8008434 <__assert_func>
 8006e80:	3101      	adds	r1, #1
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	e7ee      	b.n	8006e64 <__lshift+0x1c>
 8006e86:	2300      	movs	r3, #0
 8006e88:	f100 0114 	add.w	r1, r0, #20
 8006e8c:	f100 0210 	add.w	r2, r0, #16
 8006e90:	4618      	mov	r0, r3
 8006e92:	4553      	cmp	r3, sl
 8006e94:	db33      	blt.n	8006efe <__lshift+0xb6>
 8006e96:	6920      	ldr	r0, [r4, #16]
 8006e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e9c:	f104 0314 	add.w	r3, r4, #20
 8006ea0:	f019 091f 	ands.w	r9, r9, #31
 8006ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006eac:	d02b      	beq.n	8006f06 <__lshift+0xbe>
 8006eae:	468a      	mov	sl, r1
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8006ebc:	4310      	orrs	r0, r2
 8006ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8006ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec6:	459c      	cmp	ip, r3
 8006ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ecc:	d8f3      	bhi.n	8006eb6 <__lshift+0x6e>
 8006ece:	ebac 0304 	sub.w	r3, ip, r4
 8006ed2:	3b15      	subs	r3, #21
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	3304      	adds	r3, #4
 8006eda:	f104 0015 	add.w	r0, r4, #21
 8006ede:	4584      	cmp	ip, r0
 8006ee0:	bf38      	it	cc
 8006ee2:	2304      	movcc	r3, #4
 8006ee4:	50ca      	str	r2, [r1, r3]
 8006ee6:	b10a      	cbz	r2, 8006eec <__lshift+0xa4>
 8006ee8:	f108 0602 	add.w	r6, r8, #2
 8006eec:	3e01      	subs	r6, #1
 8006eee:	4638      	mov	r0, r7
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	612e      	str	r6, [r5, #16]
 8006ef4:	f7ff fd92 	bl	8006a1c <_Bfree>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f02:	3301      	adds	r3, #1
 8006f04:	e7c5      	b.n	8006e92 <__lshift+0x4a>
 8006f06:	3904      	subs	r1, #4
 8006f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f0c:	459c      	cmp	ip, r3
 8006f0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f12:	d8f9      	bhi.n	8006f08 <__lshift+0xc0>
 8006f14:	e7ea      	b.n	8006eec <__lshift+0xa4>
 8006f16:	bf00      	nop
 8006f18:	0800b02f 	.word	0x0800b02f
 8006f1c:	0800b040 	.word	0x0800b040

08006f20 <__mcmp>:
 8006f20:	4603      	mov	r3, r0
 8006f22:	690a      	ldr	r2, [r1, #16]
 8006f24:	6900      	ldr	r0, [r0, #16]
 8006f26:	b530      	push	{r4, r5, lr}
 8006f28:	1a80      	subs	r0, r0, r2
 8006f2a:	d10e      	bne.n	8006f4a <__mcmp+0x2a>
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	3114      	adds	r1, #20
 8006f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f40:	4295      	cmp	r5, r2
 8006f42:	d003      	beq.n	8006f4c <__mcmp+0x2c>
 8006f44:	d205      	bcs.n	8006f52 <__mcmp+0x32>
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4a:	bd30      	pop	{r4, r5, pc}
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d3f3      	bcc.n	8006f38 <__mcmp+0x18>
 8006f50:	e7fb      	b.n	8006f4a <__mcmp+0x2a>
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7f9      	b.n	8006f4a <__mcmp+0x2a>
	...

08006f58 <__mdiff>:
 8006f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	4606      	mov	r6, r0
 8006f60:	4611      	mov	r1, r2
 8006f62:	4648      	mov	r0, r9
 8006f64:	4614      	mov	r4, r2
 8006f66:	f7ff ffdb 	bl	8006f20 <__mcmp>
 8006f6a:	1e05      	subs	r5, r0, #0
 8006f6c:	d112      	bne.n	8006f94 <__mdiff+0x3c>
 8006f6e:	4629      	mov	r1, r5
 8006f70:	4630      	mov	r0, r6
 8006f72:	f7ff fd13 	bl	800699c <_Balloc>
 8006f76:	4602      	mov	r2, r0
 8006f78:	b928      	cbnz	r0, 8006f86 <__mdiff+0x2e>
 8006f7a:	f240 2137 	movw	r1, #567	@ 0x237
 8006f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8007078 <__mdiff+0x120>)
 8006f80:	483e      	ldr	r0, [pc, #248]	@ (800707c <__mdiff+0x124>)
 8006f82:	f001 fa57 	bl	8008434 <__assert_func>
 8006f86:	2301      	movs	r3, #1
 8006f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	b003      	add	sp, #12
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	bfbc      	itt	lt
 8006f96:	464b      	movlt	r3, r9
 8006f98:	46a1      	movlt	r9, r4
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006fa0:	bfba      	itte	lt
 8006fa2:	461c      	movlt	r4, r3
 8006fa4:	2501      	movlt	r5, #1
 8006fa6:	2500      	movge	r5, #0
 8006fa8:	f7ff fcf8 	bl	800699c <_Balloc>
 8006fac:	4602      	mov	r2, r0
 8006fae:	b918      	cbnz	r0, 8006fb8 <__mdiff+0x60>
 8006fb0:	f240 2145 	movw	r1, #581	@ 0x245
 8006fb4:	4b30      	ldr	r3, [pc, #192]	@ (8007078 <__mdiff+0x120>)
 8006fb6:	e7e3      	b.n	8006f80 <__mdiff+0x28>
 8006fb8:	f100 0b14 	add.w	fp, r0, #20
 8006fbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fc0:	f109 0310 	add.w	r3, r9, #16
 8006fc4:	60c5      	str	r5, [r0, #12]
 8006fc6:	f04f 0c00 	mov.w	ip, #0
 8006fca:	f109 0514 	add.w	r5, r9, #20
 8006fce:	46d9      	mov	r9, fp
 8006fd0:	6926      	ldr	r6, [r4, #16]
 8006fd2:	f104 0e14 	add.w	lr, r4, #20
 8006fd6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fda:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fea:	b281      	uxth	r1, r0
 8006fec:	9301      	str	r3, [sp, #4]
 8006fee:	fa1f f38a 	uxth.w	r3, sl
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	0c00      	lsrs	r0, r0, #16
 8006ff6:	4463      	add	r3, ip
 8006ff8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006ffc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007006:	4576      	cmp	r6, lr
 8007008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800700c:	f849 3b04 	str.w	r3, [r9], #4
 8007010:	d8e6      	bhi.n	8006fe0 <__mdiff+0x88>
 8007012:	1b33      	subs	r3, r6, r4
 8007014:	3b15      	subs	r3, #21
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	3415      	adds	r4, #21
 800701c:	3304      	adds	r3, #4
 800701e:	42a6      	cmp	r6, r4
 8007020:	bf38      	it	cc
 8007022:	2304      	movcc	r3, #4
 8007024:	441d      	add	r5, r3
 8007026:	445b      	add	r3, fp
 8007028:	461e      	mov	r6, r3
 800702a:	462c      	mov	r4, r5
 800702c:	4544      	cmp	r4, r8
 800702e:	d30e      	bcc.n	800704e <__mdiff+0xf6>
 8007030:	f108 0103 	add.w	r1, r8, #3
 8007034:	1b49      	subs	r1, r1, r5
 8007036:	f021 0103 	bic.w	r1, r1, #3
 800703a:	3d03      	subs	r5, #3
 800703c:	45a8      	cmp	r8, r5
 800703e:	bf38      	it	cc
 8007040:	2100      	movcc	r1, #0
 8007042:	440b      	add	r3, r1
 8007044:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007048:	b199      	cbz	r1, 8007072 <__mdiff+0x11a>
 800704a:	6117      	str	r7, [r2, #16]
 800704c:	e79e      	b.n	8006f8c <__mdiff+0x34>
 800704e:	46e6      	mov	lr, ip
 8007050:	f854 1b04 	ldr.w	r1, [r4], #4
 8007054:	fa1f fc81 	uxth.w	ip, r1
 8007058:	44f4      	add	ip, lr
 800705a:	0c08      	lsrs	r0, r1, #16
 800705c:	4471      	add	r1, lr
 800705e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007062:	b289      	uxth	r1, r1
 8007064:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007068:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800706c:	f846 1b04 	str.w	r1, [r6], #4
 8007070:	e7dc      	b.n	800702c <__mdiff+0xd4>
 8007072:	3f01      	subs	r7, #1
 8007074:	e7e6      	b.n	8007044 <__mdiff+0xec>
 8007076:	bf00      	nop
 8007078:	0800b02f 	.word	0x0800b02f
 800707c:	0800b040 	.word	0x0800b040

08007080 <__ulp>:
 8007080:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <__ulp+0x3c>)
 8007082:	400b      	ands	r3, r1
 8007084:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007088:	2b00      	cmp	r3, #0
 800708a:	dc08      	bgt.n	800709e <__ulp+0x1e>
 800708c:	425b      	negs	r3, r3
 800708e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007092:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007096:	da04      	bge.n	80070a2 <__ulp+0x22>
 8007098:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800709c:	4113      	asrs	r3, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	e008      	b.n	80070b4 <__ulp+0x34>
 80070a2:	f1a2 0314 	sub.w	r3, r2, #20
 80070a6:	2b1e      	cmp	r3, #30
 80070a8:	bfd6      	itet	le
 80070aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80070ae:	2201      	movgt	r2, #1
 80070b0:	40da      	lsrle	r2, r3
 80070b2:	2300      	movs	r3, #0
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	7ff00000 	.word	0x7ff00000

080070c0 <__b2d>:
 80070c0:	6902      	ldr	r2, [r0, #16]
 80070c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c4:	f100 0614 	add.w	r6, r0, #20
 80070c8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80070cc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80070d0:	4f1e      	ldr	r7, [pc, #120]	@ (800714c <__b2d+0x8c>)
 80070d2:	4620      	mov	r0, r4
 80070d4:	f7ff fd54 	bl	8006b80 <__hi0bits>
 80070d8:	4603      	mov	r3, r0
 80070da:	f1c0 0020 	rsb	r0, r0, #32
 80070de:	2b0a      	cmp	r3, #10
 80070e0:	f1a2 0504 	sub.w	r5, r2, #4
 80070e4:	6008      	str	r0, [r1, #0]
 80070e6:	dc12      	bgt.n	800710e <__b2d+0x4e>
 80070e8:	42ae      	cmp	r6, r5
 80070ea:	bf2c      	ite	cs
 80070ec:	2200      	movcs	r2, #0
 80070ee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80070f2:	f1c3 0c0b 	rsb	ip, r3, #11
 80070f6:	3315      	adds	r3, #21
 80070f8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80070fc:	fa04 f303 	lsl.w	r3, r4, r3
 8007100:	fa22 f20c 	lsr.w	r2, r2, ip
 8007104:	ea4e 0107 	orr.w	r1, lr, r7
 8007108:	431a      	orrs	r2, r3
 800710a:	4610      	mov	r0, r2
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710e:	42ae      	cmp	r6, r5
 8007110:	bf36      	itet	cc
 8007112:	f1a2 0508 	subcc.w	r5, r2, #8
 8007116:	2200      	movcs	r2, #0
 8007118:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800711c:	3b0b      	subs	r3, #11
 800711e:	d012      	beq.n	8007146 <__b2d+0x86>
 8007120:	f1c3 0720 	rsb	r7, r3, #32
 8007124:	fa22 f107 	lsr.w	r1, r2, r7
 8007128:	409c      	lsls	r4, r3
 800712a:	430c      	orrs	r4, r1
 800712c:	42b5      	cmp	r5, r6
 800712e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007132:	bf94      	ite	ls
 8007134:	2400      	movls	r4, #0
 8007136:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800713a:	409a      	lsls	r2, r3
 800713c:	40fc      	lsrs	r4, r7
 800713e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007142:	4322      	orrs	r2, r4
 8007144:	e7e1      	b.n	800710a <__b2d+0x4a>
 8007146:	ea44 0107 	orr.w	r1, r4, r7
 800714a:	e7de      	b.n	800710a <__b2d+0x4a>
 800714c:	3ff00000 	.word	0x3ff00000

08007150 <__d2b>:
 8007150:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007154:	2101      	movs	r1, #1
 8007156:	4690      	mov	r8, r2
 8007158:	4699      	mov	r9, r3
 800715a:	9e08      	ldr	r6, [sp, #32]
 800715c:	f7ff fc1e 	bl	800699c <_Balloc>
 8007160:	4604      	mov	r4, r0
 8007162:	b930      	cbnz	r0, 8007172 <__d2b+0x22>
 8007164:	4602      	mov	r2, r0
 8007166:	f240 310f 	movw	r1, #783	@ 0x30f
 800716a:	4b23      	ldr	r3, [pc, #140]	@ (80071f8 <__d2b+0xa8>)
 800716c:	4823      	ldr	r0, [pc, #140]	@ (80071fc <__d2b+0xac>)
 800716e:	f001 f961 	bl	8008434 <__assert_func>
 8007172:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007176:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800717a:	b10d      	cbz	r5, 8007180 <__d2b+0x30>
 800717c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	f1b8 0300 	subs.w	r3, r8, #0
 8007186:	d024      	beq.n	80071d2 <__d2b+0x82>
 8007188:	4668      	mov	r0, sp
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f7ff fd17 	bl	8006bbe <__lo0bits>
 8007190:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007194:	b1d8      	cbz	r0, 80071ce <__d2b+0x7e>
 8007196:	f1c0 0320 	rsb	r3, r0, #32
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	430b      	orrs	r3, r1
 80071a0:	40c2      	lsrs	r2, r0
 80071a2:	6163      	str	r3, [r4, #20]
 80071a4:	9201      	str	r2, [sp, #4]
 80071a6:	9b01      	ldr	r3, [sp, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bf0c      	ite	eq
 80071ac:	2201      	moveq	r2, #1
 80071ae:	2202      	movne	r2, #2
 80071b0:	61a3      	str	r3, [r4, #24]
 80071b2:	6122      	str	r2, [r4, #16]
 80071b4:	b1ad      	cbz	r5, 80071e2 <__d2b+0x92>
 80071b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071ba:	4405      	add	r5, r0
 80071bc:	6035      	str	r5, [r6, #0]
 80071be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c4:	6018      	str	r0, [r3, #0]
 80071c6:	4620      	mov	r0, r4
 80071c8:	b002      	add	sp, #8
 80071ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80071ce:	6161      	str	r1, [r4, #20]
 80071d0:	e7e9      	b.n	80071a6 <__d2b+0x56>
 80071d2:	a801      	add	r0, sp, #4
 80071d4:	f7ff fcf3 	bl	8006bbe <__lo0bits>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	6163      	str	r3, [r4, #20]
 80071de:	3020      	adds	r0, #32
 80071e0:	e7e7      	b.n	80071b2 <__d2b+0x62>
 80071e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071ea:	6030      	str	r0, [r6, #0]
 80071ec:	6918      	ldr	r0, [r3, #16]
 80071ee:	f7ff fcc7 	bl	8006b80 <__hi0bits>
 80071f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071f6:	e7e4      	b.n	80071c2 <__d2b+0x72>
 80071f8:	0800b02f 	.word	0x0800b02f
 80071fc:	0800b040 	.word	0x0800b040

08007200 <__ratio>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	b085      	sub	sp, #20
 8007206:	e9cd 1000 	strd	r1, r0, [sp]
 800720a:	a902      	add	r1, sp, #8
 800720c:	f7ff ff58 	bl	80070c0 <__b2d>
 8007210:	468b      	mov	fp, r1
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	9800      	ldr	r0, [sp, #0]
 8007218:	a903      	add	r1, sp, #12
 800721a:	f7ff ff51 	bl	80070c0 <__b2d>
 800721e:	460d      	mov	r5, r1
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	4689      	mov	r9, r1
 8007224:	6919      	ldr	r1, [r3, #16]
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	4604      	mov	r4, r0
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	4630      	mov	r0, r6
 800722e:	1ac9      	subs	r1, r1, r3
 8007230:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfcd      	iteet	gt
 800723e:	463a      	movgt	r2, r7
 8007240:	462a      	movle	r2, r5
 8007242:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007246:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800724a:	bfd8      	it	le
 800724c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007250:	464b      	mov	r3, r9
 8007252:	4622      	mov	r2, r4
 8007254:	4659      	mov	r1, fp
 8007256:	f7f9 fa69 	bl	800072c <__aeabi_ddiv>
 800725a:	b005      	add	sp, #20
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007260 <__copybits>:
 8007260:	3901      	subs	r1, #1
 8007262:	b570      	push	{r4, r5, r6, lr}
 8007264:	1149      	asrs	r1, r1, #5
 8007266:	6914      	ldr	r4, [r2, #16]
 8007268:	3101      	adds	r1, #1
 800726a:	f102 0314 	add.w	r3, r2, #20
 800726e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007272:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007276:	1f05      	subs	r5, r0, #4
 8007278:	42a3      	cmp	r3, r4
 800727a:	d30c      	bcc.n	8007296 <__copybits+0x36>
 800727c:	1aa3      	subs	r3, r4, r2
 800727e:	3b11      	subs	r3, #17
 8007280:	f023 0303 	bic.w	r3, r3, #3
 8007284:	3211      	adds	r2, #17
 8007286:	42a2      	cmp	r2, r4
 8007288:	bf88      	it	hi
 800728a:	2300      	movhi	r3, #0
 800728c:	4418      	add	r0, r3
 800728e:	2300      	movs	r3, #0
 8007290:	4288      	cmp	r0, r1
 8007292:	d305      	bcc.n	80072a0 <__copybits+0x40>
 8007294:	bd70      	pop	{r4, r5, r6, pc}
 8007296:	f853 6b04 	ldr.w	r6, [r3], #4
 800729a:	f845 6f04 	str.w	r6, [r5, #4]!
 800729e:	e7eb      	b.n	8007278 <__copybits+0x18>
 80072a0:	f840 3b04 	str.w	r3, [r0], #4
 80072a4:	e7f4      	b.n	8007290 <__copybits+0x30>

080072a6 <__any_on>:
 80072a6:	f100 0214 	add.w	r2, r0, #20
 80072aa:	6900      	ldr	r0, [r0, #16]
 80072ac:	114b      	asrs	r3, r1, #5
 80072ae:	4298      	cmp	r0, r3
 80072b0:	b510      	push	{r4, lr}
 80072b2:	db11      	blt.n	80072d8 <__any_on+0x32>
 80072b4:	dd0a      	ble.n	80072cc <__any_on+0x26>
 80072b6:	f011 011f 	ands.w	r1, r1, #31
 80072ba:	d007      	beq.n	80072cc <__any_on+0x26>
 80072bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80072c0:	fa24 f001 	lsr.w	r0, r4, r1
 80072c4:	fa00 f101 	lsl.w	r1, r0, r1
 80072c8:	428c      	cmp	r4, r1
 80072ca:	d10b      	bne.n	80072e4 <__any_on+0x3e>
 80072cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d803      	bhi.n	80072dc <__any_on+0x36>
 80072d4:	2000      	movs	r0, #0
 80072d6:	bd10      	pop	{r4, pc}
 80072d8:	4603      	mov	r3, r0
 80072da:	e7f7      	b.n	80072cc <__any_on+0x26>
 80072dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072e0:	2900      	cmp	r1, #0
 80072e2:	d0f5      	beq.n	80072d0 <__any_on+0x2a>
 80072e4:	2001      	movs	r0, #1
 80072e6:	e7f6      	b.n	80072d6 <__any_on+0x30>

080072e8 <sulp>:
 80072e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ec:	460f      	mov	r7, r1
 80072ee:	4690      	mov	r8, r2
 80072f0:	f7ff fec6 	bl	8007080 <__ulp>
 80072f4:	4604      	mov	r4, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	f1b8 0f00 	cmp.w	r8, #0
 80072fc:	d011      	beq.n	8007322 <sulp+0x3a>
 80072fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007302:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007306:	2b00      	cmp	r3, #0
 8007308:	dd0b      	ble.n	8007322 <sulp+0x3a>
 800730a:	2400      	movs	r4, #0
 800730c:	051b      	lsls	r3, r3, #20
 800730e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007312:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007316:	4622      	mov	r2, r4
 8007318:	462b      	mov	r3, r5
 800731a:	f7f9 f8dd 	bl	80004d8 <__aeabi_dmul>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732a:	0000      	movs	r0, r0
 800732c:	0000      	movs	r0, r0
	...

08007330 <_strtod_l>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	b09f      	sub	sp, #124	@ 0x7c
 8007336:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007338:	2200      	movs	r2, #0
 800733a:	460c      	mov	r4, r1
 800733c:	921a      	str	r2, [sp, #104]	@ 0x68
 800733e:	f04f 0a00 	mov.w	sl, #0
 8007342:	f04f 0b00 	mov.w	fp, #0
 8007346:	460a      	mov	r2, r1
 8007348:	9005      	str	r0, [sp, #20]
 800734a:	9219      	str	r2, [sp, #100]	@ 0x64
 800734c:	7811      	ldrb	r1, [r2, #0]
 800734e:	292b      	cmp	r1, #43	@ 0x2b
 8007350:	d048      	beq.n	80073e4 <_strtod_l+0xb4>
 8007352:	d836      	bhi.n	80073c2 <_strtod_l+0x92>
 8007354:	290d      	cmp	r1, #13
 8007356:	d830      	bhi.n	80073ba <_strtod_l+0x8a>
 8007358:	2908      	cmp	r1, #8
 800735a:	d830      	bhi.n	80073be <_strtod_l+0x8e>
 800735c:	2900      	cmp	r1, #0
 800735e:	d039      	beq.n	80073d4 <_strtod_l+0xa4>
 8007360:	2200      	movs	r2, #0
 8007362:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007364:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007366:	782a      	ldrb	r2, [r5, #0]
 8007368:	2a30      	cmp	r2, #48	@ 0x30
 800736a:	f040 80b1 	bne.w	80074d0 <_strtod_l+0x1a0>
 800736e:	786a      	ldrb	r2, [r5, #1]
 8007370:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007374:	2a58      	cmp	r2, #88	@ 0x58
 8007376:	d16c      	bne.n	8007452 <_strtod_l+0x122>
 8007378:	9302      	str	r3, [sp, #8]
 800737a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800737c:	4a8e      	ldr	r2, [pc, #568]	@ (80075b8 <_strtod_l+0x288>)
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	ab1a      	add	r3, sp, #104	@ 0x68
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	9805      	ldr	r0, [sp, #20]
 8007386:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007388:	a919      	add	r1, sp, #100	@ 0x64
 800738a:	f001 f8ed 	bl	8008568 <__gethex>
 800738e:	f010 060f 	ands.w	r6, r0, #15
 8007392:	4604      	mov	r4, r0
 8007394:	d005      	beq.n	80073a2 <_strtod_l+0x72>
 8007396:	2e06      	cmp	r6, #6
 8007398:	d126      	bne.n	80073e8 <_strtod_l+0xb8>
 800739a:	2300      	movs	r3, #0
 800739c:	3501      	adds	r5, #1
 800739e:	9519      	str	r5, [sp, #100]	@ 0x64
 80073a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8584 	bne.w	8007eb2 <_strtod_l+0xb82>
 80073aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ac:	b1bb      	cbz	r3, 80073de <_strtod_l+0xae>
 80073ae:	4650      	mov	r0, sl
 80073b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80073b4:	b01f      	add	sp, #124	@ 0x7c
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	2920      	cmp	r1, #32
 80073bc:	d1d0      	bne.n	8007360 <_strtod_l+0x30>
 80073be:	3201      	adds	r2, #1
 80073c0:	e7c3      	b.n	800734a <_strtod_l+0x1a>
 80073c2:	292d      	cmp	r1, #45	@ 0x2d
 80073c4:	d1cc      	bne.n	8007360 <_strtod_l+0x30>
 80073c6:	2101      	movs	r1, #1
 80073c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80073ca:	1c51      	adds	r1, r2, #1
 80073cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80073ce:	7852      	ldrb	r2, [r2, #1]
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	d1c7      	bne.n	8007364 <_strtod_l+0x34>
 80073d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 8568 	bne.w	8007eae <_strtod_l+0xb7e>
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	e7e7      	b.n	80073b4 <_strtod_l+0x84>
 80073e4:	2100      	movs	r1, #0
 80073e6:	e7ef      	b.n	80073c8 <_strtod_l+0x98>
 80073e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073ea:	b13a      	cbz	r2, 80073fc <_strtod_l+0xcc>
 80073ec:	2135      	movs	r1, #53	@ 0x35
 80073ee:	a81c      	add	r0, sp, #112	@ 0x70
 80073f0:	f7ff ff36 	bl	8007260 <__copybits>
 80073f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073f6:	9805      	ldr	r0, [sp, #20]
 80073f8:	f7ff fb10 	bl	8006a1c <_Bfree>
 80073fc:	3e01      	subs	r6, #1
 80073fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007400:	2e04      	cmp	r6, #4
 8007402:	d806      	bhi.n	8007412 <_strtod_l+0xe2>
 8007404:	e8df f006 	tbb	[pc, r6]
 8007408:	201d0314 	.word	0x201d0314
 800740c:	14          	.byte	0x14
 800740d:	00          	.byte	0x00
 800740e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007412:	05e1      	lsls	r1, r4, #23
 8007414:	bf48      	it	mi
 8007416:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800741a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800741e:	0d1b      	lsrs	r3, r3, #20
 8007420:	051b      	lsls	r3, r3, #20
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1bd      	bne.n	80073a2 <_strtod_l+0x72>
 8007426:	f7fe fb1d 	bl	8005a64 <__errno>
 800742a:	2322      	movs	r3, #34	@ 0x22
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	e7b8      	b.n	80073a2 <_strtod_l+0x72>
 8007430:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007434:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007438:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800743c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007440:	e7e7      	b.n	8007412 <_strtod_l+0xe2>
 8007442:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80075bc <_strtod_l+0x28c>
 8007446:	e7e4      	b.n	8007412 <_strtod_l+0xe2>
 8007448:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800744c:	f04f 3aff 	mov.w	sl, #4294967295
 8007450:	e7df      	b.n	8007412 <_strtod_l+0xe2>
 8007452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	9219      	str	r2, [sp, #100]	@ 0x64
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	2b30      	cmp	r3, #48	@ 0x30
 800745c:	d0f9      	beq.n	8007452 <_strtod_l+0x122>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d09f      	beq.n	80073a2 <_strtod_l+0x72>
 8007462:	2301      	movs	r3, #1
 8007464:	9309      	str	r3, [sp, #36]	@ 0x24
 8007466:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007468:	220a      	movs	r2, #10
 800746a:	930c      	str	r3, [sp, #48]	@ 0x30
 800746c:	2300      	movs	r3, #0
 800746e:	461f      	mov	r7, r3
 8007470:	9308      	str	r3, [sp, #32]
 8007472:	930a      	str	r3, [sp, #40]	@ 0x28
 8007474:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007476:	7805      	ldrb	r5, [r0, #0]
 8007478:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800747c:	b2d9      	uxtb	r1, r3
 800747e:	2909      	cmp	r1, #9
 8007480:	d928      	bls.n	80074d4 <_strtod_l+0x1a4>
 8007482:	2201      	movs	r2, #1
 8007484:	494e      	ldr	r1, [pc, #312]	@ (80075c0 <_strtod_l+0x290>)
 8007486:	f000 ffad 	bl	80083e4 <strncmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	d032      	beq.n	80074f4 <_strtod_l+0x1c4>
 800748e:	2000      	movs	r0, #0
 8007490:	462a      	mov	r2, r5
 8007492:	4681      	mov	r9, r0
 8007494:	463d      	mov	r5, r7
 8007496:	4603      	mov	r3, r0
 8007498:	2a65      	cmp	r2, #101	@ 0x65
 800749a:	d001      	beq.n	80074a0 <_strtod_l+0x170>
 800749c:	2a45      	cmp	r2, #69	@ 0x45
 800749e:	d114      	bne.n	80074ca <_strtod_l+0x19a>
 80074a0:	b91d      	cbnz	r5, 80074aa <_strtod_l+0x17a>
 80074a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a4:	4302      	orrs	r2, r0
 80074a6:	d095      	beq.n	80073d4 <_strtod_l+0xa4>
 80074a8:	2500      	movs	r5, #0
 80074aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074ac:	1c62      	adds	r2, r4, #1
 80074ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80074b0:	7862      	ldrb	r2, [r4, #1]
 80074b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80074b4:	d077      	beq.n	80075a6 <_strtod_l+0x276>
 80074b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80074b8:	d07b      	beq.n	80075b2 <_strtod_l+0x282>
 80074ba:	f04f 0c00 	mov.w	ip, #0
 80074be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80074c2:	2909      	cmp	r1, #9
 80074c4:	f240 8082 	bls.w	80075cc <_strtod_l+0x29c>
 80074c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80074ca:	f04f 0800 	mov.w	r8, #0
 80074ce:	e0a2      	b.n	8007616 <_strtod_l+0x2e6>
 80074d0:	2300      	movs	r3, #0
 80074d2:	e7c7      	b.n	8007464 <_strtod_l+0x134>
 80074d4:	2f08      	cmp	r7, #8
 80074d6:	bfd5      	itete	le
 80074d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80074da:	9908      	ldrgt	r1, [sp, #32]
 80074dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80074e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80074e4:	f100 0001 	add.w	r0, r0, #1
 80074e8:	bfd4      	ite	le
 80074ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80074ec:	9308      	strgt	r3, [sp, #32]
 80074ee:	3701      	adds	r7, #1
 80074f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80074f2:	e7bf      	b.n	8007474 <_strtod_l+0x144>
 80074f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80074fa:	785a      	ldrb	r2, [r3, #1]
 80074fc:	b37f      	cbz	r7, 800755e <_strtod_l+0x22e>
 80074fe:	4681      	mov	r9, r0
 8007500:	463d      	mov	r5, r7
 8007502:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007506:	2b09      	cmp	r3, #9
 8007508:	d912      	bls.n	8007530 <_strtod_l+0x200>
 800750a:	2301      	movs	r3, #1
 800750c:	e7c4      	b.n	8007498 <_strtod_l+0x168>
 800750e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007510:	3001      	adds	r0, #1
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	9219      	str	r2, [sp, #100]	@ 0x64
 8007516:	785a      	ldrb	r2, [r3, #1]
 8007518:	2a30      	cmp	r2, #48	@ 0x30
 800751a:	d0f8      	beq.n	800750e <_strtod_l+0x1de>
 800751c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007520:	2b08      	cmp	r3, #8
 8007522:	f200 84cb 	bhi.w	8007ebc <_strtod_l+0xb8c>
 8007526:	4681      	mov	r9, r0
 8007528:	2000      	movs	r0, #0
 800752a:	4605      	mov	r5, r0
 800752c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800752e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007530:	3a30      	subs	r2, #48	@ 0x30
 8007532:	f100 0301 	add.w	r3, r0, #1
 8007536:	d02a      	beq.n	800758e <_strtod_l+0x25e>
 8007538:	4499      	add	r9, r3
 800753a:	210a      	movs	r1, #10
 800753c:	462b      	mov	r3, r5
 800753e:	eb00 0c05 	add.w	ip, r0, r5
 8007542:	4563      	cmp	r3, ip
 8007544:	d10d      	bne.n	8007562 <_strtod_l+0x232>
 8007546:	1c69      	adds	r1, r5, #1
 8007548:	4401      	add	r1, r0
 800754a:	4428      	add	r0, r5
 800754c:	2808      	cmp	r0, #8
 800754e:	dc16      	bgt.n	800757e <_strtod_l+0x24e>
 8007550:	230a      	movs	r3, #10
 8007552:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007554:	fb03 2300 	mla	r3, r3, r0, r2
 8007558:	930a      	str	r3, [sp, #40]	@ 0x28
 800755a:	2300      	movs	r3, #0
 800755c:	e018      	b.n	8007590 <_strtod_l+0x260>
 800755e:	4638      	mov	r0, r7
 8007560:	e7da      	b.n	8007518 <_strtod_l+0x1e8>
 8007562:	2b08      	cmp	r3, #8
 8007564:	f103 0301 	add.w	r3, r3, #1
 8007568:	dc03      	bgt.n	8007572 <_strtod_l+0x242>
 800756a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800756c:	434e      	muls	r6, r1
 800756e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007570:	e7e7      	b.n	8007542 <_strtod_l+0x212>
 8007572:	2b10      	cmp	r3, #16
 8007574:	bfde      	ittt	le
 8007576:	9e08      	ldrle	r6, [sp, #32]
 8007578:	434e      	mulle	r6, r1
 800757a:	9608      	strle	r6, [sp, #32]
 800757c:	e7e1      	b.n	8007542 <_strtod_l+0x212>
 800757e:	280f      	cmp	r0, #15
 8007580:	dceb      	bgt.n	800755a <_strtod_l+0x22a>
 8007582:	230a      	movs	r3, #10
 8007584:	9808      	ldr	r0, [sp, #32]
 8007586:	fb03 2300 	mla	r3, r3, r0, r2
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	e7e5      	b.n	800755a <_strtod_l+0x22a>
 800758e:	4629      	mov	r1, r5
 8007590:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007592:	460d      	mov	r5, r1
 8007594:	1c50      	adds	r0, r2, #1
 8007596:	9019      	str	r0, [sp, #100]	@ 0x64
 8007598:	7852      	ldrb	r2, [r2, #1]
 800759a:	4618      	mov	r0, r3
 800759c:	e7b1      	b.n	8007502 <_strtod_l+0x1d2>
 800759e:	f04f 0900 	mov.w	r9, #0
 80075a2:	2301      	movs	r3, #1
 80075a4:	e77d      	b.n	80074a2 <_strtod_l+0x172>
 80075a6:	f04f 0c00 	mov.w	ip, #0
 80075aa:	1ca2      	adds	r2, r4, #2
 80075ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80075ae:	78a2      	ldrb	r2, [r4, #2]
 80075b0:	e785      	b.n	80074be <_strtod_l+0x18e>
 80075b2:	f04f 0c01 	mov.w	ip, #1
 80075b6:	e7f8      	b.n	80075aa <_strtod_l+0x27a>
 80075b8:	0800b1b0 	.word	0x0800b1b0
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	0800b198 	.word	0x0800b198
 80075c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075c6:	1c51      	adds	r1, r2, #1
 80075c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80075ca:	7852      	ldrb	r2, [r2, #1]
 80075cc:	2a30      	cmp	r2, #48	@ 0x30
 80075ce:	d0f9      	beq.n	80075c4 <_strtod_l+0x294>
 80075d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80075d4:	2908      	cmp	r1, #8
 80075d6:	f63f af78 	bhi.w	80074ca <_strtod_l+0x19a>
 80075da:	f04f 080a 	mov.w	r8, #10
 80075de:	3a30      	subs	r2, #48	@ 0x30
 80075e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075e8:	1c56      	adds	r6, r2, #1
 80075ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80075ec:	7852      	ldrb	r2, [r2, #1]
 80075ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80075f2:	f1be 0f09 	cmp.w	lr, #9
 80075f6:	d939      	bls.n	800766c <_strtod_l+0x33c>
 80075f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80075fe:	1a76      	subs	r6, r6, r1
 8007600:	2e08      	cmp	r6, #8
 8007602:	dc03      	bgt.n	800760c <_strtod_l+0x2dc>
 8007604:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007606:	4588      	cmp	r8, r1
 8007608:	bfa8      	it	ge
 800760a:	4688      	movge	r8, r1
 800760c:	f1bc 0f00 	cmp.w	ip, #0
 8007610:	d001      	beq.n	8007616 <_strtod_l+0x2e6>
 8007612:	f1c8 0800 	rsb	r8, r8, #0
 8007616:	2d00      	cmp	r5, #0
 8007618:	d14e      	bne.n	80076b8 <_strtod_l+0x388>
 800761a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800761c:	4308      	orrs	r0, r1
 800761e:	f47f aec0 	bne.w	80073a2 <_strtod_l+0x72>
 8007622:	2b00      	cmp	r3, #0
 8007624:	f47f aed6 	bne.w	80073d4 <_strtod_l+0xa4>
 8007628:	2a69      	cmp	r2, #105	@ 0x69
 800762a:	d028      	beq.n	800767e <_strtod_l+0x34e>
 800762c:	dc25      	bgt.n	800767a <_strtod_l+0x34a>
 800762e:	2a49      	cmp	r2, #73	@ 0x49
 8007630:	d025      	beq.n	800767e <_strtod_l+0x34e>
 8007632:	2a4e      	cmp	r2, #78	@ 0x4e
 8007634:	f47f aece 	bne.w	80073d4 <_strtod_l+0xa4>
 8007638:	499a      	ldr	r1, [pc, #616]	@ (80078a4 <_strtod_l+0x574>)
 800763a:	a819      	add	r0, sp, #100	@ 0x64
 800763c:	f001 f9b6 	bl	80089ac <__match>
 8007640:	2800      	cmp	r0, #0
 8007642:	f43f aec7 	beq.w	80073d4 <_strtod_l+0xa4>
 8007646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b28      	cmp	r3, #40	@ 0x28
 800764c:	d12e      	bne.n	80076ac <_strtod_l+0x37c>
 800764e:	4996      	ldr	r1, [pc, #600]	@ (80078a8 <_strtod_l+0x578>)
 8007650:	aa1c      	add	r2, sp, #112	@ 0x70
 8007652:	a819      	add	r0, sp, #100	@ 0x64
 8007654:	f001 f9be 	bl	80089d4 <__hexnan>
 8007658:	2805      	cmp	r0, #5
 800765a:	d127      	bne.n	80076ac <_strtod_l+0x37c>
 800765c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800765e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007662:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007666:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800766a:	e69a      	b.n	80073a2 <_strtod_l+0x72>
 800766c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800766e:	fb08 2101 	mla	r1, r8, r1, r2
 8007672:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007676:	920e      	str	r2, [sp, #56]	@ 0x38
 8007678:	e7b5      	b.n	80075e6 <_strtod_l+0x2b6>
 800767a:	2a6e      	cmp	r2, #110	@ 0x6e
 800767c:	e7da      	b.n	8007634 <_strtod_l+0x304>
 800767e:	498b      	ldr	r1, [pc, #556]	@ (80078ac <_strtod_l+0x57c>)
 8007680:	a819      	add	r0, sp, #100	@ 0x64
 8007682:	f001 f993 	bl	80089ac <__match>
 8007686:	2800      	cmp	r0, #0
 8007688:	f43f aea4 	beq.w	80073d4 <_strtod_l+0xa4>
 800768c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800768e:	4988      	ldr	r1, [pc, #544]	@ (80078b0 <_strtod_l+0x580>)
 8007690:	3b01      	subs	r3, #1
 8007692:	a819      	add	r0, sp, #100	@ 0x64
 8007694:	9319      	str	r3, [sp, #100]	@ 0x64
 8007696:	f001 f989 	bl	80089ac <__match>
 800769a:	b910      	cbnz	r0, 80076a2 <_strtod_l+0x372>
 800769c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800769e:	3301      	adds	r3, #1
 80076a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80076a2:	f04f 0a00 	mov.w	sl, #0
 80076a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80078b4 <_strtod_l+0x584>
 80076aa:	e67a      	b.n	80073a2 <_strtod_l+0x72>
 80076ac:	4882      	ldr	r0, [pc, #520]	@ (80078b8 <_strtod_l+0x588>)
 80076ae:	f000 febb 	bl	8008428 <nan>
 80076b2:	4682      	mov	sl, r0
 80076b4:	468b      	mov	fp, r1
 80076b6:	e674      	b.n	80073a2 <_strtod_l+0x72>
 80076b8:	eba8 0309 	sub.w	r3, r8, r9
 80076bc:	2f00      	cmp	r7, #0
 80076be:	bf08      	it	eq
 80076c0:	462f      	moveq	r7, r5
 80076c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076c4:	2d10      	cmp	r5, #16
 80076c6:	462c      	mov	r4, r5
 80076c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ca:	bfa8      	it	ge
 80076cc:	2410      	movge	r4, #16
 80076ce:	f7f8 fe89 	bl	80003e4 <__aeabi_ui2d>
 80076d2:	2d09      	cmp	r5, #9
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	dc11      	bgt.n	80076fe <_strtod_l+0x3ce>
 80076da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f43f ae60 	beq.w	80073a2 <_strtod_l+0x72>
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	dd76      	ble.n	80077d4 <_strtod_l+0x4a4>
 80076e6:	2b16      	cmp	r3, #22
 80076e8:	dc5d      	bgt.n	80077a6 <_strtod_l+0x476>
 80076ea:	4974      	ldr	r1, [pc, #464]	@ (80078bc <_strtod_l+0x58c>)
 80076ec:	4652      	mov	r2, sl
 80076ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076f2:	465b      	mov	r3, fp
 80076f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076f8:	f7f8 feee 	bl	80004d8 <__aeabi_dmul>
 80076fc:	e7d9      	b.n	80076b2 <_strtod_l+0x382>
 80076fe:	4b6f      	ldr	r3, [pc, #444]	@ (80078bc <_strtod_l+0x58c>)
 8007700:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007704:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007708:	f7f8 fee6 	bl	80004d8 <__aeabi_dmul>
 800770c:	4682      	mov	sl, r0
 800770e:	9808      	ldr	r0, [sp, #32]
 8007710:	468b      	mov	fp, r1
 8007712:	f7f8 fe67 	bl	80003e4 <__aeabi_ui2d>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4650      	mov	r0, sl
 800771c:	4659      	mov	r1, fp
 800771e:	f7f8 fd25 	bl	800016c <__adddf3>
 8007722:	2d0f      	cmp	r5, #15
 8007724:	4682      	mov	sl, r0
 8007726:	468b      	mov	fp, r1
 8007728:	ddd7      	ble.n	80076da <_strtod_l+0x3aa>
 800772a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772c:	1b2c      	subs	r4, r5, r4
 800772e:	441c      	add	r4, r3
 8007730:	2c00      	cmp	r4, #0
 8007732:	f340 8096 	ble.w	8007862 <_strtod_l+0x532>
 8007736:	f014 030f 	ands.w	r3, r4, #15
 800773a:	d00a      	beq.n	8007752 <_strtod_l+0x422>
 800773c:	495f      	ldr	r1, [pc, #380]	@ (80078bc <_strtod_l+0x58c>)
 800773e:	4652      	mov	r2, sl
 8007740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007748:	465b      	mov	r3, fp
 800774a:	f7f8 fec5 	bl	80004d8 <__aeabi_dmul>
 800774e:	4682      	mov	sl, r0
 8007750:	468b      	mov	fp, r1
 8007752:	f034 040f 	bics.w	r4, r4, #15
 8007756:	d073      	beq.n	8007840 <_strtod_l+0x510>
 8007758:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800775c:	dd48      	ble.n	80077f0 <_strtod_l+0x4c0>
 800775e:	2400      	movs	r4, #0
 8007760:	46a0      	mov	r8, r4
 8007762:	46a1      	mov	r9, r4
 8007764:	940a      	str	r4, [sp, #40]	@ 0x28
 8007766:	2322      	movs	r3, #34	@ 0x22
 8007768:	f04f 0a00 	mov.w	sl, #0
 800776c:	9a05      	ldr	r2, [sp, #20]
 800776e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80078b4 <_strtod_l+0x584>
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007776:	2b00      	cmp	r3, #0
 8007778:	f43f ae13 	beq.w	80073a2 <_strtod_l+0x72>
 800777c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800777e:	9805      	ldr	r0, [sp, #20]
 8007780:	f7ff f94c 	bl	8006a1c <_Bfree>
 8007784:	4649      	mov	r1, r9
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f7ff f948 	bl	8006a1c <_Bfree>
 800778c:	4641      	mov	r1, r8
 800778e:	9805      	ldr	r0, [sp, #20]
 8007790:	f7ff f944 	bl	8006a1c <_Bfree>
 8007794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007796:	9805      	ldr	r0, [sp, #20]
 8007798:	f7ff f940 	bl	8006a1c <_Bfree>
 800779c:	4621      	mov	r1, r4
 800779e:	9805      	ldr	r0, [sp, #20]
 80077a0:	f7ff f93c 	bl	8006a1c <_Bfree>
 80077a4:	e5fd      	b.n	80073a2 <_strtod_l+0x72>
 80077a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077ac:	4293      	cmp	r3, r2
 80077ae:	dbbc      	blt.n	800772a <_strtod_l+0x3fa>
 80077b0:	4c42      	ldr	r4, [pc, #264]	@ (80078bc <_strtod_l+0x58c>)
 80077b2:	f1c5 050f 	rsb	r5, r5, #15
 80077b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077ba:	4652      	mov	r2, sl
 80077bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c0:	465b      	mov	r3, fp
 80077c2:	f7f8 fe89 	bl	80004d8 <__aeabi_dmul>
 80077c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077c8:	1b5d      	subs	r5, r3, r5
 80077ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80077ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80077d2:	e791      	b.n	80076f8 <_strtod_l+0x3c8>
 80077d4:	3316      	adds	r3, #22
 80077d6:	dba8      	blt.n	800772a <_strtod_l+0x3fa>
 80077d8:	4b38      	ldr	r3, [pc, #224]	@ (80078bc <_strtod_l+0x58c>)
 80077da:	eba9 0808 	sub.w	r8, r9, r8
 80077de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80077e2:	4650      	mov	r0, sl
 80077e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80077e8:	4659      	mov	r1, fp
 80077ea:	f7f8 ff9f 	bl	800072c <__aeabi_ddiv>
 80077ee:	e760      	b.n	80076b2 <_strtod_l+0x382>
 80077f0:	4b33      	ldr	r3, [pc, #204]	@ (80078c0 <_strtod_l+0x590>)
 80077f2:	4650      	mov	r0, sl
 80077f4:	9308      	str	r3, [sp, #32]
 80077f6:	2300      	movs	r3, #0
 80077f8:	4659      	mov	r1, fp
 80077fa:	461e      	mov	r6, r3
 80077fc:	1124      	asrs	r4, r4, #4
 80077fe:	2c01      	cmp	r4, #1
 8007800:	dc21      	bgt.n	8007846 <_strtod_l+0x516>
 8007802:	b10b      	cbz	r3, 8007808 <_strtod_l+0x4d8>
 8007804:	4682      	mov	sl, r0
 8007806:	468b      	mov	fp, r1
 8007808:	492d      	ldr	r1, [pc, #180]	@ (80078c0 <_strtod_l+0x590>)
 800780a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800780e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007812:	4652      	mov	r2, sl
 8007814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007818:	465b      	mov	r3, fp
 800781a:	f7f8 fe5d 	bl	80004d8 <__aeabi_dmul>
 800781e:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <_strtod_l+0x584>)
 8007820:	460a      	mov	r2, r1
 8007822:	400b      	ands	r3, r1
 8007824:	4927      	ldr	r1, [pc, #156]	@ (80078c4 <_strtod_l+0x594>)
 8007826:	4682      	mov	sl, r0
 8007828:	428b      	cmp	r3, r1
 800782a:	d898      	bhi.n	800775e <_strtod_l+0x42e>
 800782c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007830:	428b      	cmp	r3, r1
 8007832:	bf86      	itte	hi
 8007834:	f04f 3aff 	movhi.w	sl, #4294967295
 8007838:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80078c8 <_strtod_l+0x598>
 800783c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007840:	2300      	movs	r3, #0
 8007842:	9308      	str	r3, [sp, #32]
 8007844:	e07a      	b.n	800793c <_strtod_l+0x60c>
 8007846:	07e2      	lsls	r2, r4, #31
 8007848:	d505      	bpl.n	8007856 <_strtod_l+0x526>
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fe42 	bl	80004d8 <__aeabi_dmul>
 8007854:	2301      	movs	r3, #1
 8007856:	9a08      	ldr	r2, [sp, #32]
 8007858:	3601      	adds	r6, #1
 800785a:	3208      	adds	r2, #8
 800785c:	1064      	asrs	r4, r4, #1
 800785e:	9208      	str	r2, [sp, #32]
 8007860:	e7cd      	b.n	80077fe <_strtod_l+0x4ce>
 8007862:	d0ed      	beq.n	8007840 <_strtod_l+0x510>
 8007864:	4264      	negs	r4, r4
 8007866:	f014 020f 	ands.w	r2, r4, #15
 800786a:	d00a      	beq.n	8007882 <_strtod_l+0x552>
 800786c:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <_strtod_l+0x58c>)
 800786e:	4650      	mov	r0, sl
 8007870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007874:	4659      	mov	r1, fp
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 ff57 	bl	800072c <__aeabi_ddiv>
 800787e:	4682      	mov	sl, r0
 8007880:	468b      	mov	fp, r1
 8007882:	1124      	asrs	r4, r4, #4
 8007884:	d0dc      	beq.n	8007840 <_strtod_l+0x510>
 8007886:	2c1f      	cmp	r4, #31
 8007888:	dd20      	ble.n	80078cc <_strtod_l+0x59c>
 800788a:	2400      	movs	r4, #0
 800788c:	46a0      	mov	r8, r4
 800788e:	46a1      	mov	r9, r4
 8007890:	940a      	str	r4, [sp, #40]	@ 0x28
 8007892:	2322      	movs	r3, #34	@ 0x22
 8007894:	9a05      	ldr	r2, [sp, #20]
 8007896:	f04f 0a00 	mov.w	sl, #0
 800789a:	f04f 0b00 	mov.w	fp, #0
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e768      	b.n	8007774 <_strtod_l+0x444>
 80078a2:	bf00      	nop
 80078a4:	0800af87 	.word	0x0800af87
 80078a8:	0800b19c 	.word	0x0800b19c
 80078ac:	0800af7f 	.word	0x0800af7f
 80078b0:	0800afb6 	.word	0x0800afb6
 80078b4:	7ff00000 	.word	0x7ff00000
 80078b8:	0800b345 	.word	0x0800b345
 80078bc:	0800b0d0 	.word	0x0800b0d0
 80078c0:	0800b0a8 	.word	0x0800b0a8
 80078c4:	7ca00000 	.word	0x7ca00000
 80078c8:	7fefffff 	.word	0x7fefffff
 80078cc:	f014 0310 	ands.w	r3, r4, #16
 80078d0:	bf18      	it	ne
 80078d2:	236a      	movne	r3, #106	@ 0x6a
 80078d4:	4650      	mov	r0, sl
 80078d6:	9308      	str	r3, [sp, #32]
 80078d8:	4659      	mov	r1, fp
 80078da:	2300      	movs	r3, #0
 80078dc:	4ea9      	ldr	r6, [pc, #676]	@ (8007b84 <_strtod_l+0x854>)
 80078de:	07e2      	lsls	r2, r4, #31
 80078e0:	d504      	bpl.n	80078ec <_strtod_l+0x5bc>
 80078e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078e6:	f7f8 fdf7 	bl	80004d8 <__aeabi_dmul>
 80078ea:	2301      	movs	r3, #1
 80078ec:	1064      	asrs	r4, r4, #1
 80078ee:	f106 0608 	add.w	r6, r6, #8
 80078f2:	d1f4      	bne.n	80078de <_strtod_l+0x5ae>
 80078f4:	b10b      	cbz	r3, 80078fa <_strtod_l+0x5ca>
 80078f6:	4682      	mov	sl, r0
 80078f8:	468b      	mov	fp, r1
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	b1b3      	cbz	r3, 800792c <_strtod_l+0x5fc>
 80078fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007902:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007906:	2b00      	cmp	r3, #0
 8007908:	4659      	mov	r1, fp
 800790a:	dd0f      	ble.n	800792c <_strtod_l+0x5fc>
 800790c:	2b1f      	cmp	r3, #31
 800790e:	dd57      	ble.n	80079c0 <_strtod_l+0x690>
 8007910:	2b34      	cmp	r3, #52	@ 0x34
 8007912:	bfd8      	it	le
 8007914:	f04f 33ff 	movle.w	r3, #4294967295
 8007918:	f04f 0a00 	mov.w	sl, #0
 800791c:	bfcf      	iteee	gt
 800791e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007922:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007926:	4093      	lslle	r3, r2
 8007928:	ea03 0b01 	andle.w	fp, r3, r1
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	4650      	mov	r0, sl
 8007932:	4659      	mov	r1, fp
 8007934:	f7f9 f838 	bl	80009a8 <__aeabi_dcmpeq>
 8007938:	2800      	cmp	r0, #0
 800793a:	d1a6      	bne.n	800788a <_strtod_l+0x55a>
 800793c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800793e:	463a      	mov	r2, r7
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007944:	462b      	mov	r3, r5
 8007946:	9805      	ldr	r0, [sp, #20]
 8007948:	f7ff f8d0 	bl	8006aec <__s2b>
 800794c:	900a      	str	r0, [sp, #40]	@ 0x28
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f af05 	beq.w	800775e <_strtod_l+0x42e>
 8007954:	2400      	movs	r4, #0
 8007956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007958:	eba9 0308 	sub.w	r3, r9, r8
 800795c:	2a00      	cmp	r2, #0
 800795e:	bfa8      	it	ge
 8007960:	2300      	movge	r3, #0
 8007962:	46a0      	mov	r8, r4
 8007964:	9312      	str	r3, [sp, #72]	@ 0x48
 8007966:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800796a:	9316      	str	r3, [sp, #88]	@ 0x58
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	9805      	ldr	r0, [sp, #20]
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	f7ff f813 	bl	800699c <_Balloc>
 8007976:	4681      	mov	r9, r0
 8007978:	2800      	cmp	r0, #0
 800797a:	f43f aef4 	beq.w	8007766 <_strtod_l+0x436>
 800797e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007980:	300c      	adds	r0, #12
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	f103 010c 	add.w	r1, r3, #12
 8007988:	3202      	adds	r2, #2
 800798a:	0092      	lsls	r2, r2, #2
 800798c:	f7fe f8a5 	bl	8005ada <memcpy>
 8007990:	ab1c      	add	r3, sp, #112	@ 0x70
 8007992:	9301      	str	r3, [sp, #4]
 8007994:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	4652      	mov	r2, sl
 800799a:	465b      	mov	r3, fp
 800799c:	9805      	ldr	r0, [sp, #20]
 800799e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079a2:	f7ff fbd5 	bl	8007150 <__d2b>
 80079a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80079a8:	2800      	cmp	r0, #0
 80079aa:	f43f aedc 	beq.w	8007766 <_strtod_l+0x436>
 80079ae:	2101      	movs	r1, #1
 80079b0:	9805      	ldr	r0, [sp, #20]
 80079b2:	f7ff f931 	bl	8006c18 <__i2b>
 80079b6:	4680      	mov	r8, r0
 80079b8:	b948      	cbnz	r0, 80079ce <_strtod_l+0x69e>
 80079ba:	f04f 0800 	mov.w	r8, #0
 80079be:	e6d2      	b.n	8007766 <_strtod_l+0x436>
 80079c0:	f04f 32ff 	mov.w	r2, #4294967295
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	ea03 0a0a 	and.w	sl, r3, sl
 80079cc:	e7ae      	b.n	800792c <_strtod_l+0x5fc>
 80079ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80079d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	bfab      	itete	ge
 80079d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80079d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80079da:	18ef      	addge	r7, r5, r3
 80079dc:	1b5e      	sublt	r6, r3, r5
 80079de:	9b08      	ldr	r3, [sp, #32]
 80079e0:	bfa8      	it	ge
 80079e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80079e4:	eba5 0503 	sub.w	r5, r5, r3
 80079e8:	4415      	add	r5, r2
 80079ea:	4b67      	ldr	r3, [pc, #412]	@ (8007b88 <_strtod_l+0x858>)
 80079ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80079f0:	bfb8      	it	lt
 80079f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80079f4:	429d      	cmp	r5, r3
 80079f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80079fa:	da50      	bge.n	8007a9e <_strtod_l+0x76e>
 80079fc:	1b5b      	subs	r3, r3, r5
 80079fe:	2b1f      	cmp	r3, #31
 8007a00:	f04f 0101 	mov.w	r1, #1
 8007a04:	eba2 0203 	sub.w	r2, r2, r3
 8007a08:	dc3d      	bgt.n	8007a86 <_strtod_l+0x756>
 8007a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a10:	2300      	movs	r3, #0
 8007a12:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a14:	18bd      	adds	r5, r7, r2
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	42af      	cmp	r7, r5
 8007a1a:	4416      	add	r6, r2
 8007a1c:	441e      	add	r6, r3
 8007a1e:	463b      	mov	r3, r7
 8007a20:	bfa8      	it	ge
 8007a22:	462b      	movge	r3, r5
 8007a24:	42b3      	cmp	r3, r6
 8007a26:	bfa8      	it	ge
 8007a28:	4633      	movge	r3, r6
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfc2      	ittt	gt
 8007a2e:	1aed      	subgt	r5, r5, r3
 8007a30:	1af6      	subgt	r6, r6, r3
 8007a32:	1aff      	subgt	r7, r7, r3
 8007a34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd16      	ble.n	8007a68 <_strtod_l+0x738>
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	9805      	ldr	r0, [sp, #20]
 8007a40:	f7ff f9a8 	bl	8006d94 <__pow5mult>
 8007a44:	4680      	mov	r8, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0b7      	beq.n	80079ba <_strtod_l+0x68a>
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a4e:	9805      	ldr	r0, [sp, #20]
 8007a50:	f7ff f8f8 	bl	8006c44 <__multiply>
 8007a54:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f ae85 	beq.w	8007766 <_strtod_l+0x436>
 8007a5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a5e:	9805      	ldr	r0, [sp, #20]
 8007a60:	f7fe ffdc 	bl	8006a1c <_Bfree>
 8007a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a66:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	dc1d      	bgt.n	8007aa8 <_strtod_l+0x778>
 8007a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd23      	ble.n	8007aba <_strtod_l+0x78a>
 8007a72:	4649      	mov	r1, r9
 8007a74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f7ff f98c 	bl	8006d94 <__pow5mult>
 8007a7c:	4681      	mov	r9, r0
 8007a7e:	b9e0      	cbnz	r0, 8007aba <_strtod_l+0x78a>
 8007a80:	f04f 0900 	mov.w	r9, #0
 8007a84:	e66f      	b.n	8007766 <_strtod_l+0x436>
 8007a86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007a8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007a8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007a92:	35e2      	adds	r5, #226	@ 0xe2
 8007a94:	fa01 f305 	lsl.w	r3, r1, r5
 8007a98:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007a9c:	e7ba      	b.n	8007a14 <_strtod_l+0x6e4>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007aa6:	e7b5      	b.n	8007a14 <_strtod_l+0x6e4>
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aac:	9805      	ldr	r0, [sp, #20]
 8007aae:	f7ff f9cb 	bl	8006e48 <__lshift>
 8007ab2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d1d9      	bne.n	8007a6c <_strtod_l+0x73c>
 8007ab8:	e655      	b.n	8007766 <_strtod_l+0x436>
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	dd07      	ble.n	8007ace <_strtod_l+0x79e>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	9805      	ldr	r0, [sp, #20]
 8007ac4:	f7ff f9c0 	bl	8006e48 <__lshift>
 8007ac8:	4681      	mov	r9, r0
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d0d8      	beq.n	8007a80 <_strtod_l+0x750>
 8007ace:	2f00      	cmp	r7, #0
 8007ad0:	dd08      	ble.n	8007ae4 <_strtod_l+0x7b4>
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	463a      	mov	r2, r7
 8007ad6:	9805      	ldr	r0, [sp, #20]
 8007ad8:	f7ff f9b6 	bl	8006e48 <__lshift>
 8007adc:	4680      	mov	r8, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f ae41 	beq.w	8007766 <_strtod_l+0x436>
 8007ae4:	464a      	mov	r2, r9
 8007ae6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ae8:	9805      	ldr	r0, [sp, #20]
 8007aea:	f7ff fa35 	bl	8006f58 <__mdiff>
 8007aee:	4604      	mov	r4, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	f43f ae38 	beq.w	8007766 <_strtod_l+0x436>
 8007af6:	68c3      	ldr	r3, [r0, #12]
 8007af8:	4641      	mov	r1, r8
 8007afa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007afc:	2300      	movs	r3, #0
 8007afe:	60c3      	str	r3, [r0, #12]
 8007b00:	f7ff fa0e 	bl	8006f20 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	da45      	bge.n	8007b94 <_strtod_l+0x864>
 8007b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b0e:	d16b      	bne.n	8007be8 <_strtod_l+0x8b8>
 8007b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d167      	bne.n	8007be8 <_strtod_l+0x8b8>
 8007b18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b1c:	0d1b      	lsrs	r3, r3, #20
 8007b1e:	051b      	lsls	r3, r3, #20
 8007b20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b24:	d960      	bls.n	8007be8 <_strtod_l+0x8b8>
 8007b26:	6963      	ldr	r3, [r4, #20]
 8007b28:	b913      	cbnz	r3, 8007b30 <_strtod_l+0x800>
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	dd5b      	ble.n	8007be8 <_strtod_l+0x8b8>
 8007b30:	4621      	mov	r1, r4
 8007b32:	2201      	movs	r2, #1
 8007b34:	9805      	ldr	r0, [sp, #20]
 8007b36:	f7ff f987 	bl	8006e48 <__lshift>
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	f7ff f9ef 	bl	8006f20 <__mcmp>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	dd50      	ble.n	8007be8 <_strtod_l+0x8b8>
 8007b46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b4a:	9a08      	ldr	r2, [sp, #32]
 8007b4c:	0d1b      	lsrs	r3, r3, #20
 8007b4e:	051b      	lsls	r3, r3, #20
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	d06a      	beq.n	8007c2a <_strtod_l+0x8fa>
 8007b54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b58:	d867      	bhi.n	8007c2a <_strtod_l+0x8fa>
 8007b5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b5e:	f67f ae98 	bls.w	8007892 <_strtod_l+0x562>
 8007b62:	4650      	mov	r0, sl
 8007b64:	4659      	mov	r1, fp
 8007b66:	4b09      	ldr	r3, [pc, #36]	@ (8007b8c <_strtod_l+0x85c>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f7f8 fcb5 	bl	80004d8 <__aeabi_dmul>
 8007b6e:	4b08      	ldr	r3, [pc, #32]	@ (8007b90 <_strtod_l+0x860>)
 8007b70:	4682      	mov	sl, r0
 8007b72:	400b      	ands	r3, r1
 8007b74:	468b      	mov	fp, r1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f47f ae00 	bne.w	800777c <_strtod_l+0x44c>
 8007b7c:	2322      	movs	r3, #34	@ 0x22
 8007b7e:	9a05      	ldr	r2, [sp, #20]
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e5fb      	b.n	800777c <_strtod_l+0x44c>
 8007b84:	0800b1c8 	.word	0x0800b1c8
 8007b88:	fffffc02 	.word	0xfffffc02
 8007b8c:	39500000 	.word	0x39500000
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b98:	d165      	bne.n	8007c66 <_strtod_l+0x936>
 8007b9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007b9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ba0:	b35a      	cbz	r2, 8007bfa <_strtod_l+0x8ca>
 8007ba2:	4a99      	ldr	r2, [pc, #612]	@ (8007e08 <_strtod_l+0xad8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d12b      	bne.n	8007c00 <_strtod_l+0x8d0>
 8007ba8:	9b08      	ldr	r3, [sp, #32]
 8007baa:	4651      	mov	r1, sl
 8007bac:	b303      	cbz	r3, 8007bf0 <_strtod_l+0x8c0>
 8007bae:	465a      	mov	r2, fp
 8007bb0:	4b96      	ldr	r3, [pc, #600]	@ (8007e0c <_strtod_l+0xadc>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbc:	d81b      	bhi.n	8007bf6 <_strtod_l+0x8c6>
 8007bbe:	0d1b      	lsrs	r3, r3, #20
 8007bc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	4299      	cmp	r1, r3
 8007bca:	d119      	bne.n	8007c00 <_strtod_l+0x8d0>
 8007bcc:	4b90      	ldr	r3, [pc, #576]	@ (8007e10 <_strtod_l+0xae0>)
 8007bce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d102      	bne.n	8007bda <_strtod_l+0x8aa>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	f43f adc6 	beq.w	8007766 <_strtod_l+0x436>
 8007bda:	f04f 0a00 	mov.w	sl, #0
 8007bde:	4b8b      	ldr	r3, [pc, #556]	@ (8007e0c <_strtod_l+0xadc>)
 8007be0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007be2:	401a      	ands	r2, r3
 8007be4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1b9      	bne.n	8007b62 <_strtod_l+0x832>
 8007bee:	e5c5      	b.n	800777c <_strtod_l+0x44c>
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	e7e8      	b.n	8007bc8 <_strtod_l+0x898>
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	e7e6      	b.n	8007bc8 <_strtod_l+0x898>
 8007bfa:	ea53 030a 	orrs.w	r3, r3, sl
 8007bfe:	d0a2      	beq.n	8007b46 <_strtod_l+0x816>
 8007c00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c02:	b1db      	cbz	r3, 8007c3c <_strtod_l+0x90c>
 8007c04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c06:	4213      	tst	r3, r2
 8007c08:	d0ee      	beq.n	8007be8 <_strtod_l+0x8b8>
 8007c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c0c:	4650      	mov	r0, sl
 8007c0e:	4659      	mov	r1, fp
 8007c10:	9a08      	ldr	r2, [sp, #32]
 8007c12:	b1bb      	cbz	r3, 8007c44 <_strtod_l+0x914>
 8007c14:	f7ff fb68 	bl	80072e8 <sulp>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c20:	f7f8 faa4 	bl	800016c <__adddf3>
 8007c24:	4682      	mov	sl, r0
 8007c26:	468b      	mov	fp, r1
 8007c28:	e7de      	b.n	8007be8 <_strtod_l+0x8b8>
 8007c2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c32:	f04f 3aff 	mov.w	sl, #4294967295
 8007c36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c3a:	e7d5      	b.n	8007be8 <_strtod_l+0x8b8>
 8007c3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c3e:	ea13 0f0a 	tst.w	r3, sl
 8007c42:	e7e1      	b.n	8007c08 <_strtod_l+0x8d8>
 8007c44:	f7ff fb50 	bl	80072e8 <sulp>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c50:	f7f8 fa8a 	bl	8000168 <__aeabi_dsub>
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	4682      	mov	sl, r0
 8007c5a:	468b      	mov	fp, r1
 8007c5c:	f7f8 fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0c1      	beq.n	8007be8 <_strtod_l+0x8b8>
 8007c64:	e615      	b.n	8007892 <_strtod_l+0x562>
 8007c66:	4641      	mov	r1, r8
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f7ff fac9 	bl	8007200 <__ratio>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	f7f8 feaa 	bl	80009d0 <__aeabi_dcmple>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d06d      	beq.n	8007d5c <_strtod_l+0xa2c>
 8007c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d178      	bne.n	8007d78 <_strtod_l+0xa48>
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	d156      	bne.n	8007d3a <_strtod_l+0xa0a>
 8007c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d158      	bne.n	8007d48 <_strtod_l+0xa18>
 8007c96:	2200      	movs	r2, #0
 8007c98:	4630      	mov	r0, r6
 8007c9a:	4639      	mov	r1, r7
 8007c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8007e14 <_strtod_l+0xae4>)
 8007c9e:	f7f8 fe8d 	bl	80009bc <__aeabi_dcmplt>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d157      	bne.n	8007d56 <_strtod_l+0xa26>
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	4639      	mov	r1, r7
 8007caa:	2200      	movs	r2, #0
 8007cac:	4b5a      	ldr	r3, [pc, #360]	@ (8007e18 <_strtod_l+0xae8>)
 8007cae:	f7f8 fc13 	bl	80004d8 <__aeabi_dmul>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	460f      	mov	r7, r1
 8007cb6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cba:	9606      	str	r6, [sp, #24]
 8007cbc:	9307      	str	r3, [sp, #28]
 8007cbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cc2:	4d52      	ldr	r5, [pc, #328]	@ (8007e0c <_strtod_l+0xadc>)
 8007cc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cca:	401d      	ands	r5, r3
 8007ccc:	4b53      	ldr	r3, [pc, #332]	@ (8007e1c <_strtod_l+0xaec>)
 8007cce:	429d      	cmp	r5, r3
 8007cd0:	f040 80aa 	bne.w	8007e28 <_strtod_l+0xaf8>
 8007cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cd6:	4650      	mov	r0, sl
 8007cd8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007cdc:	4659      	mov	r1, fp
 8007cde:	f7ff f9cf 	bl	8007080 <__ulp>
 8007ce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ce6:	f7f8 fbf7 	bl	80004d8 <__aeabi_dmul>
 8007cea:	4652      	mov	r2, sl
 8007cec:	465b      	mov	r3, fp
 8007cee:	f7f8 fa3d 	bl	800016c <__adddf3>
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	4945      	ldr	r1, [pc, #276]	@ (8007e0c <_strtod_l+0xadc>)
 8007cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8007e20 <_strtod_l+0xaf0>)
 8007cf8:	4019      	ands	r1, r3
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	d942      	bls.n	8007d86 <_strtod_l+0xa56>
 8007d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d02:	4b43      	ldr	r3, [pc, #268]	@ (8007e10 <_strtod_l+0xae0>)
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d103      	bne.n	8007d10 <_strtod_l+0x9e0>
 8007d08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f43f ad2b 	beq.w	8007766 <_strtod_l+0x436>
 8007d10:	f04f 3aff 	mov.w	sl, #4294967295
 8007d14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007e10 <_strtod_l+0xae0>
 8007d18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d1a:	9805      	ldr	r0, [sp, #20]
 8007d1c:	f7fe fe7e 	bl	8006a1c <_Bfree>
 8007d20:	4649      	mov	r1, r9
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	f7fe fe7a 	bl	8006a1c <_Bfree>
 8007d28:	4641      	mov	r1, r8
 8007d2a:	9805      	ldr	r0, [sp, #20]
 8007d2c:	f7fe fe76 	bl	8006a1c <_Bfree>
 8007d30:	4621      	mov	r1, r4
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	f7fe fe72 	bl	8006a1c <_Bfree>
 8007d38:	e618      	b.n	800796c <_strtod_l+0x63c>
 8007d3a:	f1ba 0f01 	cmp.w	sl, #1
 8007d3e:	d103      	bne.n	8007d48 <_strtod_l+0xa18>
 8007d40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f43f ada5 	beq.w	8007892 <_strtod_l+0x562>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4b36      	ldr	r3, [pc, #216]	@ (8007e24 <_strtod_l+0xaf4>)
 8007d4c:	2600      	movs	r6, #0
 8007d4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d52:	4f30      	ldr	r7, [pc, #192]	@ (8007e14 <_strtod_l+0xae4>)
 8007d54:	e7b3      	b.n	8007cbe <_strtod_l+0x98e>
 8007d56:	2600      	movs	r6, #0
 8007d58:	4f2f      	ldr	r7, [pc, #188]	@ (8007e18 <_strtod_l+0xae8>)
 8007d5a:	e7ac      	b.n	8007cb6 <_strtod_l+0x986>
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	4639      	mov	r1, r7
 8007d60:	4b2d      	ldr	r3, [pc, #180]	@ (8007e18 <_strtod_l+0xae8>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	f7f8 fbb8 	bl	80004d8 <__aeabi_dmul>
 8007d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460f      	mov	r7, r1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0a1      	beq.n	8007cb6 <_strtod_l+0x986>
 8007d72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d76:	e7a2      	b.n	8007cbe <_strtod_l+0x98e>
 8007d78:	2200      	movs	r2, #0
 8007d7a:	4b26      	ldr	r3, [pc, #152]	@ (8007e14 <_strtod_l+0xae4>)
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d84:	e79b      	b.n	8007cbe <_strtod_l+0x98e>
 8007d86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007d8a:	9b08      	ldr	r3, [sp, #32]
 8007d8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1c1      	bne.n	8007d18 <_strtod_l+0x9e8>
 8007d94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d98:	0d1b      	lsrs	r3, r3, #20
 8007d9a:	051b      	lsls	r3, r3, #20
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d1bb      	bne.n	8007d18 <_strtod_l+0x9e8>
 8007da0:	4630      	mov	r0, r6
 8007da2:	4639      	mov	r1, r7
 8007da4:	f7f9 f93e 	bl	8001024 <__aeabi_d2lz>
 8007da8:	f7f8 fb68 	bl	800047c <__aeabi_l2d>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 f9d8 	bl	8000168 <__aeabi_dsub>
 8007db8:	460b      	mov	r3, r1
 8007dba:	4602      	mov	r2, r0
 8007dbc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007dc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc6:	ea46 060a 	orr.w	r6, r6, sl
 8007dca:	431e      	orrs	r6, r3
 8007dcc:	d069      	beq.n	8007ea2 <_strtod_l+0xb72>
 8007dce:	a30a      	add	r3, pc, #40	@ (adr r3, 8007df8 <_strtod_l+0xac8>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fdf2 	bl	80009bc <__aeabi_dcmplt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f47f accf 	bne.w	800777c <_strtod_l+0x44c>
 8007dde:	a308      	add	r3, pc, #32	@ (adr r3, 8007e00 <_strtod_l+0xad0>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de8:	f7f8 fe06 	bl	80009f8 <__aeabi_dcmpgt>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d093      	beq.n	8007d18 <_strtod_l+0x9e8>
 8007df0:	e4c4      	b.n	800777c <_strtod_l+0x44c>
 8007df2:	bf00      	nop
 8007df4:	f3af 8000 	nop.w
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fdfffff 	.word	0x3fdfffff
 8007e00:	35afe535 	.word	0x35afe535
 8007e04:	3fe00000 	.word	0x3fe00000
 8007e08:	000fffff 	.word	0x000fffff
 8007e0c:	7ff00000 	.word	0x7ff00000
 8007e10:	7fefffff 	.word	0x7fefffff
 8007e14:	3ff00000 	.word	0x3ff00000
 8007e18:	3fe00000 	.word	0x3fe00000
 8007e1c:	7fe00000 	.word	0x7fe00000
 8007e20:	7c9fffff 	.word	0x7c9fffff
 8007e24:	bff00000 	.word	0xbff00000
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	b323      	cbz	r3, 8007e76 <_strtod_l+0xb46>
 8007e2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e30:	d821      	bhi.n	8007e76 <_strtod_l+0xb46>
 8007e32:	a327      	add	r3, pc, #156	@ (adr r3, 8007ed0 <_strtod_l+0xba0>)
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 fdc8 	bl	80009d0 <__aeabi_dcmple>
 8007e40:	b1a0      	cbz	r0, 8007e6c <_strtod_l+0xb3c>
 8007e42:	4639      	mov	r1, r7
 8007e44:	4630      	mov	r0, r6
 8007e46:	f7f8 fe1f 	bl	8000a88 <__aeabi_d2uiz>
 8007e4a:	2801      	cmp	r0, #1
 8007e4c:	bf38      	it	cc
 8007e4e:	2001      	movcc	r0, #1
 8007e50:	f7f8 fac8 	bl	80003e4 <__aeabi_ui2d>
 8007e54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e56:	4606      	mov	r6, r0
 8007e58:	460f      	mov	r7, r1
 8007e5a:	b9fb      	cbnz	r3, 8007e9c <_strtod_l+0xb6c>
 8007e5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e60:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e62:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007e68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007e72:	1b5b      	subs	r3, r3, r5
 8007e74:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007e7e:	f7ff f8ff 	bl	8007080 <__ulp>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4650      	mov	r0, sl
 8007e88:	4659      	mov	r1, fp
 8007e8a:	f7f8 fb25 	bl	80004d8 <__aeabi_dmul>
 8007e8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007e92:	f7f8 f96b 	bl	800016c <__adddf3>
 8007e96:	4682      	mov	sl, r0
 8007e98:	468b      	mov	fp, r1
 8007e9a:	e776      	b.n	8007d8a <_strtod_l+0xa5a>
 8007e9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ea0:	e7e0      	b.n	8007e64 <_strtod_l+0xb34>
 8007ea2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007ed8 <_strtod_l+0xba8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 fd88 	bl	80009bc <__aeabi_dcmplt>
 8007eac:	e79e      	b.n	8007dec <_strtod_l+0xabc>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	f7ff ba77 	b.w	80073aa <_strtod_l+0x7a>
 8007ebc:	2a65      	cmp	r2, #101	@ 0x65
 8007ebe:	f43f ab6e 	beq.w	800759e <_strtod_l+0x26e>
 8007ec2:	2a45      	cmp	r2, #69	@ 0x45
 8007ec4:	f43f ab6b 	beq.w	800759e <_strtod_l+0x26e>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f7ff bba6 	b.w	800761a <_strtod_l+0x2ea>
 8007ece:	bf00      	nop
 8007ed0:	ffc00000 	.word	0xffc00000
 8007ed4:	41dfffff 	.word	0x41dfffff
 8007ed8:	94a03595 	.word	0x94a03595
 8007edc:	3fcfffff 	.word	0x3fcfffff

08007ee0 <_strtod_r>:
 8007ee0:	4b01      	ldr	r3, [pc, #4]	@ (8007ee8 <_strtod_r+0x8>)
 8007ee2:	f7ff ba25 	b.w	8007330 <_strtod_l>
 8007ee6:	bf00      	nop
 8007ee8:	200000f8 	.word	0x200000f8

08007eec <_strtol_l.constprop.0>:
 8007eec:	2b24      	cmp	r3, #36	@ 0x24
 8007eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef2:	4686      	mov	lr, r0
 8007ef4:	4690      	mov	r8, r2
 8007ef6:	d801      	bhi.n	8007efc <_strtol_l.constprop.0+0x10>
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d106      	bne.n	8007f0a <_strtol_l.constprop.0+0x1e>
 8007efc:	f7fd fdb2 	bl	8005a64 <__errno>
 8007f00:	2316      	movs	r3, #22
 8007f02:	6003      	str	r3, [r0, #0]
 8007f04:	2000      	movs	r0, #0
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	4833      	ldr	r0, [pc, #204]	@ (8007fdc <_strtol_l.constprop.0+0xf0>)
 8007f0e:	462a      	mov	r2, r5
 8007f10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f14:	5d06      	ldrb	r6, [r0, r4]
 8007f16:	f016 0608 	ands.w	r6, r6, #8
 8007f1a:	d1f8      	bne.n	8007f0e <_strtol_l.constprop.0+0x22>
 8007f1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f1e:	d12d      	bne.n	8007f7c <_strtol_l.constprop.0+0x90>
 8007f20:	2601      	movs	r6, #1
 8007f22:	782c      	ldrb	r4, [r5, #0]
 8007f24:	1c95      	adds	r5, r2, #2
 8007f26:	f033 0210 	bics.w	r2, r3, #16
 8007f2a:	d109      	bne.n	8007f40 <_strtol_l.constprop.0+0x54>
 8007f2c:	2c30      	cmp	r4, #48	@ 0x30
 8007f2e:	d12a      	bne.n	8007f86 <_strtol_l.constprop.0+0x9a>
 8007f30:	782a      	ldrb	r2, [r5, #0]
 8007f32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f36:	2a58      	cmp	r2, #88	@ 0x58
 8007f38:	d125      	bne.n	8007f86 <_strtol_l.constprop.0+0x9a>
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	786c      	ldrb	r4, [r5, #1]
 8007f3e:	3502      	adds	r5, #2
 8007f40:	2200      	movs	r2, #0
 8007f42:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f46:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f4a:	fbbc f9f3 	udiv	r9, ip, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f58:	2f09      	cmp	r7, #9
 8007f5a:	d81b      	bhi.n	8007f94 <_strtol_l.constprop.0+0xa8>
 8007f5c:	463c      	mov	r4, r7
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	dd27      	ble.n	8007fb2 <_strtol_l.constprop.0+0xc6>
 8007f62:	1c57      	adds	r7, r2, #1
 8007f64:	d007      	beq.n	8007f76 <_strtol_l.constprop.0+0x8a>
 8007f66:	4581      	cmp	r9, r0
 8007f68:	d320      	bcc.n	8007fac <_strtol_l.constprop.0+0xc0>
 8007f6a:	d101      	bne.n	8007f70 <_strtol_l.constprop.0+0x84>
 8007f6c:	45a2      	cmp	sl, r4
 8007f6e:	db1d      	blt.n	8007fac <_strtol_l.constprop.0+0xc0>
 8007f70:	2201      	movs	r2, #1
 8007f72:	fb00 4003 	mla	r0, r0, r3, r4
 8007f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f7a:	e7eb      	b.n	8007f54 <_strtol_l.constprop.0+0x68>
 8007f7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007f7e:	bf04      	itt	eq
 8007f80:	782c      	ldrbeq	r4, [r5, #0]
 8007f82:	1c95      	addeq	r5, r2, #2
 8007f84:	e7cf      	b.n	8007f26 <_strtol_l.constprop.0+0x3a>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1da      	bne.n	8007f40 <_strtol_l.constprop.0+0x54>
 8007f8a:	2c30      	cmp	r4, #48	@ 0x30
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2308      	moveq	r3, #8
 8007f90:	230a      	movne	r3, #10
 8007f92:	e7d5      	b.n	8007f40 <_strtol_l.constprop.0+0x54>
 8007f94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007f98:	2f19      	cmp	r7, #25
 8007f9a:	d801      	bhi.n	8007fa0 <_strtol_l.constprop.0+0xb4>
 8007f9c:	3c37      	subs	r4, #55	@ 0x37
 8007f9e:	e7de      	b.n	8007f5e <_strtol_l.constprop.0+0x72>
 8007fa0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fa4:	2f19      	cmp	r7, #25
 8007fa6:	d804      	bhi.n	8007fb2 <_strtol_l.constprop.0+0xc6>
 8007fa8:	3c57      	subs	r4, #87	@ 0x57
 8007faa:	e7d8      	b.n	8007f5e <_strtol_l.constprop.0+0x72>
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	e7e1      	b.n	8007f76 <_strtol_l.constprop.0+0x8a>
 8007fb2:	1c53      	adds	r3, r2, #1
 8007fb4:	d108      	bne.n	8007fc8 <_strtol_l.constprop.0+0xdc>
 8007fb6:	2322      	movs	r3, #34	@ 0x22
 8007fb8:	4660      	mov	r0, ip
 8007fba:	f8ce 3000 	str.w	r3, [lr]
 8007fbe:	f1b8 0f00 	cmp.w	r8, #0
 8007fc2:	d0a0      	beq.n	8007f06 <_strtol_l.constprop.0+0x1a>
 8007fc4:	1e69      	subs	r1, r5, #1
 8007fc6:	e006      	b.n	8007fd6 <_strtol_l.constprop.0+0xea>
 8007fc8:	b106      	cbz	r6, 8007fcc <_strtol_l.constprop.0+0xe0>
 8007fca:	4240      	negs	r0, r0
 8007fcc:	f1b8 0f00 	cmp.w	r8, #0
 8007fd0:	d099      	beq.n	8007f06 <_strtol_l.constprop.0+0x1a>
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	d1f6      	bne.n	8007fc4 <_strtol_l.constprop.0+0xd8>
 8007fd6:	f8c8 1000 	str.w	r1, [r8]
 8007fda:	e794      	b.n	8007f06 <_strtol_l.constprop.0+0x1a>
 8007fdc:	0800b1f1 	.word	0x0800b1f1

08007fe0 <_strtol_r>:
 8007fe0:	f7ff bf84 	b.w	8007eec <_strtol_l.constprop.0>

08007fe4 <__ssputs_r>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	461f      	mov	r7, r3
 8007fea:	688e      	ldr	r6, [r1, #8]
 8007fec:	4682      	mov	sl, r0
 8007fee:	42be      	cmp	r6, r7
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	4690      	mov	r8, r2
 8007ff4:	680b      	ldr	r3, [r1, #0]
 8007ff6:	d82d      	bhi.n	8008054 <__ssputs_r+0x70>
 8007ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ffc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008000:	d026      	beq.n	8008050 <__ssputs_r+0x6c>
 8008002:	6965      	ldr	r5, [r4, #20]
 8008004:	6909      	ldr	r1, [r1, #16]
 8008006:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800800a:	eba3 0901 	sub.w	r9, r3, r1
 800800e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008012:	1c7b      	adds	r3, r7, #1
 8008014:	444b      	add	r3, r9
 8008016:	106d      	asrs	r5, r5, #1
 8008018:	429d      	cmp	r5, r3
 800801a:	bf38      	it	cc
 800801c:	461d      	movcc	r5, r3
 800801e:	0553      	lsls	r3, r2, #21
 8008020:	d527      	bpl.n	8008072 <__ssputs_r+0x8e>
 8008022:	4629      	mov	r1, r5
 8008024:	f7fe fc2e 	bl	8006884 <_malloc_r>
 8008028:	4606      	mov	r6, r0
 800802a:	b360      	cbz	r0, 8008086 <__ssputs_r+0xa2>
 800802c:	464a      	mov	r2, r9
 800802e:	6921      	ldr	r1, [r4, #16]
 8008030:	f7fd fd53 	bl	8005ada <memcpy>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	6126      	str	r6, [r4, #16]
 8008042:	444e      	add	r6, r9
 8008044:	6026      	str	r6, [r4, #0]
 8008046:	463e      	mov	r6, r7
 8008048:	6165      	str	r5, [r4, #20]
 800804a:	eba5 0509 	sub.w	r5, r5, r9
 800804e:	60a5      	str	r5, [r4, #8]
 8008050:	42be      	cmp	r6, r7
 8008052:	d900      	bls.n	8008056 <__ssputs_r+0x72>
 8008054:	463e      	mov	r6, r7
 8008056:	4632      	mov	r2, r6
 8008058:	4641      	mov	r1, r8
 800805a:	6820      	ldr	r0, [r4, #0]
 800805c:	f7fd fc95 	bl	800598a <memmove>
 8008060:	2000      	movs	r0, #0
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	1b9b      	subs	r3, r3, r6
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	4433      	add	r3, r6
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008072:	462a      	mov	r2, r5
 8008074:	f000 fd5b 	bl	8008b2e <_realloc_r>
 8008078:	4606      	mov	r6, r0
 800807a:	2800      	cmp	r0, #0
 800807c:	d1e0      	bne.n	8008040 <__ssputs_r+0x5c>
 800807e:	4650      	mov	r0, sl
 8008080:	6921      	ldr	r1, [r4, #16]
 8008082:	f7fe fb8d 	bl	80067a0 <_free_r>
 8008086:	230c      	movs	r3, #12
 8008088:	f8ca 3000 	str.w	r3, [sl]
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	e7e9      	b.n	800806e <__ssputs_r+0x8a>
	...

0800809c <_svfiprintf_r>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	4698      	mov	r8, r3
 80080a2:	898b      	ldrh	r3, [r1, #12]
 80080a4:	4607      	mov	r7, r0
 80080a6:	061b      	lsls	r3, r3, #24
 80080a8:	460d      	mov	r5, r1
 80080aa:	4614      	mov	r4, r2
 80080ac:	b09d      	sub	sp, #116	@ 0x74
 80080ae:	d510      	bpl.n	80080d2 <_svfiprintf_r+0x36>
 80080b0:	690b      	ldr	r3, [r1, #16]
 80080b2:	b973      	cbnz	r3, 80080d2 <_svfiprintf_r+0x36>
 80080b4:	2140      	movs	r1, #64	@ 0x40
 80080b6:	f7fe fbe5 	bl	8006884 <_malloc_r>
 80080ba:	6028      	str	r0, [r5, #0]
 80080bc:	6128      	str	r0, [r5, #16]
 80080be:	b930      	cbnz	r0, 80080ce <_svfiprintf_r+0x32>
 80080c0:	230c      	movs	r3, #12
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	b01d      	add	sp, #116	@ 0x74
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	2340      	movs	r3, #64	@ 0x40
 80080d0:	616b      	str	r3, [r5, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d6:	2320      	movs	r3, #32
 80080d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080dc:	2330      	movs	r3, #48	@ 0x30
 80080de:	f04f 0901 	mov.w	r9, #1
 80080e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008280 <_svfiprintf_r+0x1e4>
 80080ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080ee:	4623      	mov	r3, r4
 80080f0:	469a      	mov	sl, r3
 80080f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f6:	b10a      	cbz	r2, 80080fc <_svfiprintf_r+0x60>
 80080f8:	2a25      	cmp	r2, #37	@ 0x25
 80080fa:	d1f9      	bne.n	80080f0 <_svfiprintf_r+0x54>
 80080fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008100:	d00b      	beq.n	800811a <_svfiprintf_r+0x7e>
 8008102:	465b      	mov	r3, fp
 8008104:	4622      	mov	r2, r4
 8008106:	4629      	mov	r1, r5
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff ff6b 	bl	8007fe4 <__ssputs_r>
 800810e:	3001      	adds	r0, #1
 8008110:	f000 80a7 	beq.w	8008262 <_svfiprintf_r+0x1c6>
 8008114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008116:	445a      	add	r2, fp
 8008118:	9209      	str	r2, [sp, #36]	@ 0x24
 800811a:	f89a 3000 	ldrb.w	r3, [sl]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 809f 	beq.w	8008262 <_svfiprintf_r+0x1c6>
 8008124:	2300      	movs	r3, #0
 8008126:	f04f 32ff 	mov.w	r2, #4294967295
 800812a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812e:	f10a 0a01 	add.w	sl, sl, #1
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	9307      	str	r3, [sp, #28]
 8008136:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800813a:	931a      	str	r3, [sp, #104]	@ 0x68
 800813c:	4654      	mov	r4, sl
 800813e:	2205      	movs	r2, #5
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	484e      	ldr	r0, [pc, #312]	@ (8008280 <_svfiprintf_r+0x1e4>)
 8008146:	f7fd fcba 	bl	8005abe <memchr>
 800814a:	9a04      	ldr	r2, [sp, #16]
 800814c:	b9d8      	cbnz	r0, 8008186 <_svfiprintf_r+0xea>
 800814e:	06d0      	lsls	r0, r2, #27
 8008150:	bf44      	itt	mi
 8008152:	2320      	movmi	r3, #32
 8008154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008158:	0711      	lsls	r1, r2, #28
 800815a:	bf44      	itt	mi
 800815c:	232b      	movmi	r3, #43	@ 0x2b
 800815e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b2a      	cmp	r3, #42	@ 0x2a
 8008168:	d015      	beq.n	8008196 <_svfiprintf_r+0xfa>
 800816a:	4654      	mov	r4, sl
 800816c:	2000      	movs	r0, #0
 800816e:	f04f 0c0a 	mov.w	ip, #10
 8008172:	9a07      	ldr	r2, [sp, #28]
 8008174:	4621      	mov	r1, r4
 8008176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817a:	3b30      	subs	r3, #48	@ 0x30
 800817c:	2b09      	cmp	r3, #9
 800817e:	d94b      	bls.n	8008218 <_svfiprintf_r+0x17c>
 8008180:	b1b0      	cbz	r0, 80081b0 <_svfiprintf_r+0x114>
 8008182:	9207      	str	r2, [sp, #28]
 8008184:	e014      	b.n	80081b0 <_svfiprintf_r+0x114>
 8008186:	eba0 0308 	sub.w	r3, r0, r8
 800818a:	fa09 f303 	lsl.w	r3, r9, r3
 800818e:	4313      	orrs	r3, r2
 8008190:	46a2      	mov	sl, r4
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	e7d2      	b.n	800813c <_svfiprintf_r+0xa0>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	1d19      	adds	r1, r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	9103      	str	r1, [sp, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bfbb      	ittet	lt
 80081a2:	425b      	neglt	r3, r3
 80081a4:	f042 0202 	orrlt.w	r2, r2, #2
 80081a8:	9307      	strge	r3, [sp, #28]
 80081aa:	9307      	strlt	r3, [sp, #28]
 80081ac:	bfb8      	it	lt
 80081ae:	9204      	strlt	r2, [sp, #16]
 80081b0:	7823      	ldrb	r3, [r4, #0]
 80081b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081b4:	d10a      	bne.n	80081cc <_svfiprintf_r+0x130>
 80081b6:	7863      	ldrb	r3, [r4, #1]
 80081b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80081ba:	d132      	bne.n	8008222 <_svfiprintf_r+0x186>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	3402      	adds	r4, #2
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	9203      	str	r2, [sp, #12]
 80081c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081ca:	9305      	str	r3, [sp, #20]
 80081cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008284 <_svfiprintf_r+0x1e8>
 80081d0:	2203      	movs	r2, #3
 80081d2:	4650      	mov	r0, sl
 80081d4:	7821      	ldrb	r1, [r4, #0]
 80081d6:	f7fd fc72 	bl	8005abe <memchr>
 80081da:	b138      	cbz	r0, 80081ec <_svfiprintf_r+0x150>
 80081dc:	2240      	movs	r2, #64	@ 0x40
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	eba0 000a 	sub.w	r0, r0, sl
 80081e4:	4082      	lsls	r2, r0
 80081e6:	4313      	orrs	r3, r2
 80081e8:	3401      	adds	r4, #1
 80081ea:	9304      	str	r3, [sp, #16]
 80081ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f0:	2206      	movs	r2, #6
 80081f2:	4825      	ldr	r0, [pc, #148]	@ (8008288 <_svfiprintf_r+0x1ec>)
 80081f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081f8:	f7fd fc61 	bl	8005abe <memchr>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d036      	beq.n	800826e <_svfiprintf_r+0x1d2>
 8008200:	4b22      	ldr	r3, [pc, #136]	@ (800828c <_svfiprintf_r+0x1f0>)
 8008202:	bb1b      	cbnz	r3, 800824c <_svfiprintf_r+0x1b0>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	3307      	adds	r3, #7
 8008208:	f023 0307 	bic.w	r3, r3, #7
 800820c:	3308      	adds	r3, #8
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008212:	4433      	add	r3, r6
 8008214:	9309      	str	r3, [sp, #36]	@ 0x24
 8008216:	e76a      	b.n	80080ee <_svfiprintf_r+0x52>
 8008218:	460c      	mov	r4, r1
 800821a:	2001      	movs	r0, #1
 800821c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008220:	e7a8      	b.n	8008174 <_svfiprintf_r+0xd8>
 8008222:	2300      	movs	r3, #0
 8008224:	f04f 0c0a 	mov.w	ip, #10
 8008228:	4619      	mov	r1, r3
 800822a:	3401      	adds	r4, #1
 800822c:	9305      	str	r3, [sp, #20]
 800822e:	4620      	mov	r0, r4
 8008230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008234:	3a30      	subs	r2, #48	@ 0x30
 8008236:	2a09      	cmp	r2, #9
 8008238:	d903      	bls.n	8008242 <_svfiprintf_r+0x1a6>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0c6      	beq.n	80081cc <_svfiprintf_r+0x130>
 800823e:	9105      	str	r1, [sp, #20]
 8008240:	e7c4      	b.n	80081cc <_svfiprintf_r+0x130>
 8008242:	4604      	mov	r4, r0
 8008244:	2301      	movs	r3, #1
 8008246:	fb0c 2101 	mla	r1, ip, r1, r2
 800824a:	e7f0      	b.n	800822e <_svfiprintf_r+0x192>
 800824c:	ab03      	add	r3, sp, #12
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	462a      	mov	r2, r5
 8008252:	4638      	mov	r0, r7
 8008254:	4b0e      	ldr	r3, [pc, #56]	@ (8008290 <_svfiprintf_r+0x1f4>)
 8008256:	a904      	add	r1, sp, #16
 8008258:	f7fc fca4 	bl	8004ba4 <_printf_float>
 800825c:	1c42      	adds	r2, r0, #1
 800825e:	4606      	mov	r6, r0
 8008260:	d1d6      	bne.n	8008210 <_svfiprintf_r+0x174>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	065b      	lsls	r3, r3, #25
 8008266:	f53f af2d 	bmi.w	80080c4 <_svfiprintf_r+0x28>
 800826a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800826c:	e72c      	b.n	80080c8 <_svfiprintf_r+0x2c>
 800826e:	ab03      	add	r3, sp, #12
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	462a      	mov	r2, r5
 8008274:	4638      	mov	r0, r7
 8008276:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <_svfiprintf_r+0x1f4>)
 8008278:	a904      	add	r1, sp, #16
 800827a:	f7fc ff31 	bl	80050e0 <_printf_i>
 800827e:	e7ed      	b.n	800825c <_svfiprintf_r+0x1c0>
 8008280:	0800b2f1 	.word	0x0800b2f1
 8008284:	0800b2f7 	.word	0x0800b2f7
 8008288:	0800b2fb 	.word	0x0800b2fb
 800828c:	08004ba5 	.word	0x08004ba5
 8008290:	08007fe5 	.word	0x08007fe5

08008294 <__sflush_r>:
 8008294:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	0716      	lsls	r6, r2, #28
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	d454      	bmi.n	800834c <__sflush_r+0xb8>
 80082a2:	684b      	ldr	r3, [r1, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dc02      	bgt.n	80082ae <__sflush_r+0x1a>
 80082a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd48      	ble.n	8008340 <__sflush_r+0xac>
 80082ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082b0:	2e00      	cmp	r6, #0
 80082b2:	d045      	beq.n	8008340 <__sflush_r+0xac>
 80082b4:	2300      	movs	r3, #0
 80082b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082ba:	682f      	ldr	r7, [r5, #0]
 80082bc:	6a21      	ldr	r1, [r4, #32]
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	d030      	beq.n	8008324 <__sflush_r+0x90>
 80082c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	0759      	lsls	r1, r3, #29
 80082c8:	d505      	bpl.n	80082d6 <__sflush_r+0x42>
 80082ca:	6863      	ldr	r3, [r4, #4]
 80082cc:	1ad2      	subs	r2, r2, r3
 80082ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082d0:	b10b      	cbz	r3, 80082d6 <__sflush_r+0x42>
 80082d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082d4:	1ad2      	subs	r2, r2, r3
 80082d6:	2300      	movs	r3, #0
 80082d8:	4628      	mov	r0, r5
 80082da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082dc:	6a21      	ldr	r1, [r4, #32]
 80082de:	47b0      	blx	r6
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	d106      	bne.n	80082f4 <__sflush_r+0x60>
 80082e6:	6829      	ldr	r1, [r5, #0]
 80082e8:	291d      	cmp	r1, #29
 80082ea:	d82b      	bhi.n	8008344 <__sflush_r+0xb0>
 80082ec:	4a28      	ldr	r2, [pc, #160]	@ (8008390 <__sflush_r+0xfc>)
 80082ee:	410a      	asrs	r2, r1
 80082f0:	07d6      	lsls	r6, r2, #31
 80082f2:	d427      	bmi.n	8008344 <__sflush_r+0xb0>
 80082f4:	2200      	movs	r2, #0
 80082f6:	6062      	str	r2, [r4, #4]
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	04d9      	lsls	r1, r3, #19
 80082fc:	6022      	str	r2, [r4, #0]
 80082fe:	d504      	bpl.n	800830a <__sflush_r+0x76>
 8008300:	1c42      	adds	r2, r0, #1
 8008302:	d101      	bne.n	8008308 <__sflush_r+0x74>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b903      	cbnz	r3, 800830a <__sflush_r+0x76>
 8008308:	6560      	str	r0, [r4, #84]	@ 0x54
 800830a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800830c:	602f      	str	r7, [r5, #0]
 800830e:	b1b9      	cbz	r1, 8008340 <__sflush_r+0xac>
 8008310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008314:	4299      	cmp	r1, r3
 8008316:	d002      	beq.n	800831e <__sflush_r+0x8a>
 8008318:	4628      	mov	r0, r5
 800831a:	f7fe fa41 	bl	80067a0 <_free_r>
 800831e:	2300      	movs	r3, #0
 8008320:	6363      	str	r3, [r4, #52]	@ 0x34
 8008322:	e00d      	b.n	8008340 <__sflush_r+0xac>
 8008324:	2301      	movs	r3, #1
 8008326:	4628      	mov	r0, r5
 8008328:	47b0      	blx	r6
 800832a:	4602      	mov	r2, r0
 800832c:	1c50      	adds	r0, r2, #1
 800832e:	d1c9      	bne.n	80082c4 <__sflush_r+0x30>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c6      	beq.n	80082c4 <__sflush_r+0x30>
 8008336:	2b1d      	cmp	r3, #29
 8008338:	d001      	beq.n	800833e <__sflush_r+0xaa>
 800833a:	2b16      	cmp	r3, #22
 800833c:	d11d      	bne.n	800837a <__sflush_r+0xe6>
 800833e:	602f      	str	r7, [r5, #0]
 8008340:	2000      	movs	r0, #0
 8008342:	e021      	b.n	8008388 <__sflush_r+0xf4>
 8008344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008348:	b21b      	sxth	r3, r3
 800834a:	e01a      	b.n	8008382 <__sflush_r+0xee>
 800834c:	690f      	ldr	r7, [r1, #16]
 800834e:	2f00      	cmp	r7, #0
 8008350:	d0f6      	beq.n	8008340 <__sflush_r+0xac>
 8008352:	0793      	lsls	r3, r2, #30
 8008354:	bf18      	it	ne
 8008356:	2300      	movne	r3, #0
 8008358:	680e      	ldr	r6, [r1, #0]
 800835a:	bf08      	it	eq
 800835c:	694b      	ldreq	r3, [r1, #20]
 800835e:	1bf6      	subs	r6, r6, r7
 8008360:	600f      	str	r7, [r1, #0]
 8008362:	608b      	str	r3, [r1, #8]
 8008364:	2e00      	cmp	r6, #0
 8008366:	ddeb      	ble.n	8008340 <__sflush_r+0xac>
 8008368:	4633      	mov	r3, r6
 800836a:	463a      	mov	r2, r7
 800836c:	4628      	mov	r0, r5
 800836e:	6a21      	ldr	r1, [r4, #32]
 8008370:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008374:	47e0      	blx	ip
 8008376:	2800      	cmp	r0, #0
 8008378:	dc07      	bgt.n	800838a <__sflush_r+0xf6>
 800837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008382:	f04f 30ff 	mov.w	r0, #4294967295
 8008386:	81a3      	strh	r3, [r4, #12]
 8008388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800838a:	4407      	add	r7, r0
 800838c:	1a36      	subs	r6, r6, r0
 800838e:	e7e9      	b.n	8008364 <__sflush_r+0xd0>
 8008390:	dfbffffe 	.word	0xdfbffffe

08008394 <_fflush_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	690b      	ldr	r3, [r1, #16]
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	b913      	cbnz	r3, 80083a4 <_fflush_r+0x10>
 800839e:	2500      	movs	r5, #0
 80083a0:	4628      	mov	r0, r5
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	b118      	cbz	r0, 80083ae <_fflush_r+0x1a>
 80083a6:	6a03      	ldr	r3, [r0, #32]
 80083a8:	b90b      	cbnz	r3, 80083ae <_fflush_r+0x1a>
 80083aa:	f7fd fa55 	bl	8005858 <__sinit>
 80083ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f3      	beq.n	800839e <_fflush_r+0xa>
 80083b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b8:	07d0      	lsls	r0, r2, #31
 80083ba:	d404      	bmi.n	80083c6 <_fflush_r+0x32>
 80083bc:	0599      	lsls	r1, r3, #22
 80083be:	d402      	bmi.n	80083c6 <_fflush_r+0x32>
 80083c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083c2:	f7fd fb7a 	bl	8005aba <__retarget_lock_acquire_recursive>
 80083c6:	4628      	mov	r0, r5
 80083c8:	4621      	mov	r1, r4
 80083ca:	f7ff ff63 	bl	8008294 <__sflush_r>
 80083ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083d0:	4605      	mov	r5, r0
 80083d2:	07da      	lsls	r2, r3, #31
 80083d4:	d4e4      	bmi.n	80083a0 <_fflush_r+0xc>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	d4e1      	bmi.n	80083a0 <_fflush_r+0xc>
 80083dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083de:	f7fd fb6d 	bl	8005abc <__retarget_lock_release_recursive>
 80083e2:	e7dd      	b.n	80083a0 <_fflush_r+0xc>

080083e4 <strncmp>:
 80083e4:	b510      	push	{r4, lr}
 80083e6:	b16a      	cbz	r2, 8008404 <strncmp+0x20>
 80083e8:	3901      	subs	r1, #1
 80083ea:	1884      	adds	r4, r0, r2
 80083ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d103      	bne.n	8008400 <strncmp+0x1c>
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d001      	beq.n	8008400 <strncmp+0x1c>
 80083fc:	2a00      	cmp	r2, #0
 80083fe:	d1f5      	bne.n	80083ec <strncmp+0x8>
 8008400:	1ad0      	subs	r0, r2, r3
 8008402:	bd10      	pop	{r4, pc}
 8008404:	4610      	mov	r0, r2
 8008406:	e7fc      	b.n	8008402 <strncmp+0x1e>

08008408 <_sbrk_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	2300      	movs	r3, #0
 800840c:	4d05      	ldr	r5, [pc, #20]	@ (8008424 <_sbrk_r+0x1c>)
 800840e:	4604      	mov	r4, r0
 8008410:	4608      	mov	r0, r1
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f7f9 ffca 	bl	80023ac <_sbrk>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_sbrk_r+0x1a>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_sbrk_r+0x1a>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	200008d0 	.word	0x200008d0

08008428 <nan>:
 8008428:	2000      	movs	r0, #0
 800842a:	4901      	ldr	r1, [pc, #4]	@ (8008430 <nan+0x8>)
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	7ff80000 	.word	0x7ff80000

08008434 <__assert_func>:
 8008434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008436:	4614      	mov	r4, r2
 8008438:	461a      	mov	r2, r3
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <__assert_func+0x2c>)
 800843c:	4605      	mov	r5, r0
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68d8      	ldr	r0, [r3, #12]
 8008442:	b954      	cbnz	r4, 800845a <__assert_func+0x26>
 8008444:	4b07      	ldr	r3, [pc, #28]	@ (8008464 <__assert_func+0x30>)
 8008446:	461c      	mov	r4, r3
 8008448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800844c:	9100      	str	r1, [sp, #0]
 800844e:	462b      	mov	r3, r5
 8008450:	4905      	ldr	r1, [pc, #20]	@ (8008468 <__assert_func+0x34>)
 8008452:	f000 fba7 	bl	8008ba4 <fiprintf>
 8008456:	f000 fbb7 	bl	8008bc8 <abort>
 800845a:	4b04      	ldr	r3, [pc, #16]	@ (800846c <__assert_func+0x38>)
 800845c:	e7f4      	b.n	8008448 <__assert_func+0x14>
 800845e:	bf00      	nop
 8008460:	200000a8 	.word	0x200000a8
 8008464:	0800b345 	.word	0x0800b345
 8008468:	0800b317 	.word	0x0800b317
 800846c:	0800b30a 	.word	0x0800b30a

08008470 <_calloc_r>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	fba1 5402 	umull	r5, r4, r1, r2
 8008476:	b93c      	cbnz	r4, 8008488 <_calloc_r+0x18>
 8008478:	4629      	mov	r1, r5
 800847a:	f7fe fa03 	bl	8006884 <_malloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	b928      	cbnz	r0, 800848e <_calloc_r+0x1e>
 8008482:	2600      	movs	r6, #0
 8008484:	4630      	mov	r0, r6
 8008486:	bd70      	pop	{r4, r5, r6, pc}
 8008488:	220c      	movs	r2, #12
 800848a:	6002      	str	r2, [r0, #0]
 800848c:	e7f9      	b.n	8008482 <_calloc_r+0x12>
 800848e:	462a      	mov	r2, r5
 8008490:	4621      	mov	r1, r4
 8008492:	f7fd fa94 	bl	80059be <memset>
 8008496:	e7f5      	b.n	8008484 <_calloc_r+0x14>

08008498 <rshift>:
 8008498:	6903      	ldr	r3, [r0, #16]
 800849a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800849e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80084a2:	f100 0414 	add.w	r4, r0, #20
 80084a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80084aa:	dd46      	ble.n	800853a <rshift+0xa2>
 80084ac:	f011 011f 	ands.w	r1, r1, #31
 80084b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80084b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80084b8:	d10c      	bne.n	80084d4 <rshift+0x3c>
 80084ba:	4629      	mov	r1, r5
 80084bc:	f100 0710 	add.w	r7, r0, #16
 80084c0:	42b1      	cmp	r1, r6
 80084c2:	d335      	bcc.n	8008530 <rshift+0x98>
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	1eea      	subs	r2, r5, #3
 80084ca:	4296      	cmp	r6, r2
 80084cc:	bf38      	it	cc
 80084ce:	2300      	movcc	r3, #0
 80084d0:	4423      	add	r3, r4
 80084d2:	e015      	b.n	8008500 <rshift+0x68>
 80084d4:	46a1      	mov	r9, r4
 80084d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80084da:	f1c1 0820 	rsb	r8, r1, #32
 80084de:	40cf      	lsrs	r7, r1
 80084e0:	f105 0e04 	add.w	lr, r5, #4
 80084e4:	4576      	cmp	r6, lr
 80084e6:	46f4      	mov	ip, lr
 80084e8:	d816      	bhi.n	8008518 <rshift+0x80>
 80084ea:	1a9a      	subs	r2, r3, r2
 80084ec:	0092      	lsls	r2, r2, #2
 80084ee:	3a04      	subs	r2, #4
 80084f0:	3501      	adds	r5, #1
 80084f2:	42ae      	cmp	r6, r5
 80084f4:	bf38      	it	cc
 80084f6:	2200      	movcc	r2, #0
 80084f8:	18a3      	adds	r3, r4, r2
 80084fa:	50a7      	str	r7, [r4, r2]
 80084fc:	b107      	cbz	r7, 8008500 <rshift+0x68>
 80084fe:	3304      	adds	r3, #4
 8008500:	42a3      	cmp	r3, r4
 8008502:	eba3 0204 	sub.w	r2, r3, r4
 8008506:	bf08      	it	eq
 8008508:	2300      	moveq	r3, #0
 800850a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800850e:	6102      	str	r2, [r0, #16]
 8008510:	bf08      	it	eq
 8008512:	6143      	streq	r3, [r0, #20]
 8008514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008518:	f8dc c000 	ldr.w	ip, [ip]
 800851c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008520:	ea4c 0707 	orr.w	r7, ip, r7
 8008524:	f849 7b04 	str.w	r7, [r9], #4
 8008528:	f85e 7b04 	ldr.w	r7, [lr], #4
 800852c:	40cf      	lsrs	r7, r1
 800852e:	e7d9      	b.n	80084e4 <rshift+0x4c>
 8008530:	f851 cb04 	ldr.w	ip, [r1], #4
 8008534:	f847 cf04 	str.w	ip, [r7, #4]!
 8008538:	e7c2      	b.n	80084c0 <rshift+0x28>
 800853a:	4623      	mov	r3, r4
 800853c:	e7e0      	b.n	8008500 <rshift+0x68>

0800853e <__hexdig_fun>:
 800853e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008542:	2b09      	cmp	r3, #9
 8008544:	d802      	bhi.n	800854c <__hexdig_fun+0xe>
 8008546:	3820      	subs	r0, #32
 8008548:	b2c0      	uxtb	r0, r0
 800854a:	4770      	bx	lr
 800854c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008550:	2b05      	cmp	r3, #5
 8008552:	d801      	bhi.n	8008558 <__hexdig_fun+0x1a>
 8008554:	3847      	subs	r0, #71	@ 0x47
 8008556:	e7f7      	b.n	8008548 <__hexdig_fun+0xa>
 8008558:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800855c:	2b05      	cmp	r3, #5
 800855e:	d801      	bhi.n	8008564 <__hexdig_fun+0x26>
 8008560:	3827      	subs	r0, #39	@ 0x27
 8008562:	e7f1      	b.n	8008548 <__hexdig_fun+0xa>
 8008564:	2000      	movs	r0, #0
 8008566:	4770      	bx	lr

08008568 <__gethex>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	468a      	mov	sl, r1
 800856e:	4690      	mov	r8, r2
 8008570:	b085      	sub	sp, #20
 8008572:	9302      	str	r3, [sp, #8]
 8008574:	680b      	ldr	r3, [r1, #0]
 8008576:	9001      	str	r0, [sp, #4]
 8008578:	1c9c      	adds	r4, r3, #2
 800857a:	46a1      	mov	r9, r4
 800857c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008580:	2830      	cmp	r0, #48	@ 0x30
 8008582:	d0fa      	beq.n	800857a <__gethex+0x12>
 8008584:	eba9 0303 	sub.w	r3, r9, r3
 8008588:	f1a3 0b02 	sub.w	fp, r3, #2
 800858c:	f7ff ffd7 	bl	800853e <__hexdig_fun>
 8008590:	4605      	mov	r5, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d168      	bne.n	8008668 <__gethex+0x100>
 8008596:	2201      	movs	r2, #1
 8008598:	4648      	mov	r0, r9
 800859a:	499f      	ldr	r1, [pc, #636]	@ (8008818 <__gethex+0x2b0>)
 800859c:	f7ff ff22 	bl	80083e4 <strncmp>
 80085a0:	4607      	mov	r7, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d167      	bne.n	8008676 <__gethex+0x10e>
 80085a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80085aa:	4626      	mov	r6, r4
 80085ac:	f7ff ffc7 	bl	800853e <__hexdig_fun>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d062      	beq.n	800867a <__gethex+0x112>
 80085b4:	4623      	mov	r3, r4
 80085b6:	7818      	ldrb	r0, [r3, #0]
 80085b8:	4699      	mov	r9, r3
 80085ba:	2830      	cmp	r0, #48	@ 0x30
 80085bc:	f103 0301 	add.w	r3, r3, #1
 80085c0:	d0f9      	beq.n	80085b6 <__gethex+0x4e>
 80085c2:	f7ff ffbc 	bl	800853e <__hexdig_fun>
 80085c6:	fab0 f580 	clz	r5, r0
 80085ca:	f04f 0b01 	mov.w	fp, #1
 80085ce:	096d      	lsrs	r5, r5, #5
 80085d0:	464a      	mov	r2, r9
 80085d2:	4616      	mov	r6, r2
 80085d4:	7830      	ldrb	r0, [r6, #0]
 80085d6:	3201      	adds	r2, #1
 80085d8:	f7ff ffb1 	bl	800853e <__hexdig_fun>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1f8      	bne.n	80085d2 <__gethex+0x6a>
 80085e0:	2201      	movs	r2, #1
 80085e2:	4630      	mov	r0, r6
 80085e4:	498c      	ldr	r1, [pc, #560]	@ (8008818 <__gethex+0x2b0>)
 80085e6:	f7ff fefd 	bl	80083e4 <strncmp>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d13f      	bne.n	800866e <__gethex+0x106>
 80085ee:	b944      	cbnz	r4, 8008602 <__gethex+0x9a>
 80085f0:	1c74      	adds	r4, r6, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4616      	mov	r6, r2
 80085f6:	7830      	ldrb	r0, [r6, #0]
 80085f8:	3201      	adds	r2, #1
 80085fa:	f7ff ffa0 	bl	800853e <__hexdig_fun>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d1f8      	bne.n	80085f4 <__gethex+0x8c>
 8008602:	1ba4      	subs	r4, r4, r6
 8008604:	00a7      	lsls	r7, r4, #2
 8008606:	7833      	ldrb	r3, [r6, #0]
 8008608:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800860c:	2b50      	cmp	r3, #80	@ 0x50
 800860e:	d13e      	bne.n	800868e <__gethex+0x126>
 8008610:	7873      	ldrb	r3, [r6, #1]
 8008612:	2b2b      	cmp	r3, #43	@ 0x2b
 8008614:	d033      	beq.n	800867e <__gethex+0x116>
 8008616:	2b2d      	cmp	r3, #45	@ 0x2d
 8008618:	d034      	beq.n	8008684 <__gethex+0x11c>
 800861a:	2400      	movs	r4, #0
 800861c:	1c71      	adds	r1, r6, #1
 800861e:	7808      	ldrb	r0, [r1, #0]
 8008620:	f7ff ff8d 	bl	800853e <__hexdig_fun>
 8008624:	1e43      	subs	r3, r0, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b18      	cmp	r3, #24
 800862a:	d830      	bhi.n	800868e <__gethex+0x126>
 800862c:	f1a0 0210 	sub.w	r2, r0, #16
 8008630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008634:	f7ff ff83 	bl	800853e <__hexdig_fun>
 8008638:	f100 3cff 	add.w	ip, r0, #4294967295
 800863c:	fa5f fc8c 	uxtb.w	ip, ip
 8008640:	f1bc 0f18 	cmp.w	ip, #24
 8008644:	f04f 030a 	mov.w	r3, #10
 8008648:	d91e      	bls.n	8008688 <__gethex+0x120>
 800864a:	b104      	cbz	r4, 800864e <__gethex+0xe6>
 800864c:	4252      	negs	r2, r2
 800864e:	4417      	add	r7, r2
 8008650:	f8ca 1000 	str.w	r1, [sl]
 8008654:	b1ed      	cbz	r5, 8008692 <__gethex+0x12a>
 8008656:	f1bb 0f00 	cmp.w	fp, #0
 800865a:	bf0c      	ite	eq
 800865c:	2506      	moveq	r5, #6
 800865e:	2500      	movne	r5, #0
 8008660:	4628      	mov	r0, r5
 8008662:	b005      	add	sp, #20
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	2500      	movs	r5, #0
 800866a:	462c      	mov	r4, r5
 800866c:	e7b0      	b.n	80085d0 <__gethex+0x68>
 800866e:	2c00      	cmp	r4, #0
 8008670:	d1c7      	bne.n	8008602 <__gethex+0x9a>
 8008672:	4627      	mov	r7, r4
 8008674:	e7c7      	b.n	8008606 <__gethex+0x9e>
 8008676:	464e      	mov	r6, r9
 8008678:	462f      	mov	r7, r5
 800867a:	2501      	movs	r5, #1
 800867c:	e7c3      	b.n	8008606 <__gethex+0x9e>
 800867e:	2400      	movs	r4, #0
 8008680:	1cb1      	adds	r1, r6, #2
 8008682:	e7cc      	b.n	800861e <__gethex+0xb6>
 8008684:	2401      	movs	r4, #1
 8008686:	e7fb      	b.n	8008680 <__gethex+0x118>
 8008688:	fb03 0002 	mla	r0, r3, r2, r0
 800868c:	e7ce      	b.n	800862c <__gethex+0xc4>
 800868e:	4631      	mov	r1, r6
 8008690:	e7de      	b.n	8008650 <__gethex+0xe8>
 8008692:	4629      	mov	r1, r5
 8008694:	eba6 0309 	sub.w	r3, r6, r9
 8008698:	3b01      	subs	r3, #1
 800869a:	2b07      	cmp	r3, #7
 800869c:	dc0a      	bgt.n	80086b4 <__gethex+0x14c>
 800869e:	9801      	ldr	r0, [sp, #4]
 80086a0:	f7fe f97c 	bl	800699c <_Balloc>
 80086a4:	4604      	mov	r4, r0
 80086a6:	b940      	cbnz	r0, 80086ba <__gethex+0x152>
 80086a8:	4602      	mov	r2, r0
 80086aa:	21e4      	movs	r1, #228	@ 0xe4
 80086ac:	4b5b      	ldr	r3, [pc, #364]	@ (800881c <__gethex+0x2b4>)
 80086ae:	485c      	ldr	r0, [pc, #368]	@ (8008820 <__gethex+0x2b8>)
 80086b0:	f7ff fec0 	bl	8008434 <__assert_func>
 80086b4:	3101      	adds	r1, #1
 80086b6:	105b      	asrs	r3, r3, #1
 80086b8:	e7ef      	b.n	800869a <__gethex+0x132>
 80086ba:	2300      	movs	r3, #0
 80086bc:	f100 0a14 	add.w	sl, r0, #20
 80086c0:	4655      	mov	r5, sl
 80086c2:	469b      	mov	fp, r3
 80086c4:	45b1      	cmp	r9, r6
 80086c6:	d337      	bcc.n	8008738 <__gethex+0x1d0>
 80086c8:	f845 bb04 	str.w	fp, [r5], #4
 80086cc:	eba5 050a 	sub.w	r5, r5, sl
 80086d0:	10ad      	asrs	r5, r5, #2
 80086d2:	6125      	str	r5, [r4, #16]
 80086d4:	4658      	mov	r0, fp
 80086d6:	f7fe fa53 	bl	8006b80 <__hi0bits>
 80086da:	016d      	lsls	r5, r5, #5
 80086dc:	f8d8 6000 	ldr.w	r6, [r8]
 80086e0:	1a2d      	subs	r5, r5, r0
 80086e2:	42b5      	cmp	r5, r6
 80086e4:	dd54      	ble.n	8008790 <__gethex+0x228>
 80086e6:	1bad      	subs	r5, r5, r6
 80086e8:	4629      	mov	r1, r5
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7fe fddb 	bl	80072a6 <__any_on>
 80086f0:	4681      	mov	r9, r0
 80086f2:	b178      	cbz	r0, 8008714 <__gethex+0x1ac>
 80086f4:	f04f 0901 	mov.w	r9, #1
 80086f8:	1e6b      	subs	r3, r5, #1
 80086fa:	1159      	asrs	r1, r3, #5
 80086fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008700:	f003 021f 	and.w	r2, r3, #31
 8008704:	fa09 f202 	lsl.w	r2, r9, r2
 8008708:	420a      	tst	r2, r1
 800870a:	d003      	beq.n	8008714 <__gethex+0x1ac>
 800870c:	454b      	cmp	r3, r9
 800870e:	dc36      	bgt.n	800877e <__gethex+0x216>
 8008710:	f04f 0902 	mov.w	r9, #2
 8008714:	4629      	mov	r1, r5
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff febe 	bl	8008498 <rshift>
 800871c:	442f      	add	r7, r5
 800871e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008722:	42bb      	cmp	r3, r7
 8008724:	da42      	bge.n	80087ac <__gethex+0x244>
 8008726:	4621      	mov	r1, r4
 8008728:	9801      	ldr	r0, [sp, #4]
 800872a:	f7fe f977 	bl	8006a1c <_Bfree>
 800872e:	2300      	movs	r3, #0
 8008730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008732:	25a3      	movs	r5, #163	@ 0xa3
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	e793      	b.n	8008660 <__gethex+0xf8>
 8008738:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800873c:	2a2e      	cmp	r2, #46	@ 0x2e
 800873e:	d012      	beq.n	8008766 <__gethex+0x1fe>
 8008740:	2b20      	cmp	r3, #32
 8008742:	d104      	bne.n	800874e <__gethex+0x1e6>
 8008744:	f845 bb04 	str.w	fp, [r5], #4
 8008748:	f04f 0b00 	mov.w	fp, #0
 800874c:	465b      	mov	r3, fp
 800874e:	7830      	ldrb	r0, [r6, #0]
 8008750:	9303      	str	r3, [sp, #12]
 8008752:	f7ff fef4 	bl	800853e <__hexdig_fun>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	f000 000f 	and.w	r0, r0, #15
 800875c:	4098      	lsls	r0, r3
 800875e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008762:	3304      	adds	r3, #4
 8008764:	e7ae      	b.n	80086c4 <__gethex+0x15c>
 8008766:	45b1      	cmp	r9, r6
 8008768:	d8ea      	bhi.n	8008740 <__gethex+0x1d8>
 800876a:	2201      	movs	r2, #1
 800876c:	4630      	mov	r0, r6
 800876e:	492a      	ldr	r1, [pc, #168]	@ (8008818 <__gethex+0x2b0>)
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	f7ff fe37 	bl	80083e4 <strncmp>
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	2800      	cmp	r0, #0
 800877a:	d1e1      	bne.n	8008740 <__gethex+0x1d8>
 800877c:	e7a2      	b.n	80086c4 <__gethex+0x15c>
 800877e:	4620      	mov	r0, r4
 8008780:	1ea9      	subs	r1, r5, #2
 8008782:	f7fe fd90 	bl	80072a6 <__any_on>
 8008786:	2800      	cmp	r0, #0
 8008788:	d0c2      	beq.n	8008710 <__gethex+0x1a8>
 800878a:	f04f 0903 	mov.w	r9, #3
 800878e:	e7c1      	b.n	8008714 <__gethex+0x1ac>
 8008790:	da09      	bge.n	80087a6 <__gethex+0x23e>
 8008792:	1b75      	subs	r5, r6, r5
 8008794:	4621      	mov	r1, r4
 8008796:	462a      	mov	r2, r5
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	f7fe fb55 	bl	8006e48 <__lshift>
 800879e:	4604      	mov	r4, r0
 80087a0:	1b7f      	subs	r7, r7, r5
 80087a2:	f100 0a14 	add.w	sl, r0, #20
 80087a6:	f04f 0900 	mov.w	r9, #0
 80087aa:	e7b8      	b.n	800871e <__gethex+0x1b6>
 80087ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80087b0:	42bd      	cmp	r5, r7
 80087b2:	dd6f      	ble.n	8008894 <__gethex+0x32c>
 80087b4:	1bed      	subs	r5, r5, r7
 80087b6:	42ae      	cmp	r6, r5
 80087b8:	dc34      	bgt.n	8008824 <__gethex+0x2bc>
 80087ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d022      	beq.n	8008808 <__gethex+0x2a0>
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d024      	beq.n	8008810 <__gethex+0x2a8>
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d115      	bne.n	80087f6 <__gethex+0x28e>
 80087ca:	42ae      	cmp	r6, r5
 80087cc:	d113      	bne.n	80087f6 <__gethex+0x28e>
 80087ce:	2e01      	cmp	r6, #1
 80087d0:	d10b      	bne.n	80087ea <__gethex+0x282>
 80087d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087d6:	9a02      	ldr	r2, [sp, #8]
 80087d8:	2562      	movs	r5, #98	@ 0x62
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	2301      	movs	r3, #1
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	f8ca 3000 	str.w	r3, [sl]
 80087e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e6:	601c      	str	r4, [r3, #0]
 80087e8:	e73a      	b.n	8008660 <__gethex+0xf8>
 80087ea:	4620      	mov	r0, r4
 80087ec:	1e71      	subs	r1, r6, #1
 80087ee:	f7fe fd5a 	bl	80072a6 <__any_on>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d1ed      	bne.n	80087d2 <__gethex+0x26a>
 80087f6:	4621      	mov	r1, r4
 80087f8:	9801      	ldr	r0, [sp, #4]
 80087fa:	f7fe f90f 	bl	8006a1c <_Bfree>
 80087fe:	2300      	movs	r3, #0
 8008800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008802:	2550      	movs	r5, #80	@ 0x50
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e72b      	b.n	8008660 <__gethex+0xf8>
 8008808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f3      	bne.n	80087f6 <__gethex+0x28e>
 800880e:	e7e0      	b.n	80087d2 <__gethex+0x26a>
 8008810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1dd      	bne.n	80087d2 <__gethex+0x26a>
 8008816:	e7ee      	b.n	80087f6 <__gethex+0x28e>
 8008818:	0800b198 	.word	0x0800b198
 800881c:	0800b02f 	.word	0x0800b02f
 8008820:	0800b346 	.word	0x0800b346
 8008824:	1e6f      	subs	r7, r5, #1
 8008826:	f1b9 0f00 	cmp.w	r9, #0
 800882a:	d130      	bne.n	800888e <__gethex+0x326>
 800882c:	b127      	cbz	r7, 8008838 <__gethex+0x2d0>
 800882e:	4639      	mov	r1, r7
 8008830:	4620      	mov	r0, r4
 8008832:	f7fe fd38 	bl	80072a6 <__any_on>
 8008836:	4681      	mov	r9, r0
 8008838:	2301      	movs	r3, #1
 800883a:	4629      	mov	r1, r5
 800883c:	1b76      	subs	r6, r6, r5
 800883e:	2502      	movs	r5, #2
 8008840:	117a      	asrs	r2, r7, #5
 8008842:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008846:	f007 071f 	and.w	r7, r7, #31
 800884a:	40bb      	lsls	r3, r7
 800884c:	4213      	tst	r3, r2
 800884e:	4620      	mov	r0, r4
 8008850:	bf18      	it	ne
 8008852:	f049 0902 	orrne.w	r9, r9, #2
 8008856:	f7ff fe1f 	bl	8008498 <rshift>
 800885a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	d047      	beq.n	80088f4 <__gethex+0x38c>
 8008864:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d015      	beq.n	8008898 <__gethex+0x330>
 800886c:	2b03      	cmp	r3, #3
 800886e:	d017      	beq.n	80088a0 <__gethex+0x338>
 8008870:	2b01      	cmp	r3, #1
 8008872:	d109      	bne.n	8008888 <__gethex+0x320>
 8008874:	f019 0f02 	tst.w	r9, #2
 8008878:	d006      	beq.n	8008888 <__gethex+0x320>
 800887a:	f8da 3000 	ldr.w	r3, [sl]
 800887e:	ea49 0903 	orr.w	r9, r9, r3
 8008882:	f019 0f01 	tst.w	r9, #1
 8008886:	d10e      	bne.n	80088a6 <__gethex+0x33e>
 8008888:	f045 0510 	orr.w	r5, r5, #16
 800888c:	e032      	b.n	80088f4 <__gethex+0x38c>
 800888e:	f04f 0901 	mov.w	r9, #1
 8008892:	e7d1      	b.n	8008838 <__gethex+0x2d0>
 8008894:	2501      	movs	r5, #1
 8008896:	e7e2      	b.n	800885e <__gethex+0x2f6>
 8008898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800889a:	f1c3 0301 	rsb	r3, r3, #1
 800889e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <__gethex+0x320>
 80088a6:	f04f 0c00 	mov.w	ip, #0
 80088aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80088ae:	f104 0314 	add.w	r3, r4, #20
 80088b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80088b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088c4:	d01b      	beq.n	80088fe <__gethex+0x396>
 80088c6:	3201      	adds	r2, #1
 80088c8:	6002      	str	r2, [r0, #0]
 80088ca:	2d02      	cmp	r5, #2
 80088cc:	f104 0314 	add.w	r3, r4, #20
 80088d0:	d13c      	bne.n	800894c <__gethex+0x3e4>
 80088d2:	f8d8 2000 	ldr.w	r2, [r8]
 80088d6:	3a01      	subs	r2, #1
 80088d8:	42b2      	cmp	r2, r6
 80088da:	d109      	bne.n	80088f0 <__gethex+0x388>
 80088dc:	2201      	movs	r2, #1
 80088de:	1171      	asrs	r1, r6, #5
 80088e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088e4:	f006 061f 	and.w	r6, r6, #31
 80088e8:	fa02 f606 	lsl.w	r6, r2, r6
 80088ec:	421e      	tst	r6, r3
 80088ee:	d13a      	bne.n	8008966 <__gethex+0x3fe>
 80088f0:	f045 0520 	orr.w	r5, r5, #32
 80088f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f6:	601c      	str	r4, [r3, #0]
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	601f      	str	r7, [r3, #0]
 80088fc:	e6b0      	b.n	8008660 <__gethex+0xf8>
 80088fe:	4299      	cmp	r1, r3
 8008900:	f843 cc04 	str.w	ip, [r3, #-4]
 8008904:	d8d9      	bhi.n	80088ba <__gethex+0x352>
 8008906:	68a3      	ldr	r3, [r4, #8]
 8008908:	459b      	cmp	fp, r3
 800890a:	db17      	blt.n	800893c <__gethex+0x3d4>
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	9801      	ldr	r0, [sp, #4]
 8008910:	3101      	adds	r1, #1
 8008912:	f7fe f843 	bl	800699c <_Balloc>
 8008916:	4681      	mov	r9, r0
 8008918:	b918      	cbnz	r0, 8008922 <__gethex+0x3ba>
 800891a:	4602      	mov	r2, r0
 800891c:	2184      	movs	r1, #132	@ 0x84
 800891e:	4b19      	ldr	r3, [pc, #100]	@ (8008984 <__gethex+0x41c>)
 8008920:	e6c5      	b.n	80086ae <__gethex+0x146>
 8008922:	6922      	ldr	r2, [r4, #16]
 8008924:	f104 010c 	add.w	r1, r4, #12
 8008928:	3202      	adds	r2, #2
 800892a:	0092      	lsls	r2, r2, #2
 800892c:	300c      	adds	r0, #12
 800892e:	f7fd f8d4 	bl	8005ada <memcpy>
 8008932:	4621      	mov	r1, r4
 8008934:	9801      	ldr	r0, [sp, #4]
 8008936:	f7fe f871 	bl	8006a1c <_Bfree>
 800893a:	464c      	mov	r4, r9
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	6122      	str	r2, [r4, #16]
 8008942:	2201      	movs	r2, #1
 8008944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008948:	615a      	str	r2, [r3, #20]
 800894a:	e7be      	b.n	80088ca <__gethex+0x362>
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	455a      	cmp	r2, fp
 8008950:	dd0b      	ble.n	800896a <__gethex+0x402>
 8008952:	2101      	movs	r1, #1
 8008954:	4620      	mov	r0, r4
 8008956:	f7ff fd9f 	bl	8008498 <rshift>
 800895a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800895e:	3701      	adds	r7, #1
 8008960:	42bb      	cmp	r3, r7
 8008962:	f6ff aee0 	blt.w	8008726 <__gethex+0x1be>
 8008966:	2501      	movs	r5, #1
 8008968:	e7c2      	b.n	80088f0 <__gethex+0x388>
 800896a:	f016 061f 	ands.w	r6, r6, #31
 800896e:	d0fa      	beq.n	8008966 <__gethex+0x3fe>
 8008970:	4453      	add	r3, sl
 8008972:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008976:	f7fe f903 	bl	8006b80 <__hi0bits>
 800897a:	f1c6 0620 	rsb	r6, r6, #32
 800897e:	42b0      	cmp	r0, r6
 8008980:	dbe7      	blt.n	8008952 <__gethex+0x3ea>
 8008982:	e7f0      	b.n	8008966 <__gethex+0x3fe>
 8008984:	0800b02f 	.word	0x0800b02f

08008988 <L_shift>:
 8008988:	f1c2 0208 	rsb	r2, r2, #8
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	f1c2 0620 	rsb	r6, r2, #32
 8008994:	6843      	ldr	r3, [r0, #4]
 8008996:	6804      	ldr	r4, [r0, #0]
 8008998:	fa03 f506 	lsl.w	r5, r3, r6
 800899c:	432c      	orrs	r4, r5
 800899e:	40d3      	lsrs	r3, r2
 80089a0:	6004      	str	r4, [r0, #0]
 80089a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80089a6:	4288      	cmp	r0, r1
 80089a8:	d3f4      	bcc.n	8008994 <L_shift+0xc>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <__match>:
 80089ac:	b530      	push	{r4, r5, lr}
 80089ae:	6803      	ldr	r3, [r0, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	b914      	cbnz	r4, 80089be <__match+0x12>
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	2001      	movs	r0, #1
 80089bc:	bd30      	pop	{r4, r5, pc}
 80089be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80089c6:	2d19      	cmp	r5, #25
 80089c8:	bf98      	it	ls
 80089ca:	3220      	addls	r2, #32
 80089cc:	42a2      	cmp	r2, r4
 80089ce:	d0f0      	beq.n	80089b2 <__match+0x6>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7f3      	b.n	80089bc <__match+0x10>

080089d4 <__hexnan>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	2500      	movs	r5, #0
 80089da:	680b      	ldr	r3, [r1, #0]
 80089dc:	4682      	mov	sl, r0
 80089de:	115e      	asrs	r6, r3, #5
 80089e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80089e4:	f013 031f 	ands.w	r3, r3, #31
 80089e8:	bf18      	it	ne
 80089ea:	3604      	addne	r6, #4
 80089ec:	1f37      	subs	r7, r6, #4
 80089ee:	4690      	mov	r8, r2
 80089f0:	46b9      	mov	r9, r7
 80089f2:	463c      	mov	r4, r7
 80089f4:	46ab      	mov	fp, r5
 80089f6:	b087      	sub	sp, #28
 80089f8:	6801      	ldr	r1, [r0, #0]
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a00:	9502      	str	r5, [sp, #8]
 8008a02:	784a      	ldrb	r2, [r1, #1]
 8008a04:	1c4b      	adds	r3, r1, #1
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	b342      	cbz	r2, 8008a5c <__hexnan+0x88>
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	9204      	str	r2, [sp, #16]
 8008a10:	f7ff fd95 	bl	800853e <__hexdig_fun>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d151      	bne.n	8008abc <__hexnan+0xe8>
 8008a18:	9a04      	ldr	r2, [sp, #16]
 8008a1a:	9905      	ldr	r1, [sp, #20]
 8008a1c:	2a20      	cmp	r2, #32
 8008a1e:	d818      	bhi.n	8008a52 <__hexnan+0x7e>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	459b      	cmp	fp, r3
 8008a24:	dd13      	ble.n	8008a4e <__hexnan+0x7a>
 8008a26:	454c      	cmp	r4, r9
 8008a28:	d206      	bcs.n	8008a38 <__hexnan+0x64>
 8008a2a:	2d07      	cmp	r5, #7
 8008a2c:	dc04      	bgt.n	8008a38 <__hexnan+0x64>
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4649      	mov	r1, r9
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff ffa8 	bl	8008988 <L_shift>
 8008a38:	4544      	cmp	r4, r8
 8008a3a:	d952      	bls.n	8008ae2 <__hexnan+0x10e>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f1a4 0904 	sub.w	r9, r4, #4
 8008a42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a46:	461d      	mov	r5, r3
 8008a48:	464c      	mov	r4, r9
 8008a4a:	f8cd b008 	str.w	fp, [sp, #8]
 8008a4e:	9903      	ldr	r1, [sp, #12]
 8008a50:	e7d7      	b.n	8008a02 <__hexnan+0x2e>
 8008a52:	2a29      	cmp	r2, #41	@ 0x29
 8008a54:	d157      	bne.n	8008b06 <__hexnan+0x132>
 8008a56:	3102      	adds	r1, #2
 8008a58:	f8ca 1000 	str.w	r1, [sl]
 8008a5c:	f1bb 0f00 	cmp.w	fp, #0
 8008a60:	d051      	beq.n	8008b06 <__hexnan+0x132>
 8008a62:	454c      	cmp	r4, r9
 8008a64:	d206      	bcs.n	8008a74 <__hexnan+0xa0>
 8008a66:	2d07      	cmp	r5, #7
 8008a68:	dc04      	bgt.n	8008a74 <__hexnan+0xa0>
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7ff ff8a 	bl	8008988 <L_shift>
 8008a74:	4544      	cmp	r4, r8
 8008a76:	d936      	bls.n	8008ae6 <__hexnan+0x112>
 8008a78:	4623      	mov	r3, r4
 8008a7a:	f1a8 0204 	sub.w	r2, r8, #4
 8008a7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008a82:	429f      	cmp	r7, r3
 8008a84:	f842 1f04 	str.w	r1, [r2, #4]!
 8008a88:	d2f9      	bcs.n	8008a7e <__hexnan+0xaa>
 8008a8a:	1b3b      	subs	r3, r7, r4
 8008a8c:	f023 0303 	bic.w	r3, r3, #3
 8008a90:	3304      	adds	r3, #4
 8008a92:	3401      	adds	r4, #1
 8008a94:	3e03      	subs	r6, #3
 8008a96:	42b4      	cmp	r4, r6
 8008a98:	bf88      	it	hi
 8008a9a:	2304      	movhi	r3, #4
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4443      	add	r3, r8
 8008aa0:	f843 2b04 	str.w	r2, [r3], #4
 8008aa4:	429f      	cmp	r7, r3
 8008aa6:	d2fb      	bcs.n	8008aa0 <__hexnan+0xcc>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	b91b      	cbnz	r3, 8008ab4 <__hexnan+0xe0>
 8008aac:	4547      	cmp	r7, r8
 8008aae:	d128      	bne.n	8008b02 <__hexnan+0x12e>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	2005      	movs	r0, #5
 8008ab6:	b007      	add	sp, #28
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	3501      	adds	r5, #1
 8008abe:	2d08      	cmp	r5, #8
 8008ac0:	f10b 0b01 	add.w	fp, fp, #1
 8008ac4:	dd06      	ble.n	8008ad4 <__hexnan+0x100>
 8008ac6:	4544      	cmp	r4, r8
 8008ac8:	d9c1      	bls.n	8008a4e <__hexnan+0x7a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2501      	movs	r5, #1
 8008ace:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ad2:	3c04      	subs	r4, #4
 8008ad4:	6822      	ldr	r2, [r4, #0]
 8008ad6:	f000 000f 	and.w	r0, r0, #15
 8008ada:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	e7b5      	b.n	8008a4e <__hexnan+0x7a>
 8008ae2:	2508      	movs	r5, #8
 8008ae4:	e7b3      	b.n	8008a4e <__hexnan+0x7a>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d0dd      	beq.n	8008aa8 <__hexnan+0xd4>
 8008aec:	f04f 32ff 	mov.w	r2, #4294967295
 8008af0:	f1c3 0320 	rsb	r3, r3, #32
 8008af4:	40da      	lsrs	r2, r3
 8008af6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008afa:	4013      	ands	r3, r2
 8008afc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b00:	e7d2      	b.n	8008aa8 <__hexnan+0xd4>
 8008b02:	3f04      	subs	r7, #4
 8008b04:	e7d0      	b.n	8008aa8 <__hexnan+0xd4>
 8008b06:	2004      	movs	r0, #4
 8008b08:	e7d5      	b.n	8008ab6 <__hexnan+0xe2>

08008b0a <__ascii_mbtowc>:
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	b901      	cbnz	r1, 8008b10 <__ascii_mbtowc+0x6>
 8008b0e:	a901      	add	r1, sp, #4
 8008b10:	b142      	cbz	r2, 8008b24 <__ascii_mbtowc+0x1a>
 8008b12:	b14b      	cbz	r3, 8008b28 <__ascii_mbtowc+0x1e>
 8008b14:	7813      	ldrb	r3, [r2, #0]
 8008b16:	600b      	str	r3, [r1, #0]
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	1e10      	subs	r0, r2, #0
 8008b1c:	bf18      	it	ne
 8008b1e:	2001      	movne	r0, #1
 8008b20:	b002      	add	sp, #8
 8008b22:	4770      	bx	lr
 8008b24:	4610      	mov	r0, r2
 8008b26:	e7fb      	b.n	8008b20 <__ascii_mbtowc+0x16>
 8008b28:	f06f 0001 	mvn.w	r0, #1
 8008b2c:	e7f8      	b.n	8008b20 <__ascii_mbtowc+0x16>

08008b2e <_realloc_r>:
 8008b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	4680      	mov	r8, r0
 8008b34:	4615      	mov	r5, r2
 8008b36:	460c      	mov	r4, r1
 8008b38:	b921      	cbnz	r1, 8008b44 <_realloc_r+0x16>
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	f7fd bea0 	b.w	8006884 <_malloc_r>
 8008b44:	b92a      	cbnz	r2, 8008b52 <_realloc_r+0x24>
 8008b46:	f7fd fe2b 	bl	80067a0 <_free_r>
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b52:	f000 f840 	bl	8008bd6 <_malloc_usable_size_r>
 8008b56:	4285      	cmp	r5, r0
 8008b58:	4606      	mov	r6, r0
 8008b5a:	d802      	bhi.n	8008b62 <_realloc_r+0x34>
 8008b5c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b60:	d8f4      	bhi.n	8008b4c <_realloc_r+0x1e>
 8008b62:	4629      	mov	r1, r5
 8008b64:	4640      	mov	r0, r8
 8008b66:	f7fd fe8d 	bl	8006884 <_malloc_r>
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d0ec      	beq.n	8008b4a <_realloc_r+0x1c>
 8008b70:	42b5      	cmp	r5, r6
 8008b72:	462a      	mov	r2, r5
 8008b74:	4621      	mov	r1, r4
 8008b76:	bf28      	it	cs
 8008b78:	4632      	movcs	r2, r6
 8008b7a:	f7fc ffae 	bl	8005ada <memcpy>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4640      	mov	r0, r8
 8008b82:	f7fd fe0d 	bl	80067a0 <_free_r>
 8008b86:	463c      	mov	r4, r7
 8008b88:	e7e0      	b.n	8008b4c <_realloc_r+0x1e>

08008b8a <__ascii_wctomb>:
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	b141      	cbz	r1, 8008ba2 <__ascii_wctomb+0x18>
 8008b90:	2aff      	cmp	r2, #255	@ 0xff
 8008b92:	d904      	bls.n	8008b9e <__ascii_wctomb+0x14>
 8008b94:	228a      	movs	r2, #138	@ 0x8a
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	4770      	bx	lr
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	700a      	strb	r2, [r1, #0]
 8008ba2:	4770      	bx	lr

08008ba4 <fiprintf>:
 8008ba4:	b40e      	push	{r1, r2, r3}
 8008ba6:	b503      	push	{r0, r1, lr}
 8008ba8:	4601      	mov	r1, r0
 8008baa:	ab03      	add	r3, sp, #12
 8008bac:	4805      	ldr	r0, [pc, #20]	@ (8008bc4 <fiprintf+0x20>)
 8008bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb2:	6800      	ldr	r0, [r0, #0]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f000 f83d 	bl	8008c34 <_vfiprintf_r>
 8008bba:	b002      	add	sp, #8
 8008bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc0:	b003      	add	sp, #12
 8008bc2:	4770      	bx	lr
 8008bc4:	200000a8 	.word	0x200000a8

08008bc8 <abort>:
 8008bc8:	2006      	movs	r0, #6
 8008bca:	b508      	push	{r3, lr}
 8008bcc:	f000 fa06 	bl	8008fdc <raise>
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7f9 fb76 	bl	80022c2 <_exit>

08008bd6 <_malloc_usable_size_r>:
 8008bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bda:	1f18      	subs	r0, r3, #4
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfbc      	itt	lt
 8008be0:	580b      	ldrlt	r3, [r1, r0]
 8008be2:	18c0      	addlt	r0, r0, r3
 8008be4:	4770      	bx	lr

08008be6 <__sfputc_r>:
 8008be6:	6893      	ldr	r3, [r2, #8]
 8008be8:	b410      	push	{r4}
 8008bea:	3b01      	subs	r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	6093      	str	r3, [r2, #8]
 8008bf0:	da07      	bge.n	8008c02 <__sfputc_r+0x1c>
 8008bf2:	6994      	ldr	r4, [r2, #24]
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	db01      	blt.n	8008bfc <__sfputc_r+0x16>
 8008bf8:	290a      	cmp	r1, #10
 8008bfa:	d102      	bne.n	8008c02 <__sfputc_r+0x1c>
 8008bfc:	bc10      	pop	{r4}
 8008bfe:	f000 b931 	b.w	8008e64 <__swbuf_r>
 8008c02:	6813      	ldr	r3, [r2, #0]
 8008c04:	1c58      	adds	r0, r3, #1
 8008c06:	6010      	str	r0, [r2, #0]
 8008c08:	7019      	strb	r1, [r3, #0]
 8008c0a:	4608      	mov	r0, r1
 8008c0c:	bc10      	pop	{r4}
 8008c0e:	4770      	bx	lr

08008c10 <__sfputs_r>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	4614      	mov	r4, r2
 8008c18:	18d5      	adds	r5, r2, r3
 8008c1a:	42ac      	cmp	r4, r5
 8008c1c:	d101      	bne.n	8008c22 <__sfputs_r+0x12>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e007      	b.n	8008c32 <__sfputs_r+0x22>
 8008c22:	463a      	mov	r2, r7
 8008c24:	4630      	mov	r0, r6
 8008c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2a:	f7ff ffdc 	bl	8008be6 <__sfputc_r>
 8008c2e:	1c43      	adds	r3, r0, #1
 8008c30:	d1f3      	bne.n	8008c1a <__sfputs_r+0xa>
 8008c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c34 <_vfiprintf_r>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	460d      	mov	r5, r1
 8008c3a:	4614      	mov	r4, r2
 8008c3c:	4698      	mov	r8, r3
 8008c3e:	4606      	mov	r6, r0
 8008c40:	b09d      	sub	sp, #116	@ 0x74
 8008c42:	b118      	cbz	r0, 8008c4c <_vfiprintf_r+0x18>
 8008c44:	6a03      	ldr	r3, [r0, #32]
 8008c46:	b90b      	cbnz	r3, 8008c4c <_vfiprintf_r+0x18>
 8008c48:	f7fc fe06 	bl	8005858 <__sinit>
 8008c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c4e:	07d9      	lsls	r1, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_vfiprintf_r+0x2a>
 8008c52:	89ab      	ldrh	r3, [r5, #12]
 8008c54:	059a      	lsls	r2, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_vfiprintf_r+0x2a>
 8008c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c5a:	f7fc ff2e 	bl	8005aba <__retarget_lock_acquire_recursive>
 8008c5e:	89ab      	ldrh	r3, [r5, #12]
 8008c60:	071b      	lsls	r3, r3, #28
 8008c62:	d501      	bpl.n	8008c68 <_vfiprintf_r+0x34>
 8008c64:	692b      	ldr	r3, [r5, #16]
 8008c66:	b99b      	cbnz	r3, 8008c90 <_vfiprintf_r+0x5c>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f938 	bl	8008ee0 <__swsetup_r>
 8008c70:	b170      	cbz	r0, 8008c90 <_vfiprintf_r+0x5c>
 8008c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c74:	07dc      	lsls	r4, r3, #31
 8008c76:	d504      	bpl.n	8008c82 <_vfiprintf_r+0x4e>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	b01d      	add	sp, #116	@ 0x74
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	89ab      	ldrh	r3, [r5, #12]
 8008c84:	0598      	lsls	r0, r3, #22
 8008c86:	d4f7      	bmi.n	8008c78 <_vfiprintf_r+0x44>
 8008c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8a:	f7fc ff17 	bl	8005abc <__retarget_lock_release_recursive>
 8008c8e:	e7f3      	b.n	8008c78 <_vfiprintf_r+0x44>
 8008c90:	2300      	movs	r3, #0
 8008c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c94:	2320      	movs	r3, #32
 8008c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c9a:	2330      	movs	r3, #48	@ 0x30
 8008c9c:	f04f 0901 	mov.w	r9, #1
 8008ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008e50 <_vfiprintf_r+0x21c>
 8008ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cac:	4623      	mov	r3, r4
 8008cae:	469a      	mov	sl, r3
 8008cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cb4:	b10a      	cbz	r2, 8008cba <_vfiprintf_r+0x86>
 8008cb6:	2a25      	cmp	r2, #37	@ 0x25
 8008cb8:	d1f9      	bne.n	8008cae <_vfiprintf_r+0x7a>
 8008cba:	ebba 0b04 	subs.w	fp, sl, r4
 8008cbe:	d00b      	beq.n	8008cd8 <_vfiprintf_r+0xa4>
 8008cc0:	465b      	mov	r3, fp
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f7ff ffa2 	bl	8008c10 <__sfputs_r>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f000 80a7 	beq.w	8008e20 <_vfiprintf_r+0x1ec>
 8008cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cd4:	445a      	add	r2, fp
 8008cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 809f 	beq.w	8008e20 <_vfiprintf_r+0x1ec>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cec:	f10a 0a01 	add.w	sl, sl, #1
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	9307      	str	r3, [sp, #28]
 8008cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cfa:	4654      	mov	r4, sl
 8008cfc:	2205      	movs	r2, #5
 8008cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d02:	4853      	ldr	r0, [pc, #332]	@ (8008e50 <_vfiprintf_r+0x21c>)
 8008d04:	f7fc fedb 	bl	8005abe <memchr>
 8008d08:	9a04      	ldr	r2, [sp, #16]
 8008d0a:	b9d8      	cbnz	r0, 8008d44 <_vfiprintf_r+0x110>
 8008d0c:	06d1      	lsls	r1, r2, #27
 8008d0e:	bf44      	itt	mi
 8008d10:	2320      	movmi	r3, #32
 8008d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d16:	0713      	lsls	r3, r2, #28
 8008d18:	bf44      	itt	mi
 8008d1a:	232b      	movmi	r3, #43	@ 0x2b
 8008d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d20:	f89a 3000 	ldrb.w	r3, [sl]
 8008d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d26:	d015      	beq.n	8008d54 <_vfiprintf_r+0x120>
 8008d28:	4654      	mov	r4, sl
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	f04f 0c0a 	mov.w	ip, #10
 8008d30:	9a07      	ldr	r2, [sp, #28]
 8008d32:	4621      	mov	r1, r4
 8008d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d38:	3b30      	subs	r3, #48	@ 0x30
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d94b      	bls.n	8008dd6 <_vfiprintf_r+0x1a2>
 8008d3e:	b1b0      	cbz	r0, 8008d6e <_vfiprintf_r+0x13a>
 8008d40:	9207      	str	r2, [sp, #28]
 8008d42:	e014      	b.n	8008d6e <_vfiprintf_r+0x13a>
 8008d44:	eba0 0308 	sub.w	r3, r0, r8
 8008d48:	fa09 f303 	lsl.w	r3, r9, r3
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	46a2      	mov	sl, r4
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	e7d2      	b.n	8008cfa <_vfiprintf_r+0xc6>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	1d19      	adds	r1, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	9103      	str	r1, [sp, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfbb      	ittet	lt
 8008d60:	425b      	neglt	r3, r3
 8008d62:	f042 0202 	orrlt.w	r2, r2, #2
 8008d66:	9307      	strge	r3, [sp, #28]
 8008d68:	9307      	strlt	r3, [sp, #28]
 8008d6a:	bfb8      	it	lt
 8008d6c:	9204      	strlt	r2, [sp, #16]
 8008d6e:	7823      	ldrb	r3, [r4, #0]
 8008d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d72:	d10a      	bne.n	8008d8a <_vfiprintf_r+0x156>
 8008d74:	7863      	ldrb	r3, [r4, #1]
 8008d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d78:	d132      	bne.n	8008de0 <_vfiprintf_r+0x1ac>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	3402      	adds	r4, #2
 8008d7e:	1d1a      	adds	r2, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	9203      	str	r2, [sp, #12]
 8008d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008e54 <_vfiprintf_r+0x220>
 8008d8e:	2203      	movs	r2, #3
 8008d90:	4650      	mov	r0, sl
 8008d92:	7821      	ldrb	r1, [r4, #0]
 8008d94:	f7fc fe93 	bl	8005abe <memchr>
 8008d98:	b138      	cbz	r0, 8008daa <_vfiprintf_r+0x176>
 8008d9a:	2240      	movs	r2, #64	@ 0x40
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	eba0 000a 	sub.w	r0, r0, sl
 8008da2:	4082      	lsls	r2, r0
 8008da4:	4313      	orrs	r3, r2
 8008da6:	3401      	adds	r4, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	2206      	movs	r2, #6
 8008db0:	4829      	ldr	r0, [pc, #164]	@ (8008e58 <_vfiprintf_r+0x224>)
 8008db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008db6:	f7fc fe82 	bl	8005abe <memchr>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d03f      	beq.n	8008e3e <_vfiprintf_r+0x20a>
 8008dbe:	4b27      	ldr	r3, [pc, #156]	@ (8008e5c <_vfiprintf_r+0x228>)
 8008dc0:	bb1b      	cbnz	r3, 8008e0a <_vfiprintf_r+0x1d6>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3307      	adds	r3, #7
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	3308      	adds	r3, #8
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	443b      	add	r3, r7
 8008dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dd4:	e76a      	b.n	8008cac <_vfiprintf_r+0x78>
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	2001      	movs	r0, #1
 8008dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dde:	e7a8      	b.n	8008d32 <_vfiprintf_r+0xfe>
 8008de0:	2300      	movs	r3, #0
 8008de2:	f04f 0c0a 	mov.w	ip, #10
 8008de6:	4619      	mov	r1, r3
 8008de8:	3401      	adds	r4, #1
 8008dea:	9305      	str	r3, [sp, #20]
 8008dec:	4620      	mov	r0, r4
 8008dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008df2:	3a30      	subs	r2, #48	@ 0x30
 8008df4:	2a09      	cmp	r2, #9
 8008df6:	d903      	bls.n	8008e00 <_vfiprintf_r+0x1cc>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0c6      	beq.n	8008d8a <_vfiprintf_r+0x156>
 8008dfc:	9105      	str	r1, [sp, #20]
 8008dfe:	e7c4      	b.n	8008d8a <_vfiprintf_r+0x156>
 8008e00:	4604      	mov	r4, r0
 8008e02:	2301      	movs	r3, #1
 8008e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e08:	e7f0      	b.n	8008dec <_vfiprintf_r+0x1b8>
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	462a      	mov	r2, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	4b13      	ldr	r3, [pc, #76]	@ (8008e60 <_vfiprintf_r+0x22c>)
 8008e14:	a904      	add	r1, sp, #16
 8008e16:	f7fb fec5 	bl	8004ba4 <_printf_float>
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	1c78      	adds	r0, r7, #1
 8008e1e:	d1d6      	bne.n	8008dce <_vfiprintf_r+0x19a>
 8008e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	d405      	bmi.n	8008e32 <_vfiprintf_r+0x1fe>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	059a      	lsls	r2, r3, #22
 8008e2a:	d402      	bmi.n	8008e32 <_vfiprintf_r+0x1fe>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e2e:	f7fc fe45 	bl	8005abc <__retarget_lock_release_recursive>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	065b      	lsls	r3, r3, #25
 8008e36:	f53f af1f 	bmi.w	8008c78 <_vfiprintf_r+0x44>
 8008e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e3c:	e71e      	b.n	8008c7c <_vfiprintf_r+0x48>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4630      	mov	r0, r6
 8008e46:	4b06      	ldr	r3, [pc, #24]	@ (8008e60 <_vfiprintf_r+0x22c>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	f7fc f949 	bl	80050e0 <_printf_i>
 8008e4e:	e7e4      	b.n	8008e1a <_vfiprintf_r+0x1e6>
 8008e50:	0800b2f1 	.word	0x0800b2f1
 8008e54:	0800b2f7 	.word	0x0800b2f7
 8008e58:	0800b2fb 	.word	0x0800b2fb
 8008e5c:	08004ba5 	.word	0x08004ba5
 8008e60:	08008c11 	.word	0x08008c11

08008e64 <__swbuf_r>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	460e      	mov	r6, r1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b118      	cbz	r0, 8008e76 <__swbuf_r+0x12>
 8008e6e:	6a03      	ldr	r3, [r0, #32]
 8008e70:	b90b      	cbnz	r3, 8008e76 <__swbuf_r+0x12>
 8008e72:	f7fc fcf1 	bl	8005858 <__sinit>
 8008e76:	69a3      	ldr	r3, [r4, #24]
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	071a      	lsls	r2, r3, #28
 8008e7e:	d501      	bpl.n	8008e84 <__swbuf_r+0x20>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	b943      	cbnz	r3, 8008e96 <__swbuf_r+0x32>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 f82a 	bl	8008ee0 <__swsetup_r>
 8008e8c:	b118      	cbz	r0, 8008e96 <__swbuf_r+0x32>
 8008e8e:	f04f 37ff 	mov.w	r7, #4294967295
 8008e92:	4638      	mov	r0, r7
 8008e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	6922      	ldr	r2, [r4, #16]
 8008e9a:	b2f6      	uxtb	r6, r6
 8008e9c:	1a98      	subs	r0, r3, r2
 8008e9e:	6963      	ldr	r3, [r4, #20]
 8008ea0:	4637      	mov	r7, r6
 8008ea2:	4283      	cmp	r3, r0
 8008ea4:	dc05      	bgt.n	8008eb2 <__swbuf_r+0x4e>
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f7ff fa73 	bl	8008394 <_fflush_r>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d1ed      	bne.n	8008e8e <__swbuf_r+0x2a>
 8008eb2:	68a3      	ldr	r3, [r4, #8]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	60a3      	str	r3, [r4, #8]
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	6022      	str	r2, [r4, #0]
 8008ebe:	701e      	strb	r6, [r3, #0]
 8008ec0:	6962      	ldr	r2, [r4, #20]
 8008ec2:	1c43      	adds	r3, r0, #1
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d004      	beq.n	8008ed2 <__swbuf_r+0x6e>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	07db      	lsls	r3, r3, #31
 8008ecc:	d5e1      	bpl.n	8008e92 <__swbuf_r+0x2e>
 8008ece:	2e0a      	cmp	r6, #10
 8008ed0:	d1df      	bne.n	8008e92 <__swbuf_r+0x2e>
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	f7ff fa5d 	bl	8008394 <_fflush_r>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d0d9      	beq.n	8008e92 <__swbuf_r+0x2e>
 8008ede:	e7d6      	b.n	8008e8e <__swbuf_r+0x2a>

08008ee0 <__swsetup_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4b29      	ldr	r3, [pc, #164]	@ (8008f88 <__swsetup_r+0xa8>)
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	460c      	mov	r4, r1
 8008eea:	b118      	cbz	r0, 8008ef4 <__swsetup_r+0x14>
 8008eec:	6a03      	ldr	r3, [r0, #32]
 8008eee:	b90b      	cbnz	r3, 8008ef4 <__swsetup_r+0x14>
 8008ef0:	f7fc fcb2 	bl	8005858 <__sinit>
 8008ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef8:	0719      	lsls	r1, r3, #28
 8008efa:	d422      	bmi.n	8008f42 <__swsetup_r+0x62>
 8008efc:	06da      	lsls	r2, r3, #27
 8008efe:	d407      	bmi.n	8008f10 <__swsetup_r+0x30>
 8008f00:	2209      	movs	r2, #9
 8008f02:	602a      	str	r2, [r5, #0]
 8008f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f08:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	e033      	b.n	8008f78 <__swsetup_r+0x98>
 8008f10:	0758      	lsls	r0, r3, #29
 8008f12:	d512      	bpl.n	8008f3a <__swsetup_r+0x5a>
 8008f14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f16:	b141      	cbz	r1, 8008f2a <__swsetup_r+0x4a>
 8008f18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	d002      	beq.n	8008f26 <__swsetup_r+0x46>
 8008f20:	4628      	mov	r0, r5
 8008f22:	f7fd fc3d 	bl	80067a0 <_free_r>
 8008f26:	2300      	movs	r3, #0
 8008f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	2300      	movs	r3, #0
 8008f34:	6063      	str	r3, [r4, #4]
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f043 0308 	orr.w	r3, r3, #8
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	b94b      	cbnz	r3, 8008f5a <__swsetup_r+0x7a>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f50:	d003      	beq.n	8008f5a <__swsetup_r+0x7a>
 8008f52:	4621      	mov	r1, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f882 	bl	800905e <__smakebuf_r>
 8008f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f5e:	f013 0201 	ands.w	r2, r3, #1
 8008f62:	d00a      	beq.n	8008f7a <__swsetup_r+0x9a>
 8008f64:	2200      	movs	r2, #0
 8008f66:	60a2      	str	r2, [r4, #8]
 8008f68:	6962      	ldr	r2, [r4, #20]
 8008f6a:	4252      	negs	r2, r2
 8008f6c:	61a2      	str	r2, [r4, #24]
 8008f6e:	6922      	ldr	r2, [r4, #16]
 8008f70:	b942      	cbnz	r2, 8008f84 <__swsetup_r+0xa4>
 8008f72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f76:	d1c5      	bne.n	8008f04 <__swsetup_r+0x24>
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	0799      	lsls	r1, r3, #30
 8008f7c:	bf58      	it	pl
 8008f7e:	6962      	ldrpl	r2, [r4, #20]
 8008f80:	60a2      	str	r2, [r4, #8]
 8008f82:	e7f4      	b.n	8008f6e <__swsetup_r+0x8e>
 8008f84:	2000      	movs	r0, #0
 8008f86:	e7f7      	b.n	8008f78 <__swsetup_r+0x98>
 8008f88:	200000a8 	.word	0x200000a8

08008f8c <_raise_r>:
 8008f8c:	291f      	cmp	r1, #31
 8008f8e:	b538      	push	{r3, r4, r5, lr}
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	d904      	bls.n	8008fa0 <_raise_r+0x14>
 8008f96:	2316      	movs	r3, #22
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008fa2:	b112      	cbz	r2, 8008faa <_raise_r+0x1e>
 8008fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fa8:	b94b      	cbnz	r3, 8008fbe <_raise_r+0x32>
 8008faa:	4628      	mov	r0, r5
 8008fac:	f000 f830 	bl	8009010 <_getpid_r>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fba:	f000 b817 	b.w	8008fec <_kill_r>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d00a      	beq.n	8008fd8 <_raise_r+0x4c>
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	d103      	bne.n	8008fce <_raise_r+0x42>
 8008fc6:	2316      	movs	r3, #22
 8008fc8:	6003      	str	r3, [r0, #0]
 8008fca:	2001      	movs	r0, #1
 8008fcc:	e7e7      	b.n	8008f9e <_raise_r+0x12>
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008fd6:	4798      	blx	r3
 8008fd8:	2000      	movs	r0, #0
 8008fda:	e7e0      	b.n	8008f9e <_raise_r+0x12>

08008fdc <raise>:
 8008fdc:	4b02      	ldr	r3, [pc, #8]	@ (8008fe8 <raise+0xc>)
 8008fde:	4601      	mov	r1, r0
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f7ff bfd3 	b.w	8008f8c <_raise_r>
 8008fe6:	bf00      	nop
 8008fe8:	200000a8 	.word	0x200000a8

08008fec <_kill_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	2300      	movs	r3, #0
 8008ff0:	4d06      	ldr	r5, [pc, #24]	@ (800900c <_kill_r+0x20>)
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	f7f9 f952 	bl	80022a2 <_kill>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d102      	bne.n	8009008 <_kill_r+0x1c>
 8009002:	682b      	ldr	r3, [r5, #0]
 8009004:	b103      	cbz	r3, 8009008 <_kill_r+0x1c>
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	bd38      	pop	{r3, r4, r5, pc}
 800900a:	bf00      	nop
 800900c:	200008d0 	.word	0x200008d0

08009010 <_getpid_r>:
 8009010:	f7f9 b940 	b.w	8002294 <_getpid>

08009014 <__swhatbuf_r>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800901c:	4615      	mov	r5, r2
 800901e:	2900      	cmp	r1, #0
 8009020:	461e      	mov	r6, r3
 8009022:	b096      	sub	sp, #88	@ 0x58
 8009024:	da0c      	bge.n	8009040 <__swhatbuf_r+0x2c>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	2100      	movs	r1, #0
 800902a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800902e:	bf14      	ite	ne
 8009030:	2340      	movne	r3, #64	@ 0x40
 8009032:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009036:	2000      	movs	r0, #0
 8009038:	6031      	str	r1, [r6, #0]
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	b016      	add	sp, #88	@ 0x58
 800903e:	bd70      	pop	{r4, r5, r6, pc}
 8009040:	466a      	mov	r2, sp
 8009042:	f000 f849 	bl	80090d8 <_fstat_r>
 8009046:	2800      	cmp	r0, #0
 8009048:	dbed      	blt.n	8009026 <__swhatbuf_r+0x12>
 800904a:	9901      	ldr	r1, [sp, #4]
 800904c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009050:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009054:	4259      	negs	r1, r3
 8009056:	4159      	adcs	r1, r3
 8009058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800905c:	e7eb      	b.n	8009036 <__swhatbuf_r+0x22>

0800905e <__smakebuf_r>:
 800905e:	898b      	ldrh	r3, [r1, #12]
 8009060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009062:	079d      	lsls	r5, r3, #30
 8009064:	4606      	mov	r6, r0
 8009066:	460c      	mov	r4, r1
 8009068:	d507      	bpl.n	800907a <__smakebuf_r+0x1c>
 800906a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800906e:	6023      	str	r3, [r4, #0]
 8009070:	6123      	str	r3, [r4, #16]
 8009072:	2301      	movs	r3, #1
 8009074:	6163      	str	r3, [r4, #20]
 8009076:	b003      	add	sp, #12
 8009078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800907a:	466a      	mov	r2, sp
 800907c:	ab01      	add	r3, sp, #4
 800907e:	f7ff ffc9 	bl	8009014 <__swhatbuf_r>
 8009082:	9f00      	ldr	r7, [sp, #0]
 8009084:	4605      	mov	r5, r0
 8009086:	4639      	mov	r1, r7
 8009088:	4630      	mov	r0, r6
 800908a:	f7fd fbfb 	bl	8006884 <_malloc_r>
 800908e:	b948      	cbnz	r0, 80090a4 <__smakebuf_r+0x46>
 8009090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d4ee      	bmi.n	8009076 <__smakebuf_r+0x18>
 8009098:	f023 0303 	bic.w	r3, r3, #3
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	81a3      	strh	r3, [r4, #12]
 80090a2:	e7e2      	b.n	800906a <__smakebuf_r+0xc>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80090aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	9b01      	ldr	r3, [sp, #4]
 80090b2:	6020      	str	r0, [r4, #0]
 80090b4:	b15b      	cbz	r3, 80090ce <__smakebuf_r+0x70>
 80090b6:	4630      	mov	r0, r6
 80090b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090bc:	f000 f81e 	bl	80090fc <_isatty_r>
 80090c0:	b128      	cbz	r0, 80090ce <__smakebuf_r+0x70>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	f043 0301 	orr.w	r3, r3, #1
 80090cc:	81a3      	strh	r3, [r4, #12]
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	431d      	orrs	r5, r3
 80090d2:	81a5      	strh	r5, [r4, #12]
 80090d4:	e7cf      	b.n	8009076 <__smakebuf_r+0x18>
	...

080090d8 <_fstat_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	2300      	movs	r3, #0
 80090dc:	4d06      	ldr	r5, [pc, #24]	@ (80090f8 <_fstat_r+0x20>)
 80090de:	4604      	mov	r4, r0
 80090e0:	4608      	mov	r0, r1
 80090e2:	4611      	mov	r1, r2
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	f7f9 f93b 	bl	8002360 <_fstat>
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	d102      	bne.n	80090f4 <_fstat_r+0x1c>
 80090ee:	682b      	ldr	r3, [r5, #0]
 80090f0:	b103      	cbz	r3, 80090f4 <_fstat_r+0x1c>
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	bf00      	nop
 80090f8:	200008d0 	.word	0x200008d0

080090fc <_isatty_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	2300      	movs	r3, #0
 8009100:	4d05      	ldr	r5, [pc, #20]	@ (8009118 <_isatty_r+0x1c>)
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f9 f939 	bl	800237e <_isatty>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_isatty_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_isatty_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	200008d0 	.word	0x200008d0

0800911c <atan2>:
 800911c:	f000 bc94 	b.w	8009a48 <__ieee754_atan2>

08009120 <sqrt>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	f000 fa3f 	bl	80095a8 <__ieee754_sqrt>
 800912a:	4632      	mov	r2, r6
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	463b      	mov	r3, r7
 8009132:	4630      	mov	r0, r6
 8009134:	4639      	mov	r1, r7
 8009136:	f7f7 fc69 	bl	8000a0c <__aeabi_dcmpun>
 800913a:	b990      	cbnz	r0, 8009162 <sqrt+0x42>
 800913c:	2200      	movs	r2, #0
 800913e:	2300      	movs	r3, #0
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 fc3a 	bl	80009bc <__aeabi_dcmplt>
 8009148:	b158      	cbz	r0, 8009162 <sqrt+0x42>
 800914a:	f7fc fc8b 	bl	8005a64 <__errno>
 800914e:	2321      	movs	r3, #33	@ 0x21
 8009150:	2200      	movs	r2, #0
 8009152:	6003      	str	r3, [r0, #0]
 8009154:	2300      	movs	r3, #0
 8009156:	4610      	mov	r0, r2
 8009158:	4619      	mov	r1, r3
 800915a:	f7f7 fae7 	bl	800072c <__aeabi_ddiv>
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009168 <atan>:
 8009168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	4bbc      	ldr	r3, [pc, #752]	@ (8009460 <atan+0x2f8>)
 800916e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009172:	429e      	cmp	r6, r3
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	468b      	mov	fp, r1
 800917a:	d918      	bls.n	80091ae <atan+0x46>
 800917c:	4bb9      	ldr	r3, [pc, #740]	@ (8009464 <atan+0x2fc>)
 800917e:	429e      	cmp	r6, r3
 8009180:	d801      	bhi.n	8009186 <atan+0x1e>
 8009182:	d109      	bne.n	8009198 <atan+0x30>
 8009184:	b140      	cbz	r0, 8009198 <atan+0x30>
 8009186:	4622      	mov	r2, r4
 8009188:	462b      	mov	r3, r5
 800918a:	4620      	mov	r0, r4
 800918c:	4629      	mov	r1, r5
 800918e:	f7f6 ffed 	bl	800016c <__adddf3>
 8009192:	4604      	mov	r4, r0
 8009194:	460d      	mov	r5, r1
 8009196:	e006      	b.n	80091a6 <atan+0x3e>
 8009198:	f1bb 0f00 	cmp.w	fp, #0
 800919c:	f340 8123 	ble.w	80093e6 <atan+0x27e>
 80091a0:	a593      	add	r5, pc, #588	@ (adr r5, 80093f0 <atan+0x288>)
 80091a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80091a6:	4620      	mov	r0, r4
 80091a8:	4629      	mov	r1, r5
 80091aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ae:	4bae      	ldr	r3, [pc, #696]	@ (8009468 <atan+0x300>)
 80091b0:	429e      	cmp	r6, r3
 80091b2:	d811      	bhi.n	80091d8 <atan+0x70>
 80091b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80091b8:	429e      	cmp	r6, r3
 80091ba:	d80a      	bhi.n	80091d2 <atan+0x6a>
 80091bc:	a38e      	add	r3, pc, #568	@ (adr r3, 80093f8 <atan+0x290>)
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f7f6 ffd3 	bl	800016c <__adddf3>
 80091c6:	2200      	movs	r2, #0
 80091c8:	4ba8      	ldr	r3, [pc, #672]	@ (800946c <atan+0x304>)
 80091ca:	f7f7 fc15 	bl	80009f8 <__aeabi_dcmpgt>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d1e9      	bne.n	80091a6 <atan+0x3e>
 80091d2:	f04f 3aff 	mov.w	sl, #4294967295
 80091d6:	e027      	b.n	8009228 <atan+0xc0>
 80091d8:	f000 f99c 	bl	8009514 <fabs>
 80091dc:	4ba4      	ldr	r3, [pc, #656]	@ (8009470 <atan+0x308>)
 80091de:	4604      	mov	r4, r0
 80091e0:	429e      	cmp	r6, r3
 80091e2:	460d      	mov	r5, r1
 80091e4:	f200 80b8 	bhi.w	8009358 <atan+0x1f0>
 80091e8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80091ec:	429e      	cmp	r6, r3
 80091ee:	f200 809c 	bhi.w	800932a <atan+0x1c2>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	f7f6 ffb9 	bl	800016c <__adddf3>
 80091fa:	2200      	movs	r2, #0
 80091fc:	4b9b      	ldr	r3, [pc, #620]	@ (800946c <atan+0x304>)
 80091fe:	f7f6 ffb3 	bl	8000168 <__aeabi_dsub>
 8009202:	2200      	movs	r2, #0
 8009204:	4606      	mov	r6, r0
 8009206:	460f      	mov	r7, r1
 8009208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800920c:	4620      	mov	r0, r4
 800920e:	4629      	mov	r1, r5
 8009210:	f7f6 ffac 	bl	800016c <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4630      	mov	r0, r6
 800921a:	4639      	mov	r1, r7
 800921c:	f7f7 fa86 	bl	800072c <__aeabi_ddiv>
 8009220:	f04f 0a00 	mov.w	sl, #0
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	4622      	mov	r2, r4
 800922a:	462b      	mov	r3, r5
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 f952 	bl	80004d8 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4680      	mov	r8, r0
 800923a:	4689      	mov	r9, r1
 800923c:	f7f7 f94c 	bl	80004d8 <__aeabi_dmul>
 8009240:	a36f      	add	r3, pc, #444	@ (adr r3, 8009400 <atan+0x298>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f7f7 f945 	bl	80004d8 <__aeabi_dmul>
 800924e:	a36e      	add	r3, pc, #440	@ (adr r3, 8009408 <atan+0x2a0>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f6 ff8a 	bl	800016c <__adddf3>
 8009258:	4632      	mov	r2, r6
 800925a:	463b      	mov	r3, r7
 800925c:	f7f7 f93c 	bl	80004d8 <__aeabi_dmul>
 8009260:	a36b      	add	r3, pc, #428	@ (adr r3, 8009410 <atan+0x2a8>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f6 ff81 	bl	800016c <__adddf3>
 800926a:	4632      	mov	r2, r6
 800926c:	463b      	mov	r3, r7
 800926e:	f7f7 f933 	bl	80004d8 <__aeabi_dmul>
 8009272:	a369      	add	r3, pc, #420	@ (adr r3, 8009418 <atan+0x2b0>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f6 ff78 	bl	800016c <__adddf3>
 800927c:	4632      	mov	r2, r6
 800927e:	463b      	mov	r3, r7
 8009280:	f7f7 f92a 	bl	80004d8 <__aeabi_dmul>
 8009284:	a366      	add	r3, pc, #408	@ (adr r3, 8009420 <atan+0x2b8>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f6 ff6f 	bl	800016c <__adddf3>
 800928e:	4632      	mov	r2, r6
 8009290:	463b      	mov	r3, r7
 8009292:	f7f7 f921 	bl	80004d8 <__aeabi_dmul>
 8009296:	a364      	add	r3, pc, #400	@ (adr r3, 8009428 <atan+0x2c0>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 ff66 	bl	800016c <__adddf3>
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	f7f7 f918 	bl	80004d8 <__aeabi_dmul>
 80092a8:	a361      	add	r3, pc, #388	@ (adr r3, 8009430 <atan+0x2c8>)
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	4680      	mov	r8, r0
 80092b0:	4689      	mov	r9, r1
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 f90f 	bl	80004d8 <__aeabi_dmul>
 80092ba:	a35f      	add	r3, pc, #380	@ (adr r3, 8009438 <atan+0x2d0>)
 80092bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c0:	f7f6 ff52 	bl	8000168 <__aeabi_dsub>
 80092c4:	4632      	mov	r2, r6
 80092c6:	463b      	mov	r3, r7
 80092c8:	f7f7 f906 	bl	80004d8 <__aeabi_dmul>
 80092cc:	a35c      	add	r3, pc, #368	@ (adr r3, 8009440 <atan+0x2d8>)
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f7f6 ff49 	bl	8000168 <__aeabi_dsub>
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	f7f7 f8fd 	bl	80004d8 <__aeabi_dmul>
 80092de:	a35a      	add	r3, pc, #360	@ (adr r3, 8009448 <atan+0x2e0>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f6 ff40 	bl	8000168 <__aeabi_dsub>
 80092e8:	4632      	mov	r2, r6
 80092ea:	463b      	mov	r3, r7
 80092ec:	f7f7 f8f4 	bl	80004d8 <__aeabi_dmul>
 80092f0:	a357      	add	r3, pc, #348	@ (adr r3, 8009450 <atan+0x2e8>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f6 ff37 	bl	8000168 <__aeabi_dsub>
 80092fa:	4632      	mov	r2, r6
 80092fc:	463b      	mov	r3, r7
 80092fe:	f7f7 f8eb 	bl	80004d8 <__aeabi_dmul>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f6 ff2f 	bl	800016c <__adddf3>
 800930e:	4622      	mov	r2, r4
 8009310:	462b      	mov	r3, r5
 8009312:	f7f7 f8e1 	bl	80004d8 <__aeabi_dmul>
 8009316:	f1ba 3fff 	cmp.w	sl, #4294967295
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	d144      	bne.n	80093aa <atan+0x242>
 8009320:	4620      	mov	r0, r4
 8009322:	4629      	mov	r1, r5
 8009324:	f7f6 ff20 	bl	8000168 <__aeabi_dsub>
 8009328:	e733      	b.n	8009192 <atan+0x2a>
 800932a:	2200      	movs	r2, #0
 800932c:	4b4f      	ldr	r3, [pc, #316]	@ (800946c <atan+0x304>)
 800932e:	f7f6 ff1b 	bl	8000168 <__aeabi_dsub>
 8009332:	2200      	movs	r2, #0
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	4b4b      	ldr	r3, [pc, #300]	@ (800946c <atan+0x304>)
 800933e:	f7f6 ff15 	bl	800016c <__adddf3>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	f7f7 f9ef 	bl	800072c <__aeabi_ddiv>
 800934e:	f04f 0a01 	mov.w	sl, #1
 8009352:	4604      	mov	r4, r0
 8009354:	460d      	mov	r5, r1
 8009356:	e767      	b.n	8009228 <atan+0xc0>
 8009358:	4b46      	ldr	r3, [pc, #280]	@ (8009474 <atan+0x30c>)
 800935a:	429e      	cmp	r6, r3
 800935c:	d21a      	bcs.n	8009394 <atan+0x22c>
 800935e:	2200      	movs	r2, #0
 8009360:	4b45      	ldr	r3, [pc, #276]	@ (8009478 <atan+0x310>)
 8009362:	f7f6 ff01 	bl	8000168 <__aeabi_dsub>
 8009366:	2200      	movs	r2, #0
 8009368:	4606      	mov	r6, r0
 800936a:	460f      	mov	r7, r1
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	4b41      	ldr	r3, [pc, #260]	@ (8009478 <atan+0x310>)
 8009372:	f7f7 f8b1 	bl	80004d8 <__aeabi_dmul>
 8009376:	2200      	movs	r2, #0
 8009378:	4b3c      	ldr	r3, [pc, #240]	@ (800946c <atan+0x304>)
 800937a:	f7f6 fef7 	bl	800016c <__adddf3>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4630      	mov	r0, r6
 8009384:	4639      	mov	r1, r7
 8009386:	f7f7 f9d1 	bl	800072c <__aeabi_ddiv>
 800938a:	f04f 0a02 	mov.w	sl, #2
 800938e:	4604      	mov	r4, r0
 8009390:	460d      	mov	r5, r1
 8009392:	e749      	b.n	8009228 <atan+0xc0>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	2000      	movs	r0, #0
 800939a:	4938      	ldr	r1, [pc, #224]	@ (800947c <atan+0x314>)
 800939c:	f7f7 f9c6 	bl	800072c <__aeabi_ddiv>
 80093a0:	f04f 0a03 	mov.w	sl, #3
 80093a4:	4604      	mov	r4, r0
 80093a6:	460d      	mov	r5, r1
 80093a8:	e73e      	b.n	8009228 <atan+0xc0>
 80093aa:	4b35      	ldr	r3, [pc, #212]	@ (8009480 <atan+0x318>)
 80093ac:	4e35      	ldr	r6, [pc, #212]	@ (8009484 <atan+0x31c>)
 80093ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f7f6 fed7 	bl	8000168 <__aeabi_dsub>
 80093ba:	4622      	mov	r2, r4
 80093bc:	462b      	mov	r3, r5
 80093be:	f7f6 fed3 	bl	8000168 <__aeabi_dsub>
 80093c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093ce:	f7f6 fecb 	bl	8000168 <__aeabi_dsub>
 80093d2:	f1bb 0f00 	cmp.w	fp, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	460d      	mov	r5, r1
 80093da:	f6bf aee4 	bge.w	80091a6 <atan+0x3e>
 80093de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093e2:	461d      	mov	r5, r3
 80093e4:	e6df      	b.n	80091a6 <atan+0x3e>
 80093e6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009458 <atan+0x2f0>)
 80093e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093ec:	e6db      	b.n	80091a6 <atan+0x3e>
 80093ee:	bf00      	nop
 80093f0:	54442d18 	.word	0x54442d18
 80093f4:	3ff921fb 	.word	0x3ff921fb
 80093f8:	8800759c 	.word	0x8800759c
 80093fc:	7e37e43c 	.word	0x7e37e43c
 8009400:	e322da11 	.word	0xe322da11
 8009404:	3f90ad3a 	.word	0x3f90ad3a
 8009408:	24760deb 	.word	0x24760deb
 800940c:	3fa97b4b 	.word	0x3fa97b4b
 8009410:	a0d03d51 	.word	0xa0d03d51
 8009414:	3fb10d66 	.word	0x3fb10d66
 8009418:	c54c206e 	.word	0xc54c206e
 800941c:	3fb745cd 	.word	0x3fb745cd
 8009420:	920083ff 	.word	0x920083ff
 8009424:	3fc24924 	.word	0x3fc24924
 8009428:	5555550d 	.word	0x5555550d
 800942c:	3fd55555 	.word	0x3fd55555
 8009430:	2c6a6c2f 	.word	0x2c6a6c2f
 8009434:	bfa2b444 	.word	0xbfa2b444
 8009438:	52defd9a 	.word	0x52defd9a
 800943c:	3fadde2d 	.word	0x3fadde2d
 8009440:	af749a6d 	.word	0xaf749a6d
 8009444:	3fb3b0f2 	.word	0x3fb3b0f2
 8009448:	fe231671 	.word	0xfe231671
 800944c:	3fbc71c6 	.word	0x3fbc71c6
 8009450:	9998ebc4 	.word	0x9998ebc4
 8009454:	3fc99999 	.word	0x3fc99999
 8009458:	54442d18 	.word	0x54442d18
 800945c:	bff921fb 	.word	0xbff921fb
 8009460:	440fffff 	.word	0x440fffff
 8009464:	7ff00000 	.word	0x7ff00000
 8009468:	3fdbffff 	.word	0x3fdbffff
 800946c:	3ff00000 	.word	0x3ff00000
 8009470:	3ff2ffff 	.word	0x3ff2ffff
 8009474:	40038000 	.word	0x40038000
 8009478:	3ff80000 	.word	0x3ff80000
 800947c:	bff00000 	.word	0xbff00000
 8009480:	0800b3a8 	.word	0x0800b3a8
 8009484:	0800b3c8 	.word	0x0800b3c8

08009488 <cos>:
 8009488:	b530      	push	{r4, r5, lr}
 800948a:	4d20      	ldr	r5, [pc, #128]	@ (800950c <cos+0x84>)
 800948c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009490:	42ac      	cmp	r4, r5
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	b087      	sub	sp, #28
 8009498:	d806      	bhi.n	80094a8 <cos+0x20>
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	b007      	add	sp, #28
 80094a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094a4:	f000 b958 	b.w	8009758 <__kernel_cos>
 80094a8:	4d19      	ldr	r5, [pc, #100]	@ (8009510 <cos+0x88>)
 80094aa:	42ac      	cmp	r4, r5
 80094ac:	d903      	bls.n	80094b6 <cos+0x2e>
 80094ae:	f7f6 fe5b 	bl	8000168 <__aeabi_dsub>
 80094b2:	b007      	add	sp, #28
 80094b4:	bd30      	pop	{r4, r5, pc}
 80094b6:	aa02      	add	r2, sp, #8
 80094b8:	f000 fb9a 	bl	8009bf0 <__ieee754_rem_pio2>
 80094bc:	f000 0003 	and.w	r0, r0, #3
 80094c0:	2801      	cmp	r0, #1
 80094c2:	d009      	beq.n	80094d8 <cos+0x50>
 80094c4:	2802      	cmp	r0, #2
 80094c6:	d011      	beq.n	80094ec <cos+0x64>
 80094c8:	b9b8      	cbnz	r0, 80094fa <cos+0x72>
 80094ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d2:	f000 f941 	bl	8009758 <__kernel_cos>
 80094d6:	e7ec      	b.n	80094b2 <cos+0x2a>
 80094d8:	9000      	str	r0, [sp, #0]
 80094da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094e2:	f000 f9f9 	bl	80098d8 <__kernel_sin>
 80094e6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80094ea:	e7e2      	b.n	80094b2 <cos+0x2a>
 80094ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094f4:	f000 f930 	bl	8009758 <__kernel_cos>
 80094f8:	e7f5      	b.n	80094e6 <cos+0x5e>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	f000 f9e7 	bl	80098d8 <__kernel_sin>
 800950a:	e7d2      	b.n	80094b2 <cos+0x2a>
 800950c:	3fe921fb 	.word	0x3fe921fb
 8009510:	7fefffff 	.word	0x7fefffff

08009514 <fabs>:
 8009514:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009518:	4619      	mov	r1, r3
 800951a:	4770      	bx	lr

0800951c <sin>:
 800951c:	b530      	push	{r4, r5, lr}
 800951e:	4d20      	ldr	r5, [pc, #128]	@ (80095a0 <sin+0x84>)
 8009520:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009524:	42ac      	cmp	r4, r5
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	b087      	sub	sp, #28
 800952c:	d806      	bhi.n	800953c <sin+0x20>
 800952e:	2300      	movs	r3, #0
 8009530:	2200      	movs	r2, #0
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	f000 f9cf 	bl	80098d8 <__kernel_sin>
 800953a:	e004      	b.n	8009546 <sin+0x2a>
 800953c:	4d19      	ldr	r5, [pc, #100]	@ (80095a4 <sin+0x88>)
 800953e:	42ac      	cmp	r4, r5
 8009540:	d903      	bls.n	800954a <sin+0x2e>
 8009542:	f7f6 fe11 	bl	8000168 <__aeabi_dsub>
 8009546:	b007      	add	sp, #28
 8009548:	bd30      	pop	{r4, r5, pc}
 800954a:	aa02      	add	r2, sp, #8
 800954c:	f000 fb50 	bl	8009bf0 <__ieee754_rem_pio2>
 8009550:	f000 0003 	and.w	r0, r0, #3
 8009554:	2801      	cmp	r0, #1
 8009556:	d009      	beq.n	800956c <sin+0x50>
 8009558:	2802      	cmp	r0, #2
 800955a:	d00e      	beq.n	800957a <sin+0x5e>
 800955c:	b9c0      	cbnz	r0, 8009590 <sin+0x74>
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	2301      	movs	r3, #1
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956a:	e7e4      	b.n	8009536 <sin+0x1a>
 800956c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009574:	f000 f8f0 	bl	8009758 <__kernel_cos>
 8009578:	e7e5      	b.n	8009546 <sin+0x2a>
 800957a:	2301      	movs	r3, #1
 800957c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009586:	f000 f9a7 	bl	80098d8 <__kernel_sin>
 800958a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800958e:	e7da      	b.n	8009546 <sin+0x2a>
 8009590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009598:	f000 f8de 	bl	8009758 <__kernel_cos>
 800959c:	e7f5      	b.n	800958a <sin+0x6e>
 800959e:	bf00      	nop
 80095a0:	3fe921fb 	.word	0x3fe921fb
 80095a4:	7fefffff 	.word	0x7fefffff

080095a8 <__ieee754_sqrt>:
 80095a8:	4a67      	ldr	r2, [pc, #412]	@ (8009748 <__ieee754_sqrt+0x1a0>)
 80095aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ae:	438a      	bics	r2, r1
 80095b0:	4606      	mov	r6, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	460b      	mov	r3, r1
 80095b6:	4604      	mov	r4, r0
 80095b8:	d10e      	bne.n	80095d8 <__ieee754_sqrt+0x30>
 80095ba:	4602      	mov	r2, r0
 80095bc:	f7f6 ff8c 	bl	80004d8 <__aeabi_dmul>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4630      	mov	r0, r6
 80095c6:	4639      	mov	r1, r7
 80095c8:	f7f6 fdd0 	bl	800016c <__adddf3>
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	4630      	mov	r0, r6
 80095d2:	4639      	mov	r1, r7
 80095d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d8:	2900      	cmp	r1, #0
 80095da:	dc0c      	bgt.n	80095f6 <__ieee754_sqrt+0x4e>
 80095dc:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80095e0:	4302      	orrs	r2, r0
 80095e2:	d0f5      	beq.n	80095d0 <__ieee754_sqrt+0x28>
 80095e4:	b189      	cbz	r1, 800960a <__ieee754_sqrt+0x62>
 80095e6:	4602      	mov	r2, r0
 80095e8:	f7f6 fdbe 	bl	8000168 <__aeabi_dsub>
 80095ec:	4602      	mov	r2, r0
 80095ee:	460b      	mov	r3, r1
 80095f0:	f7f7 f89c 	bl	800072c <__aeabi_ddiv>
 80095f4:	e7ea      	b.n	80095cc <__ieee754_sqrt+0x24>
 80095f6:	150a      	asrs	r2, r1, #20
 80095f8:	d115      	bne.n	8009626 <__ieee754_sqrt+0x7e>
 80095fa:	2100      	movs	r1, #0
 80095fc:	e009      	b.n	8009612 <__ieee754_sqrt+0x6a>
 80095fe:	0ae3      	lsrs	r3, r4, #11
 8009600:	3a15      	subs	r2, #21
 8009602:	0564      	lsls	r4, r4, #21
 8009604:	2b00      	cmp	r3, #0
 8009606:	d0fa      	beq.n	80095fe <__ieee754_sqrt+0x56>
 8009608:	e7f7      	b.n	80095fa <__ieee754_sqrt+0x52>
 800960a:	460a      	mov	r2, r1
 800960c:	e7fa      	b.n	8009604 <__ieee754_sqrt+0x5c>
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	3101      	adds	r1, #1
 8009612:	02d8      	lsls	r0, r3, #11
 8009614:	d5fb      	bpl.n	800960e <__ieee754_sqrt+0x66>
 8009616:	1e48      	subs	r0, r1, #1
 8009618:	1a12      	subs	r2, r2, r0
 800961a:	f1c1 0020 	rsb	r0, r1, #32
 800961e:	fa24 f000 	lsr.w	r0, r4, r0
 8009622:	4303      	orrs	r3, r0
 8009624:	408c      	lsls	r4, r1
 8009626:	2600      	movs	r6, #0
 8009628:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800962c:	2116      	movs	r1, #22
 800962e:	07d2      	lsls	r2, r2, #31
 8009630:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009634:	4632      	mov	r2, r6
 8009636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800963a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800963e:	bf5c      	itt	pl
 8009640:	005b      	lslpl	r3, r3, #1
 8009642:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009646:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800964a:	bf58      	it	pl
 800964c:	0064      	lslpl	r4, r4, #1
 800964e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009652:	107f      	asrs	r7, r7, #1
 8009654:	0064      	lsls	r4, r4, #1
 8009656:	1815      	adds	r5, r2, r0
 8009658:	429d      	cmp	r5, r3
 800965a:	bfde      	ittt	le
 800965c:	182a      	addle	r2, r5, r0
 800965e:	1b5b      	suble	r3, r3, r5
 8009660:	1836      	addle	r6, r6, r0
 8009662:	0fe5      	lsrs	r5, r4, #31
 8009664:	3901      	subs	r1, #1
 8009666:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800966a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800966e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009672:	d1f0      	bne.n	8009656 <__ieee754_sqrt+0xae>
 8009674:	460d      	mov	r5, r1
 8009676:	f04f 0a20 	mov.w	sl, #32
 800967a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800967e:	429a      	cmp	r2, r3
 8009680:	eb01 0c00 	add.w	ip, r1, r0
 8009684:	db02      	blt.n	800968c <__ieee754_sqrt+0xe4>
 8009686:	d113      	bne.n	80096b0 <__ieee754_sqrt+0x108>
 8009688:	45a4      	cmp	ip, r4
 800968a:	d811      	bhi.n	80096b0 <__ieee754_sqrt+0x108>
 800968c:	f1bc 0f00 	cmp.w	ip, #0
 8009690:	eb0c 0100 	add.w	r1, ip, r0
 8009694:	da42      	bge.n	800971c <__ieee754_sqrt+0x174>
 8009696:	2900      	cmp	r1, #0
 8009698:	db40      	blt.n	800971c <__ieee754_sqrt+0x174>
 800969a:	f102 0e01 	add.w	lr, r2, #1
 800969e:	1a9b      	subs	r3, r3, r2
 80096a0:	4672      	mov	r2, lr
 80096a2:	45a4      	cmp	ip, r4
 80096a4:	bf88      	it	hi
 80096a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80096aa:	eba4 040c 	sub.w	r4, r4, ip
 80096ae:	4405      	add	r5, r0
 80096b0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80096b4:	f1ba 0a01 	subs.w	sl, sl, #1
 80096b8:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80096bc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80096c0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80096c4:	d1db      	bne.n	800967e <__ieee754_sqrt+0xd6>
 80096c6:	431c      	orrs	r4, r3
 80096c8:	d01a      	beq.n	8009700 <__ieee754_sqrt+0x158>
 80096ca:	4c20      	ldr	r4, [pc, #128]	@ (800974c <__ieee754_sqrt+0x1a4>)
 80096cc:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009750 <__ieee754_sqrt+0x1a8>
 80096d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80096d4:	e9db 2300 	ldrd	r2, r3, [fp]
 80096d8:	f7f6 fd46 	bl	8000168 <__aeabi_dsub>
 80096dc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f7 f972 	bl	80009d0 <__aeabi_dcmple>
 80096ec:	b140      	cbz	r0, 8009700 <__ieee754_sqrt+0x158>
 80096ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80096f2:	e9db 2300 	ldrd	r2, r3, [fp]
 80096f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80096fa:	d111      	bne.n	8009720 <__ieee754_sqrt+0x178>
 80096fc:	4655      	mov	r5, sl
 80096fe:	3601      	adds	r6, #1
 8009700:	1072      	asrs	r2, r6, #1
 8009702:	086b      	lsrs	r3, r5, #1
 8009704:	07f1      	lsls	r1, r6, #31
 8009706:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800970a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800970e:	bf48      	it	mi
 8009710:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009714:	4618      	mov	r0, r3
 8009716:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800971a:	e757      	b.n	80095cc <__ieee754_sqrt+0x24>
 800971c:	4696      	mov	lr, r2
 800971e:	e7be      	b.n	800969e <__ieee754_sqrt+0xf6>
 8009720:	f7f6 fd24 	bl	800016c <__adddf3>
 8009724:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4640      	mov	r0, r8
 800972e:	4649      	mov	r1, r9
 8009730:	f7f7 f944 	bl	80009bc <__aeabi_dcmplt>
 8009734:	b120      	cbz	r0, 8009740 <__ieee754_sqrt+0x198>
 8009736:	1ca8      	adds	r0, r5, #2
 8009738:	bf08      	it	eq
 800973a:	3601      	addeq	r6, #1
 800973c:	3502      	adds	r5, #2
 800973e:	e7df      	b.n	8009700 <__ieee754_sqrt+0x158>
 8009740:	1c6b      	adds	r3, r5, #1
 8009742:	f023 0501 	bic.w	r5, r3, #1
 8009746:	e7db      	b.n	8009700 <__ieee754_sqrt+0x158>
 8009748:	7ff00000 	.word	0x7ff00000
 800974c:	20000270 	.word	0x20000270
 8009750:	20000268 	.word	0x20000268
 8009754:	00000000 	.word	0x00000000

08009758 <__kernel_cos>:
 8009758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8009760:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8009764:	4680      	mov	r8, r0
 8009766:	4689      	mov	r9, r1
 8009768:	e9cd 2300 	strd	r2, r3, [sp]
 800976c:	d204      	bcs.n	8009778 <__kernel_cos+0x20>
 800976e:	f7f7 f963 	bl	8000a38 <__aeabi_d2iz>
 8009772:	2800      	cmp	r0, #0
 8009774:	f000 8086 	beq.w	8009884 <__kernel_cos+0x12c>
 8009778:	4642      	mov	r2, r8
 800977a:	464b      	mov	r3, r9
 800977c:	4640      	mov	r0, r8
 800977e:	4649      	mov	r1, r9
 8009780:	f7f6 feaa 	bl	80004d8 <__aeabi_dmul>
 8009784:	2200      	movs	r2, #0
 8009786:	4b4e      	ldr	r3, [pc, #312]	@ (80098c0 <__kernel_cos+0x168>)
 8009788:	4604      	mov	r4, r0
 800978a:	460d      	mov	r5, r1
 800978c:	f7f6 fea4 	bl	80004d8 <__aeabi_dmul>
 8009790:	a33f      	add	r3, pc, #252	@ (adr r3, 8009890 <__kernel_cos+0x138>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	4682      	mov	sl, r0
 8009798:	468b      	mov	fp, r1
 800979a:	4620      	mov	r0, r4
 800979c:	4629      	mov	r1, r5
 800979e:	f7f6 fe9b 	bl	80004d8 <__aeabi_dmul>
 80097a2:	a33d      	add	r3, pc, #244	@ (adr r3, 8009898 <__kernel_cos+0x140>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fce0 	bl	800016c <__adddf3>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f6 fe92 	bl	80004d8 <__aeabi_dmul>
 80097b4:	a33a      	add	r3, pc, #232	@ (adr r3, 80098a0 <__kernel_cos+0x148>)
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	f7f6 fcd5 	bl	8000168 <__aeabi_dsub>
 80097be:	4622      	mov	r2, r4
 80097c0:	462b      	mov	r3, r5
 80097c2:	f7f6 fe89 	bl	80004d8 <__aeabi_dmul>
 80097c6:	a338      	add	r3, pc, #224	@ (adr r3, 80098a8 <__kernel_cos+0x150>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 fcce 	bl	800016c <__adddf3>
 80097d0:	4622      	mov	r2, r4
 80097d2:	462b      	mov	r3, r5
 80097d4:	f7f6 fe80 	bl	80004d8 <__aeabi_dmul>
 80097d8:	a335      	add	r3, pc, #212	@ (adr r3, 80098b0 <__kernel_cos+0x158>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fcc3 	bl	8000168 <__aeabi_dsub>
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	f7f6 fe77 	bl	80004d8 <__aeabi_dmul>
 80097ea:	a333      	add	r3, pc, #204	@ (adr r3, 80098b8 <__kernel_cos+0x160>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f7f6 fcbc 	bl	800016c <__adddf3>
 80097f4:	4622      	mov	r2, r4
 80097f6:	462b      	mov	r3, r5
 80097f8:	f7f6 fe6e 	bl	80004d8 <__aeabi_dmul>
 80097fc:	4622      	mov	r2, r4
 80097fe:	462b      	mov	r3, r5
 8009800:	f7f6 fe6a 	bl	80004d8 <__aeabi_dmul>
 8009804:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009808:	4604      	mov	r4, r0
 800980a:	460d      	mov	r5, r1
 800980c:	4640      	mov	r0, r8
 800980e:	4649      	mov	r1, r9
 8009810:	f7f6 fe62 	bl	80004d8 <__aeabi_dmul>
 8009814:	460b      	mov	r3, r1
 8009816:	4602      	mov	r2, r0
 8009818:	4629      	mov	r1, r5
 800981a:	4620      	mov	r0, r4
 800981c:	f7f6 fca4 	bl	8000168 <__aeabi_dsub>
 8009820:	4b28      	ldr	r3, [pc, #160]	@ (80098c4 <__kernel_cos+0x16c>)
 8009822:	4680      	mov	r8, r0
 8009824:	429e      	cmp	r6, r3
 8009826:	4689      	mov	r9, r1
 8009828:	d80e      	bhi.n	8009848 <__kernel_cos+0xf0>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4650      	mov	r0, sl
 8009830:	4659      	mov	r1, fp
 8009832:	f7f6 fc99 	bl	8000168 <__aeabi_dsub>
 8009836:	4602      	mov	r2, r0
 8009838:	2000      	movs	r0, #0
 800983a:	460b      	mov	r3, r1
 800983c:	4922      	ldr	r1, [pc, #136]	@ (80098c8 <__kernel_cos+0x170>)
 800983e:	f7f6 fc93 	bl	8000168 <__aeabi_dsub>
 8009842:	b003      	add	sp, #12
 8009844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009848:	2400      	movs	r4, #0
 800984a:	4b20      	ldr	r3, [pc, #128]	@ (80098cc <__kernel_cos+0x174>)
 800984c:	4622      	mov	r2, r4
 800984e:	429e      	cmp	r6, r3
 8009850:	bf8c      	ite	hi
 8009852:	4d1f      	ldrhi	r5, [pc, #124]	@ (80098d0 <__kernel_cos+0x178>)
 8009854:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009858:	462b      	mov	r3, r5
 800985a:	2000      	movs	r0, #0
 800985c:	491a      	ldr	r1, [pc, #104]	@ (80098c8 <__kernel_cos+0x170>)
 800985e:	f7f6 fc83 	bl	8000168 <__aeabi_dsub>
 8009862:	4622      	mov	r2, r4
 8009864:	4606      	mov	r6, r0
 8009866:	460f      	mov	r7, r1
 8009868:	462b      	mov	r3, r5
 800986a:	4650      	mov	r0, sl
 800986c:	4659      	mov	r1, fp
 800986e:	f7f6 fc7b 	bl	8000168 <__aeabi_dsub>
 8009872:	4642      	mov	r2, r8
 8009874:	464b      	mov	r3, r9
 8009876:	f7f6 fc77 	bl	8000168 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	e7dc      	b.n	800983e <__kernel_cos+0xe6>
 8009884:	2000      	movs	r0, #0
 8009886:	4910      	ldr	r1, [pc, #64]	@ (80098c8 <__kernel_cos+0x170>)
 8009888:	e7db      	b.n	8009842 <__kernel_cos+0xea>
 800988a:	bf00      	nop
 800988c:	f3af 8000 	nop.w
 8009890:	be8838d4 	.word	0xbe8838d4
 8009894:	bda8fae9 	.word	0xbda8fae9
 8009898:	bdb4b1c4 	.word	0xbdb4b1c4
 800989c:	3e21ee9e 	.word	0x3e21ee9e
 80098a0:	809c52ad 	.word	0x809c52ad
 80098a4:	3e927e4f 	.word	0x3e927e4f
 80098a8:	19cb1590 	.word	0x19cb1590
 80098ac:	3efa01a0 	.word	0x3efa01a0
 80098b0:	16c15177 	.word	0x16c15177
 80098b4:	3f56c16c 	.word	0x3f56c16c
 80098b8:	5555554c 	.word	0x5555554c
 80098bc:	3fa55555 	.word	0x3fa55555
 80098c0:	3fe00000 	.word	0x3fe00000
 80098c4:	3fd33332 	.word	0x3fd33332
 80098c8:	3ff00000 	.word	0x3ff00000
 80098cc:	3fe90000 	.word	0x3fe90000
 80098d0:	3fd20000 	.word	0x3fd20000
 80098d4:	00000000 	.word	0x00000000

080098d8 <__kernel_sin>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	461f      	mov	r7, r3
 80098de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098e2:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	4616      	mov	r6, r2
 80098ec:	b085      	sub	sp, #20
 80098ee:	d203      	bcs.n	80098f8 <__kernel_sin+0x20>
 80098f0:	f7f7 f8a2 	bl	8000a38 <__aeabi_d2iz>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d051      	beq.n	800999c <__kernel_sin+0xc4>
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f6 fdea 	bl	80004d8 <__aeabi_dmul>
 8009904:	4682      	mov	sl, r0
 8009906:	468b      	mov	fp, r1
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fde2 	bl	80004d8 <__aeabi_dmul>
 8009914:	a33e      	add	r3, pc, #248	@ (adr r3, 8009a10 <__kernel_sin+0x138>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	4680      	mov	r8, r0
 800991c:	4689      	mov	r9, r1
 800991e:	4650      	mov	r0, sl
 8009920:	4659      	mov	r1, fp
 8009922:	f7f6 fdd9 	bl	80004d8 <__aeabi_dmul>
 8009926:	a33c      	add	r3, pc, #240	@ (adr r3, 8009a18 <__kernel_sin+0x140>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fc1c 	bl	8000168 <__aeabi_dsub>
 8009930:	4652      	mov	r2, sl
 8009932:	465b      	mov	r3, fp
 8009934:	f7f6 fdd0 	bl	80004d8 <__aeabi_dmul>
 8009938:	a339      	add	r3, pc, #228	@ (adr r3, 8009a20 <__kernel_sin+0x148>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	f7f6 fc15 	bl	800016c <__adddf3>
 8009942:	4652      	mov	r2, sl
 8009944:	465b      	mov	r3, fp
 8009946:	f7f6 fdc7 	bl	80004d8 <__aeabi_dmul>
 800994a:	a337      	add	r3, pc, #220	@ (adr r3, 8009a28 <__kernel_sin+0x150>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fc0a 	bl	8000168 <__aeabi_dsub>
 8009954:	4652      	mov	r2, sl
 8009956:	465b      	mov	r3, fp
 8009958:	f7f6 fdbe 	bl	80004d8 <__aeabi_dmul>
 800995c:	a334      	add	r3, pc, #208	@ (adr r3, 8009a30 <__kernel_sin+0x158>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fc03 	bl	800016c <__adddf3>
 8009966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009968:	e9cd 0100 	strd	r0, r1, [sp]
 800996c:	b9db      	cbnz	r3, 80099a6 <__kernel_sin+0xce>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	f7f6 fdaf 	bl	80004d8 <__aeabi_dmul>
 800997a:	a32f      	add	r3, pc, #188	@ (adr r3, 8009a38 <__kernel_sin+0x160>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	f7f6 fbf2 	bl	8000168 <__aeabi_dsub>
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	f7f6 fda6 	bl	80004d8 <__aeabi_dmul>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4620      	mov	r0, r4
 8009992:	4629      	mov	r1, r5
 8009994:	f7f6 fbea 	bl	800016c <__adddf3>
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	4620      	mov	r0, r4
 800999e:	4629      	mov	r1, r5
 80099a0:	b005      	add	sp, #20
 80099a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	2200      	movs	r2, #0
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	4b24      	ldr	r3, [pc, #144]	@ (8009a40 <__kernel_sin+0x168>)
 80099ae:	f7f6 fd93 	bl	80004d8 <__aeabi_dmul>
 80099b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fd8b 	bl	80004d8 <__aeabi_dmul>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ca:	f7f6 fbcd 	bl	8000168 <__aeabi_dsub>
 80099ce:	4652      	mov	r2, sl
 80099d0:	465b      	mov	r3, fp
 80099d2:	f7f6 fd81 	bl	80004d8 <__aeabi_dmul>
 80099d6:	4632      	mov	r2, r6
 80099d8:	463b      	mov	r3, r7
 80099da:	f7f6 fbc5 	bl	8000168 <__aeabi_dsub>
 80099de:	a316      	add	r3, pc, #88	@ (adr r3, 8009a38 <__kernel_sin+0x160>)
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	4606      	mov	r6, r0
 80099e6:	460f      	mov	r7, r1
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f6 fd74 	bl	80004d8 <__aeabi_dmul>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4630      	mov	r0, r6
 80099f6:	4639      	mov	r1, r7
 80099f8:	f7f6 fbb8 	bl	800016c <__adddf3>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f7f6 fbb0 	bl	8000168 <__aeabi_dsub>
 8009a08:	e7c6      	b.n	8009998 <__kernel_sin+0xc0>
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w
 8009a10:	5acfd57c 	.word	0x5acfd57c
 8009a14:	3de5d93a 	.word	0x3de5d93a
 8009a18:	8a2b9ceb 	.word	0x8a2b9ceb
 8009a1c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009a20:	57b1fe7d 	.word	0x57b1fe7d
 8009a24:	3ec71de3 	.word	0x3ec71de3
 8009a28:	19c161d5 	.word	0x19c161d5
 8009a2c:	3f2a01a0 	.word	0x3f2a01a0
 8009a30:	1110f8a6 	.word	0x1110f8a6
 8009a34:	3f811111 	.word	0x3f811111
 8009a38:	55555549 	.word	0x55555549
 8009a3c:	3fc55555 	.word	0x3fc55555
 8009a40:	3fe00000 	.word	0x3fe00000
 8009a44:	00000000 	.word	0x00000000

08009a48 <__ieee754_atan2>:
 8009a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	4617      	mov	r7, r2
 8009a4e:	4690      	mov	r8, r2
 8009a50:	4699      	mov	r9, r3
 8009a52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009a56:	427b      	negs	r3, r7
 8009a58:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009be0 <__ieee754_atan2+0x198>
 8009a5c:	433b      	orrs	r3, r7
 8009a5e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009a62:	4553      	cmp	r3, sl
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	d809      	bhi.n	8009a7e <__ieee754_atan2+0x36>
 8009a6a:	4246      	negs	r6, r0
 8009a6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009a70:	4306      	orrs	r6, r0
 8009a72:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009a76:	4556      	cmp	r6, sl
 8009a78:	468e      	mov	lr, r1
 8009a7a:	4683      	mov	fp, r0
 8009a7c:	d908      	bls.n	8009a90 <__ieee754_atan2+0x48>
 8009a7e:	4642      	mov	r2, r8
 8009a80:	464b      	mov	r3, r9
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f7f6 fb71 	bl	800016c <__adddf3>
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	e016      	b.n	8009abe <__ieee754_atan2+0x76>
 8009a90:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009a94:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009a98:	433e      	orrs	r6, r7
 8009a9a:	d103      	bne.n	8009aa4 <__ieee754_atan2+0x5c>
 8009a9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	f7ff bb62 	b.w	8009168 <atan>
 8009aa4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009aa8:	f006 0602 	and.w	r6, r6, #2
 8009aac:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009ab0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009ab4:	d107      	bne.n	8009ac6 <__ieee754_atan2+0x7e>
 8009ab6:	2e02      	cmp	r6, #2
 8009ab8:	d064      	beq.n	8009b84 <__ieee754_atan2+0x13c>
 8009aba:	2e03      	cmp	r6, #3
 8009abc:	d066      	beq.n	8009b8c <__ieee754_atan2+0x144>
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	4317      	orrs	r7, r2
 8009ac8:	d106      	bne.n	8009ad8 <__ieee754_atan2+0x90>
 8009aca:	f1be 0f00 	cmp.w	lr, #0
 8009ace:	da68      	bge.n	8009ba2 <__ieee754_atan2+0x15a>
 8009ad0:	a537      	add	r5, pc, #220	@ (adr r5, 8009bb0 <__ieee754_atan2+0x168>)
 8009ad2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ad6:	e7f2      	b.n	8009abe <__ieee754_atan2+0x76>
 8009ad8:	4552      	cmp	r2, sl
 8009ada:	d10f      	bne.n	8009afc <__ieee754_atan2+0xb4>
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f106 36ff 	add.w	r6, r6, #4294967295
 8009ae2:	d107      	bne.n	8009af4 <__ieee754_atan2+0xac>
 8009ae4:	2e02      	cmp	r6, #2
 8009ae6:	d855      	bhi.n	8009b94 <__ieee754_atan2+0x14c>
 8009ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8009be4 <__ieee754_atan2+0x19c>)
 8009aea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009af2:	e7e4      	b.n	8009abe <__ieee754_atan2+0x76>
 8009af4:	2e02      	cmp	r6, #2
 8009af6:	d851      	bhi.n	8009b9c <__ieee754_atan2+0x154>
 8009af8:	4b3b      	ldr	r3, [pc, #236]	@ (8009be8 <__ieee754_atan2+0x1a0>)
 8009afa:	e7f6      	b.n	8009aea <__ieee754_atan2+0xa2>
 8009afc:	4553      	cmp	r3, sl
 8009afe:	d0e4      	beq.n	8009aca <__ieee754_atan2+0x82>
 8009b00:	1a9b      	subs	r3, r3, r2
 8009b02:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009b06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b0a:	da21      	bge.n	8009b50 <__ieee754_atan2+0x108>
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	da01      	bge.n	8009b16 <__ieee754_atan2+0xce>
 8009b12:	323c      	adds	r2, #60	@ 0x3c
 8009b14:	db20      	blt.n	8009b58 <__ieee754_atan2+0x110>
 8009b16:	4642      	mov	r2, r8
 8009b18:	464b      	mov	r3, r9
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f6 fe05 	bl	800072c <__aeabi_ddiv>
 8009b22:	f7ff fcf7 	bl	8009514 <fabs>
 8009b26:	f7ff fb1f 	bl	8009168 <atan>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	460d      	mov	r5, r1
 8009b2e:	2e01      	cmp	r6, #1
 8009b30:	d015      	beq.n	8009b5e <__ieee754_atan2+0x116>
 8009b32:	2e02      	cmp	r6, #2
 8009b34:	d017      	beq.n	8009b66 <__ieee754_atan2+0x11e>
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	d0c1      	beq.n	8009abe <__ieee754_atan2+0x76>
 8009b3a:	a31f      	add	r3, pc, #124	@ (adr r3, 8009bb8 <__ieee754_atan2+0x170>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	4620      	mov	r0, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7f6 fb10 	bl	8000168 <__aeabi_dsub>
 8009b48:	a31d      	add	r3, pc, #116	@ (adr r3, 8009bc0 <__ieee754_atan2+0x178>)
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	e016      	b.n	8009b7e <__ieee754_atan2+0x136>
 8009b50:	a51d      	add	r5, pc, #116	@ (adr r5, 8009bc8 <__ieee754_atan2+0x180>)
 8009b52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b56:	e7ea      	b.n	8009b2e <__ieee754_atan2+0xe6>
 8009b58:	2400      	movs	r4, #0
 8009b5a:	2500      	movs	r5, #0
 8009b5c:	e7e7      	b.n	8009b2e <__ieee754_atan2+0xe6>
 8009b5e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009b62:	461d      	mov	r5, r3
 8009b64:	e7ab      	b.n	8009abe <__ieee754_atan2+0x76>
 8009b66:	a314      	add	r3, pc, #80	@ (adr r3, 8009bb8 <__ieee754_atan2+0x170>)
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fafa 	bl	8000168 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	a111      	add	r1, pc, #68	@ (adr r1, 8009bc0 <__ieee754_atan2+0x178>)
 8009b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b7e:	f7f6 faf3 	bl	8000168 <__aeabi_dsub>
 8009b82:	e782      	b.n	8009a8a <__ieee754_atan2+0x42>
 8009b84:	a50e      	add	r5, pc, #56	@ (adr r5, 8009bc0 <__ieee754_atan2+0x178>)
 8009b86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b8a:	e798      	b.n	8009abe <__ieee754_atan2+0x76>
 8009b8c:	a510      	add	r5, pc, #64	@ (adr r5, 8009bd0 <__ieee754_atan2+0x188>)
 8009b8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b92:	e794      	b.n	8009abe <__ieee754_atan2+0x76>
 8009b94:	a510      	add	r5, pc, #64	@ (adr r5, 8009bd8 <__ieee754_atan2+0x190>)
 8009b96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b9a:	e790      	b.n	8009abe <__ieee754_atan2+0x76>
 8009b9c:	2400      	movs	r4, #0
 8009b9e:	2500      	movs	r5, #0
 8009ba0:	e78d      	b.n	8009abe <__ieee754_atan2+0x76>
 8009ba2:	a509      	add	r5, pc, #36	@ (adr r5, 8009bc8 <__ieee754_atan2+0x180>)
 8009ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ba8:	e789      	b.n	8009abe <__ieee754_atan2+0x76>
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w
 8009bb0:	54442d18 	.word	0x54442d18
 8009bb4:	bff921fb 	.word	0xbff921fb
 8009bb8:	33145c07 	.word	0x33145c07
 8009bbc:	3ca1a626 	.word	0x3ca1a626
 8009bc0:	54442d18 	.word	0x54442d18
 8009bc4:	400921fb 	.word	0x400921fb
 8009bc8:	54442d18 	.word	0x54442d18
 8009bcc:	3ff921fb 	.word	0x3ff921fb
 8009bd0:	54442d18 	.word	0x54442d18
 8009bd4:	c00921fb 	.word	0xc00921fb
 8009bd8:	54442d18 	.word	0x54442d18
 8009bdc:	3fe921fb 	.word	0x3fe921fb
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	0800b400 	.word	0x0800b400
 8009be8:	0800b3e8 	.word	0x0800b3e8
 8009bec:	00000000 	.word	0x00000000

08009bf0 <__ieee754_rem_pio2>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	4bc4      	ldr	r3, [pc, #784]	@ (8009f08 <__ieee754_rem_pio2+0x318>)
 8009bf6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009bfa:	b08d      	sub	sp, #52	@ 0x34
 8009bfc:	4598      	cmp	r8, r3
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	4614      	mov	r4, r2
 8009c04:	9104      	str	r1, [sp, #16]
 8009c06:	d807      	bhi.n	8009c18 <__ieee754_rem_pio2+0x28>
 8009c08:	e9c2 6700 	strd	r6, r7, [r2]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	2200      	movs	r2, #0
 8009c10:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009c14:	2500      	movs	r5, #0
 8009c16:	e026      	b.n	8009c66 <__ieee754_rem_pio2+0x76>
 8009c18:	4bbc      	ldr	r3, [pc, #752]	@ (8009f0c <__ieee754_rem_pio2+0x31c>)
 8009c1a:	4598      	cmp	r8, r3
 8009c1c:	d876      	bhi.n	8009d0c <__ieee754_rem_pio2+0x11c>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	4dbb      	ldr	r5, [pc, #748]	@ (8009f10 <__ieee754_rem_pio2+0x320>)
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009ed0 <__ieee754_rem_pio2+0x2e0>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	dd38      	ble.n	8009c9e <__ieee754_rem_pio2+0xae>
 8009c2c:	f7f6 fa9c 	bl	8000168 <__aeabi_dsub>
 8009c30:	45a8      	cmp	r8, r5
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	d01a      	beq.n	8009c6e <__ieee754_rem_pio2+0x7e>
 8009c38:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009ed8 <__ieee754_rem_pio2+0x2e8>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fa93 	bl	8000168 <__aeabi_dsub>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4680      	mov	r8, r0
 8009c48:	4689      	mov	r9, r1
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fa8b 	bl	8000168 <__aeabi_dsub>
 8009c52:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009ed8 <__ieee754_rem_pio2+0x2e8>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fa86 	bl	8000168 <__aeabi_dsub>
 8009c5c:	2501      	movs	r5, #1
 8009c5e:	e9c4 8900 	strd	r8, r9, [r4]
 8009c62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c66:	4628      	mov	r0, r5
 8009c68:	b00d      	add	sp, #52	@ 0x34
 8009c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c6e:	a39c      	add	r3, pc, #624	@ (adr r3, 8009ee0 <__ieee754_rem_pio2+0x2f0>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fa78 	bl	8000168 <__aeabi_dsub>
 8009c78:	a39b      	add	r3, pc, #620	@ (adr r3, 8009ee8 <__ieee754_rem_pio2+0x2f8>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	4606      	mov	r6, r0
 8009c80:	460f      	mov	r7, r1
 8009c82:	f7f6 fa71 	bl	8000168 <__aeabi_dsub>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4680      	mov	r8, r0
 8009c8c:	4689      	mov	r9, r1
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fa69 	bl	8000168 <__aeabi_dsub>
 8009c96:	a394      	add	r3, pc, #592	@ (adr r3, 8009ee8 <__ieee754_rem_pio2+0x2f8>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	e7dc      	b.n	8009c58 <__ieee754_rem_pio2+0x68>
 8009c9e:	f7f6 fa65 	bl	800016c <__adddf3>
 8009ca2:	45a8      	cmp	r8, r5
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	d018      	beq.n	8009cdc <__ieee754_rem_pio2+0xec>
 8009caa:	a38b      	add	r3, pc, #556	@ (adr r3, 8009ed8 <__ieee754_rem_pio2+0x2e8>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fa5c 	bl	800016c <__adddf3>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 fa52 	bl	8000168 <__aeabi_dsub>
 8009cc4:	a384      	add	r3, pc, #528	@ (adr r3, 8009ed8 <__ieee754_rem_pio2+0x2e8>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fa4f 	bl	800016c <__adddf3>
 8009cce:	f04f 35ff 	mov.w	r5, #4294967295
 8009cd2:	e9c4 8900 	strd	r8, r9, [r4]
 8009cd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009cda:	e7c4      	b.n	8009c66 <__ieee754_rem_pio2+0x76>
 8009cdc:	a380      	add	r3, pc, #512	@ (adr r3, 8009ee0 <__ieee754_rem_pio2+0x2f0>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	f7f6 fa43 	bl	800016c <__adddf3>
 8009ce6:	a380      	add	r3, pc, #512	@ (adr r3, 8009ee8 <__ieee754_rem_pio2+0x2f8>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	f7f6 fa3c 	bl	800016c <__adddf3>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	4689      	mov	r9, r1
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fa32 	bl	8000168 <__aeabi_dsub>
 8009d04:	a378      	add	r3, pc, #480	@ (adr r3, 8009ee8 <__ieee754_rem_pio2+0x2f8>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	e7de      	b.n	8009cca <__ieee754_rem_pio2+0xda>
 8009d0c:	4b81      	ldr	r3, [pc, #516]	@ (8009f14 <__ieee754_rem_pio2+0x324>)
 8009d0e:	4598      	cmp	r8, r3
 8009d10:	f200 80cf 	bhi.w	8009eb2 <__ieee754_rem_pio2+0x2c2>
 8009d14:	f7ff fbfe 	bl	8009514 <fabs>
 8009d18:	a375      	add	r3, pc, #468	@ (adr r3, 8009ef0 <__ieee754_rem_pio2+0x300>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	4606      	mov	r6, r0
 8009d20:	460f      	mov	r7, r1
 8009d22:	f7f6 fbd9 	bl	80004d8 <__aeabi_dmul>
 8009d26:	2200      	movs	r2, #0
 8009d28:	4b7b      	ldr	r3, [pc, #492]	@ (8009f18 <__ieee754_rem_pio2+0x328>)
 8009d2a:	f7f6 fa1f 	bl	800016c <__adddf3>
 8009d2e:	f7f6 fe83 	bl	8000a38 <__aeabi_d2iz>
 8009d32:	4605      	mov	r5, r0
 8009d34:	f7f6 fb66 	bl	8000404 <__aeabi_i2d>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d40:	a363      	add	r3, pc, #396	@ (adr r3, 8009ed0 <__ieee754_rem_pio2+0x2e0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fbc7 	bl	80004d8 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 fa09 	bl	8000168 <__aeabi_dsub>
 8009d56:	a360      	add	r3, pc, #384	@ (adr r3, 8009ed8 <__ieee754_rem_pio2+0x2e8>)
 8009d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5c:	4682      	mov	sl, r0
 8009d5e:	468b      	mov	fp, r1
 8009d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d64:	f7f6 fbb8 	bl	80004d8 <__aeabi_dmul>
 8009d68:	2d1f      	cmp	r5, #31
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	dc0c      	bgt.n	8009d8a <__ieee754_rem_pio2+0x19a>
 8009d70:	4b6a      	ldr	r3, [pc, #424]	@ (8009f1c <__ieee754_rem_pio2+0x32c>)
 8009d72:	1e6a      	subs	r2, r5, #1
 8009d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d78:	4543      	cmp	r3, r8
 8009d7a:	d006      	beq.n	8009d8a <__ieee754_rem_pio2+0x19a>
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	463b      	mov	r3, r7
 8009d80:	4650      	mov	r0, sl
 8009d82:	4659      	mov	r1, fp
 8009d84:	f7f6 f9f0 	bl	8000168 <__aeabi_dsub>
 8009d88:	e00e      	b.n	8009da8 <__ieee754_rem_pio2+0x1b8>
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	4650      	mov	r0, sl
 8009d90:	4659      	mov	r1, fp
 8009d92:	f7f6 f9e9 	bl	8000168 <__aeabi_dsub>
 8009d96:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009da0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	dc02      	bgt.n	8009dae <__ieee754_rem_pio2+0x1be>
 8009da8:	e9c4 0100 	strd	r0, r1, [r4]
 8009dac:	e039      	b.n	8009e22 <__ieee754_rem_pio2+0x232>
 8009dae:	a34c      	add	r3, pc, #304	@ (adr r3, 8009ee0 <__ieee754_rem_pio2+0x2f0>)
 8009db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db8:	f7f6 fb8e 	bl	80004d8 <__aeabi_dmul>
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	4659      	mov	r1, fp
 8009dc8:	f7f6 f9ce 	bl	8000168 <__aeabi_dsub>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	4689      	mov	r9, r1
 8009dd4:	4650      	mov	r0, sl
 8009dd6:	4659      	mov	r1, fp
 8009dd8:	f7f6 f9c6 	bl	8000168 <__aeabi_dsub>
 8009ddc:	4632      	mov	r2, r6
 8009dde:	463b      	mov	r3, r7
 8009de0:	f7f6 f9c2 	bl	8000168 <__aeabi_dsub>
 8009de4:	a340      	add	r3, pc, #256	@ (adr r3, 8009ee8 <__ieee754_rem_pio2+0x2f8>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df2:	f7f6 fb71 	bl	80004d8 <__aeabi_dmul>
 8009df6:	4632      	mov	r2, r6
 8009df8:	463b      	mov	r3, r7
 8009dfa:	f7f6 f9b5 	bl	8000168 <__aeabi_dsub>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4606      	mov	r6, r0
 8009e04:	460f      	mov	r7, r1
 8009e06:	4640      	mov	r0, r8
 8009e08:	4649      	mov	r1, r9
 8009e0a:	f7f6 f9ad 	bl	8000168 <__aeabi_dsub>
 8009e0e:	9a05      	ldr	r2, [sp, #20]
 8009e10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b31      	cmp	r3, #49	@ 0x31
 8009e18:	dc20      	bgt.n	8009e5c <__ieee754_rem_pio2+0x26c>
 8009e1a:	46c2      	mov	sl, r8
 8009e1c:	46cb      	mov	fp, r9
 8009e1e:	e9c4 0100 	strd	r0, r1, [r4]
 8009e22:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e26:	4650      	mov	r0, sl
 8009e28:	4642      	mov	r2, r8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	4659      	mov	r1, fp
 8009e2e:	f7f6 f99b 	bl	8000168 <__aeabi_dsub>
 8009e32:	463b      	mov	r3, r7
 8009e34:	4632      	mov	r2, r6
 8009e36:	f7f6 f997 	bl	8000168 <__aeabi_dsub>
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f6bf af10 	bge.w	8009c66 <__ieee754_rem_pio2+0x76>
 8009e46:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009e4a:	6063      	str	r3, [r4, #4]
 8009e4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e50:	f8c4 8000 	str.w	r8, [r4]
 8009e54:	60a0      	str	r0, [r4, #8]
 8009e56:	60e3      	str	r3, [r4, #12]
 8009e58:	426d      	negs	r5, r5
 8009e5a:	e704      	b.n	8009c66 <__ieee754_rem_pio2+0x76>
 8009e5c:	a326      	add	r3, pc, #152	@ (adr r3, 8009ef8 <__ieee754_rem_pio2+0x308>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e66:	f7f6 fb37 	bl	80004d8 <__aeabi_dmul>
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	f7f6 f977 	bl	8000168 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4682      	mov	sl, r0
 8009e80:	468b      	mov	fp, r1
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 f96f 	bl	8000168 <__aeabi_dsub>
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	463b      	mov	r3, r7
 8009e8e:	f7f6 f96b 	bl	8000168 <__aeabi_dsub>
 8009e92:	a31b      	add	r3, pc, #108	@ (adr r3, 8009f00 <__ieee754_rem_pio2+0x310>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	4606      	mov	r6, r0
 8009e9a:	460f      	mov	r7, r1
 8009e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	4632      	mov	r2, r6
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	f7f6 f95e 	bl	8000168 <__aeabi_dsub>
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	e764      	b.n	8009d7c <__ieee754_rem_pio2+0x18c>
 8009eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f20 <__ieee754_rem_pio2+0x330>)
 8009eb4:	4598      	cmp	r8, r3
 8009eb6:	d935      	bls.n	8009f24 <__ieee754_rem_pio2+0x334>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	f7f6 f954 	bl	8000168 <__aeabi_dsub>
 8009ec0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009ec4:	e9c4 0100 	strd	r0, r1, [r4]
 8009ec8:	e6a4      	b.n	8009c14 <__ieee754_rem_pio2+0x24>
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	54400000 	.word	0x54400000
 8009ed4:	3ff921fb 	.word	0x3ff921fb
 8009ed8:	1a626331 	.word	0x1a626331
 8009edc:	3dd0b461 	.word	0x3dd0b461
 8009ee0:	1a600000 	.word	0x1a600000
 8009ee4:	3dd0b461 	.word	0x3dd0b461
 8009ee8:	2e037073 	.word	0x2e037073
 8009eec:	3ba3198a 	.word	0x3ba3198a
 8009ef0:	6dc9c883 	.word	0x6dc9c883
 8009ef4:	3fe45f30 	.word	0x3fe45f30
 8009ef8:	2e000000 	.word	0x2e000000
 8009efc:	3ba3198a 	.word	0x3ba3198a
 8009f00:	252049c1 	.word	0x252049c1
 8009f04:	397b839a 	.word	0x397b839a
 8009f08:	3fe921fb 	.word	0x3fe921fb
 8009f0c:	4002d97b 	.word	0x4002d97b
 8009f10:	3ff921fb 	.word	0x3ff921fb
 8009f14:	413921fb 	.word	0x413921fb
 8009f18:	3fe00000 	.word	0x3fe00000
 8009f1c:	0800b418 	.word	0x0800b418
 8009f20:	7fefffff 	.word	0x7fefffff
 8009f24:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009f28:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009f2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009f30:	460f      	mov	r7, r1
 8009f32:	f7f6 fd81 	bl	8000a38 <__aeabi_d2iz>
 8009f36:	f7f6 fa65 	bl	8000404 <__aeabi_i2d>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4630      	mov	r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f46:	f7f6 f90f 	bl	8000168 <__aeabi_dsub>
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4b21      	ldr	r3, [pc, #132]	@ (8009fd4 <__ieee754_rem_pio2+0x3e4>)
 8009f4e:	f7f6 fac3 	bl	80004d8 <__aeabi_dmul>
 8009f52:	460f      	mov	r7, r1
 8009f54:	4606      	mov	r6, r0
 8009f56:	f7f6 fd6f 	bl	8000a38 <__aeabi_d2iz>
 8009f5a:	f7f6 fa53 	bl	8000404 <__aeabi_i2d>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f6a:	f7f6 f8fd 	bl	8000168 <__aeabi_dsub>
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4b18      	ldr	r3, [pc, #96]	@ (8009fd4 <__ieee754_rem_pio2+0x3e4>)
 8009f72:	f7f6 fab1 	bl	80004d8 <__aeabi_dmul>
 8009f76:	f04f 0803 	mov.w	r8, #3
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	2700      	movs	r7, #0
 8009f7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009f82:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009f86:	4632      	mov	r2, r6
 8009f88:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	46c2      	mov	sl, r8
 8009f90:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f94:	f7f6 fd08 	bl	80009a8 <__aeabi_dcmpeq>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1f4      	bne.n	8009f86 <__ieee754_rem_pio2+0x396>
 8009f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd8 <__ieee754_rem_pio2+0x3e8>)
 8009f9e:	462a      	mov	r2, r5
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	a806      	add	r0, sp, #24
 8009faa:	4653      	mov	r3, sl
 8009fac:	f000 f816 	bl	8009fdc <__kernel_rem_pio2>
 8009fb0:	9b04      	ldr	r3, [sp, #16]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f6bf ae56 	bge.w	8009c66 <__ieee754_rem_pio2+0x76>
 8009fba:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009fbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fc2:	e9c4 2300 	strd	r2, r3, [r4]
 8009fc6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009fca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009fd2:	e741      	b.n	8009e58 <__ieee754_rem_pio2+0x268>
 8009fd4:	41700000 	.word	0x41700000
 8009fd8:	0800b498 	.word	0x0800b498

08009fdc <__kernel_rem_pio2>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009fe4:	9308      	str	r3, [sp, #32]
 8009fe6:	9104      	str	r1, [sp, #16]
 8009fe8:	4bb6      	ldr	r3, [pc, #728]	@ (800a2c4 <__kernel_rem_pio2+0x2e8>)
 8009fea:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8009fec:	f112 0f14 	cmn.w	r2, #20
 8009ff0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ff4:	bfa8      	it	ge
 8009ff6:	1ed4      	subge	r4, r2, #3
 8009ff8:	9302      	str	r3, [sp, #8]
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	bfb8      	it	lt
 8009ffe:	2400      	movlt	r4, #0
 800a000:	f103 33ff 	add.w	r3, r3, #4294967295
 800a004:	9306      	str	r3, [sp, #24]
 800a006:	bfa4      	itt	ge
 800a008:	2318      	movge	r3, #24
 800a00a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a00e:	f06f 0317 	mvn.w	r3, #23
 800a012:	fb04 3303 	mla	r3, r4, r3, r3
 800a016:	eb03 0a02 	add.w	sl, r3, r2
 800a01a:	9a06      	ldr	r2, [sp, #24]
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	1aa7      	subs	r7, r4, r2
 800a020:	eb03 0802 	add.w	r8, r3, r2
 800a024:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a026:	2500      	movs	r5, #0
 800a028:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	9009      	str	r0, [sp, #36]	@ 0x24
 800a032:	ae20      	add	r6, sp, #128	@ 0x80
 800a034:	4545      	cmp	r5, r8
 800a036:	dd14      	ble.n	800a062 <__kernel_rem_pio2+0x86>
 800a038:	f04f 0800 	mov.w	r8, #0
 800a03c:	9a08      	ldr	r2, [sp, #32]
 800a03e:	ab20      	add	r3, sp, #128	@ 0x80
 800a040:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a044:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	4598      	cmp	r8, r3
 800a04c:	dc35      	bgt.n	800a0ba <__kernel_rem_pio2+0xde>
 800a04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a050:	2200      	movs	r2, #0
 800a052:	f1a3 0908 	sub.w	r9, r3, #8
 800a056:	2300      	movs	r3, #0
 800a058:	462f      	mov	r7, r5
 800a05a:	2600      	movs	r6, #0
 800a05c:	e9cd 2300 	strd	r2, r3, [sp]
 800a060:	e01f      	b.n	800a0a2 <__kernel_rem_pio2+0xc6>
 800a062:	42ef      	cmn	r7, r5
 800a064:	d40b      	bmi.n	800a07e <__kernel_rem_pio2+0xa2>
 800a066:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a06a:	e9cd 2300 	strd	r2, r3, [sp]
 800a06e:	f7f6 f9c9 	bl	8000404 <__aeabi_i2d>
 800a072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a076:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a07a:	3501      	adds	r5, #1
 800a07c:	e7da      	b.n	800a034 <__kernel_rem_pio2+0x58>
 800a07e:	4610      	mov	r0, r2
 800a080:	4619      	mov	r1, r3
 800a082:	e7f8      	b.n	800a076 <__kernel_rem_pio2+0x9a>
 800a084:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a088:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a08c:	f7f6 fa24 	bl	80004d8 <__aeabi_dmul>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a098:	f7f6 f868 	bl	800016c <__adddf3>
 800a09c:	e9cd 0100 	strd	r0, r1, [sp]
 800a0a0:	3601      	adds	r6, #1
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	3f08      	subs	r7, #8
 800a0a6:	429e      	cmp	r6, r3
 800a0a8:	ddec      	ble.n	800a084 <__kernel_rem_pio2+0xa8>
 800a0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0ae:	f108 0801 	add.w	r8, r8, #1
 800a0b2:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a0b6:	3508      	adds	r5, #8
 800a0b8:	e7c6      	b.n	800a048 <__kernel_rem_pio2+0x6c>
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	aa0c      	add	r2, sp, #48	@ 0x30
 800a0be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0c4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a0c6:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a0ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0d0:	ab98      	add	r3, sp, #608	@ 0x260
 800a0d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0d6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a0da:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a0dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0e0:	ae0c      	add	r6, sp, #48	@ 0x30
 800a0e2:	4698      	mov	r8, r3
 800a0e4:	46b1      	mov	r9, r6
 800a0e6:	465f      	mov	r7, fp
 800a0e8:	9307      	str	r3, [sp, #28]
 800a0ea:	2f00      	cmp	r7, #0
 800a0ec:	f1a8 0808 	sub.w	r8, r8, #8
 800a0f0:	dc71      	bgt.n	800a1d6 <__kernel_rem_pio2+0x1fa>
 800a0f2:	4652      	mov	r2, sl
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f000 fa96 	bl	800a628 <scalbn>
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a102:	4604      	mov	r4, r0
 800a104:	460d      	mov	r5, r1
 800a106:	f7f6 f9e7 	bl	80004d8 <__aeabi_dmul>
 800a10a:	f000 fb05 	bl	800a718 <floor>
 800a10e:	2200      	movs	r2, #0
 800a110:	4b6d      	ldr	r3, [pc, #436]	@ (800a2c8 <__kernel_rem_pio2+0x2ec>)
 800a112:	f7f6 f9e1 	bl	80004d8 <__aeabi_dmul>
 800a116:	4602      	mov	r2, r0
 800a118:	460b      	mov	r3, r1
 800a11a:	4620      	mov	r0, r4
 800a11c:	4629      	mov	r1, r5
 800a11e:	f7f6 f823 	bl	8000168 <__aeabi_dsub>
 800a122:	460d      	mov	r5, r1
 800a124:	4604      	mov	r4, r0
 800a126:	f7f6 fc87 	bl	8000a38 <__aeabi_d2iz>
 800a12a:	9005      	str	r0, [sp, #20]
 800a12c:	f7f6 f96a 	bl	8000404 <__aeabi_i2d>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 f816 	bl	8000168 <__aeabi_dsub>
 800a13c:	f1ba 0f00 	cmp.w	sl, #0
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	dd6d      	ble.n	800a222 <__kernel_rem_pio2+0x246>
 800a146:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a14a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a14c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a150:	9c05      	ldr	r4, [sp, #20]
 800a152:	f1ca 0018 	rsb	r0, sl, #24
 800a156:	fa43 f200 	asr.w	r2, r3, r0
 800a15a:	4414      	add	r4, r2
 800a15c:	4082      	lsls	r2, r0
 800a15e:	1a9b      	subs	r3, r3, r2
 800a160:	aa0c      	add	r2, sp, #48	@ 0x30
 800a162:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a166:	f1ca 0217 	rsb	r2, sl, #23
 800a16a:	9405      	str	r4, [sp, #20]
 800a16c:	4113      	asrs	r3, r2
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd64      	ble.n	800a240 <__kernel_rem_pio2+0x264>
 800a176:	2200      	movs	r2, #0
 800a178:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a17c:	4614      	mov	r4, r2
 800a17e:	9b05      	ldr	r3, [sp, #20]
 800a180:	3301      	adds	r3, #1
 800a182:	9305      	str	r3, [sp, #20]
 800a184:	4593      	cmp	fp, r2
 800a186:	f300 80ab 	bgt.w	800a2e0 <__kernel_rem_pio2+0x304>
 800a18a:	f1ba 0f00 	cmp.w	sl, #0
 800a18e:	dd07      	ble.n	800a1a0 <__kernel_rem_pio2+0x1c4>
 800a190:	f1ba 0f01 	cmp.w	sl, #1
 800a194:	f000 80b2 	beq.w	800a2fc <__kernel_rem_pio2+0x320>
 800a198:	f1ba 0f02 	cmp.w	sl, #2
 800a19c:	f000 80b9 	beq.w	800a312 <__kernel_rem_pio2+0x336>
 800a1a0:	9b00      	ldr	r3, [sp, #0]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d14c      	bne.n	800a240 <__kernel_rem_pio2+0x264>
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	4947      	ldr	r1, [pc, #284]	@ (800a2cc <__kernel_rem_pio2+0x2f0>)
 800a1ae:	f7f5 ffdb 	bl	8000168 <__aeabi_dsub>
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4689      	mov	r9, r1
 800a1b6:	2c00      	cmp	r4, #0
 800a1b8:	d042      	beq.n	800a240 <__kernel_rem_pio2+0x264>
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	2000      	movs	r0, #0
 800a1be:	4943      	ldr	r1, [pc, #268]	@ (800a2cc <__kernel_rem_pio2+0x2f0>)
 800a1c0:	f000 fa32 	bl	800a628 <scalbn>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4640      	mov	r0, r8
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	f7f5 ffcc 	bl	8000168 <__aeabi_dsub>
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	e034      	b.n	800a240 <__kernel_rem_pio2+0x264>
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4b3d      	ldr	r3, [pc, #244]	@ (800a2d0 <__kernel_rem_pio2+0x2f4>)
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7f6 f97b 	bl	80004d8 <__aeabi_dmul>
 800a1e2:	f7f6 fc29 	bl	8000a38 <__aeabi_d2iz>
 800a1e6:	f7f6 f90d 	bl	8000404 <__aeabi_i2d>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	e9cd 2300 	strd	r2, r3, [sp]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	4b37      	ldr	r3, [pc, #220]	@ (800a2d4 <__kernel_rem_pio2+0x2f8>)
 800a1f6:	f7f6 f96f 	bl	80004d8 <__aeabi_dmul>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4620      	mov	r0, r4
 800a200:	4629      	mov	r1, r5
 800a202:	f7f5 ffb1 	bl	8000168 <__aeabi_dsub>
 800a206:	f7f6 fc17 	bl	8000a38 <__aeabi_d2iz>
 800a20a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a20e:	f849 0b04 	str.w	r0, [r9], #4
 800a212:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a216:	f7f5 ffa9 	bl	800016c <__adddf3>
 800a21a:	3f01      	subs	r7, #1
 800a21c:	4604      	mov	r4, r0
 800a21e:	460d      	mov	r5, r1
 800a220:	e763      	b.n	800a0ea <__kernel_rem_pio2+0x10e>
 800a222:	d106      	bne.n	800a232 <__kernel_rem_pio2+0x256>
 800a224:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a228:	aa0c      	add	r2, sp, #48	@ 0x30
 800a22a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a22e:	15db      	asrs	r3, r3, #23
 800a230:	e79d      	b.n	800a16e <__kernel_rem_pio2+0x192>
 800a232:	2200      	movs	r2, #0
 800a234:	4b28      	ldr	r3, [pc, #160]	@ (800a2d8 <__kernel_rem_pio2+0x2fc>)
 800a236:	f7f6 fbd5 	bl	80009e4 <__aeabi_dcmpge>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d13f      	bne.n	800a2be <__kernel_rem_pio2+0x2e2>
 800a23e:	9000      	str	r0, [sp, #0]
 800a240:	2200      	movs	r2, #0
 800a242:	2300      	movs	r3, #0
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 fbae 	bl	80009a8 <__aeabi_dcmpeq>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f000 80af 	beq.w	800a3b0 <__kernel_rem_pio2+0x3d4>
 800a252:	2200      	movs	r2, #0
 800a254:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a258:	9902      	ldr	r1, [sp, #8]
 800a25a:	428b      	cmp	r3, r1
 800a25c:	da61      	bge.n	800a322 <__kernel_rem_pio2+0x346>
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d076      	beq.n	800a350 <__kernel_rem_pio2+0x374>
 800a262:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a266:	ab0c      	add	r3, sp, #48	@ 0x30
 800a268:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a26c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a270:	2b00      	cmp	r3, #0
 800a272:	d0f6      	beq.n	800a262 <__kernel_rem_pio2+0x286>
 800a274:	4652      	mov	r2, sl
 800a276:	2000      	movs	r0, #0
 800a278:	4914      	ldr	r1, [pc, #80]	@ (800a2cc <__kernel_rem_pio2+0x2f0>)
 800a27a:	f000 f9d5 	bl	800a628 <scalbn>
 800a27e:	465d      	mov	r5, fp
 800a280:	4606      	mov	r6, r0
 800a282:	460f      	mov	r7, r1
 800a284:	f04f 0900 	mov.w	r9, #0
 800a288:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a28a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a2d0 <__kernel_rem_pio2+0x2f4>
 800a28e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a292:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a296:	2d00      	cmp	r5, #0
 800a298:	f280 80c0 	bge.w	800a41c <__kernel_rem_pio2+0x440>
 800a29c:	465d      	mov	r5, fp
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	f2c0 80f0 	blt.w	800a484 <__kernel_rem_pio2+0x4a8>
 800a2a4:	4b0d      	ldr	r3, [pc, #52]	@ (800a2dc <__kernel_rem_pio2+0x300>)
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	9306      	str	r3, [sp, #24]
 800a2ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a2ae:	f04f 0a00 	mov.w	sl, #0
 800a2b2:	2700      	movs	r7, #0
 800a2b4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a2b8:	ebab 0605 	sub.w	r6, fp, r5
 800a2bc:	e0d6      	b.n	800a46c <__kernel_rem_pio2+0x490>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	e758      	b.n	800a176 <__kernel_rem_pio2+0x19a>
 800a2c4:	0800b5e0 	.word	0x0800b5e0
 800a2c8:	40200000 	.word	0x40200000
 800a2cc:	3ff00000 	.word	0x3ff00000
 800a2d0:	3e700000 	.word	0x3e700000
 800a2d4:	41700000 	.word	0x41700000
 800a2d8:	3fe00000 	.word	0x3fe00000
 800a2dc:	0800b5a0 	.word	0x0800b5a0
 800a2e0:	f856 3b04 	ldr.w	r3, [r6], #4
 800a2e4:	b944      	cbnz	r4, 800a2f8 <__kernel_rem_pio2+0x31c>
 800a2e6:	b123      	cbz	r3, 800a2f2 <__kernel_rem_pio2+0x316>
 800a2e8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a2ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	3201      	adds	r2, #1
 800a2f6:	e745      	b.n	800a184 <__kernel_rem_pio2+0x1a8>
 800a2f8:	1acb      	subs	r3, r1, r3
 800a2fa:	e7f7      	b.n	800a2ec <__kernel_rem_pio2+0x310>
 800a2fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a300:	ab0c      	add	r3, sp, #48	@ 0x30
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a30a:	a90c      	add	r1, sp, #48	@ 0x30
 800a30c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a310:	e746      	b.n	800a1a0 <__kernel_rem_pio2+0x1c4>
 800a312:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a316:	ab0c      	add	r3, sp, #48	@ 0x30
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a320:	e7f3      	b.n	800a30a <__kernel_rem_pio2+0x32e>
 800a322:	a90c      	add	r1, sp, #48	@ 0x30
 800a324:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a328:	3b01      	subs	r3, #1
 800a32a:	430a      	orrs	r2, r1
 800a32c:	e794      	b.n	800a258 <__kernel_rem_pio2+0x27c>
 800a32e:	3401      	adds	r4, #1
 800a330:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a334:	2a00      	cmp	r2, #0
 800a336:	d0fa      	beq.n	800a32e <__kernel_rem_pio2+0x352>
 800a338:	9b08      	ldr	r3, [sp, #32]
 800a33a:	aa20      	add	r2, sp, #128	@ 0x80
 800a33c:	445b      	add	r3, fp
 800a33e:	f10b 0801 	add.w	r8, fp, #1
 800a342:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a346:	445c      	add	r4, fp
 800a348:	4544      	cmp	r4, r8
 800a34a:	da04      	bge.n	800a356 <__kernel_rem_pio2+0x37a>
 800a34c:	46a3      	mov	fp, r4
 800a34e:	e6bf      	b.n	800a0d0 <__kernel_rem_pio2+0xf4>
 800a350:	2401      	movs	r4, #1
 800a352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a354:	e7ec      	b.n	800a330 <__kernel_rem_pio2+0x354>
 800a356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a358:	46ab      	mov	fp, r5
 800a35a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a35e:	f7f6 f851 	bl	8000404 <__aeabi_i2d>
 800a362:	f04f 0900 	mov.w	r9, #0
 800a366:	2600      	movs	r6, #0
 800a368:	2700      	movs	r7, #0
 800a36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36c:	e9c5 0100 	strd	r0, r1, [r5]
 800a370:	3b08      	subs	r3, #8
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	4599      	cmp	r9, r3
 800a378:	dd07      	ble.n	800a38a <__kernel_rem_pio2+0x3ae>
 800a37a:	9b07      	ldr	r3, [sp, #28]
 800a37c:	f108 0801 	add.w	r8, r8, #1
 800a380:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a384:	3508      	adds	r5, #8
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	e7de      	b.n	800a348 <__kernel_rem_pio2+0x36c>
 800a38a:	9900      	ldr	r1, [sp, #0]
 800a38c:	f109 0901 	add.w	r9, r9, #1
 800a390:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a394:	9100      	str	r1, [sp, #0]
 800a396:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a39a:	f7f6 f89d 	bl	80004d8 <__aeabi_dmul>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 fee1 	bl	800016c <__adddf3>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	e7e1      	b.n	800a374 <__kernel_rem_pio2+0x398>
 800a3b0:	f1ca 0200 	rsb	r2, sl, #0
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f000 f936 	bl	800a628 <scalbn>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	4b97      	ldr	r3, [pc, #604]	@ (800a61c <__kernel_rem_pio2+0x640>)
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	f7f6 fb0e 	bl	80009e4 <__aeabi_dcmpge>
 800a3c8:	b300      	cbz	r0, 800a40c <__kernel_rem_pio2+0x430>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4b94      	ldr	r3, [pc, #592]	@ (800a620 <__kernel_rem_pio2+0x644>)
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f6 f881 	bl	80004d8 <__aeabi_dmul>
 800a3d6:	f7f6 fb2f 	bl	8000a38 <__aeabi_d2iz>
 800a3da:	4606      	mov	r6, r0
 800a3dc:	f7f6 f812 	bl	8000404 <__aeabi_i2d>
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	4b8e      	ldr	r3, [pc, #568]	@ (800a61c <__kernel_rem_pio2+0x640>)
 800a3e4:	f7f6 f878 	bl	80004d8 <__aeabi_dmul>
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7f5 feba 	bl	8000168 <__aeabi_dsub>
 800a3f4:	f7f6 fb20 	bl	8000a38 <__aeabi_d2iz>
 800a3f8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a3fa:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a3fe:	f10b 0b01 	add.w	fp, fp, #1
 800a402:	f10a 0a18 	add.w	sl, sl, #24
 800a406:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a40a:	e733      	b.n	800a274 <__kernel_rem_pio2+0x298>
 800a40c:	4620      	mov	r0, r4
 800a40e:	4629      	mov	r1, r5
 800a410:	f7f6 fb12 	bl	8000a38 <__aeabi_d2iz>
 800a414:	ab0c      	add	r3, sp, #48	@ 0x30
 800a416:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a41a:	e72b      	b.n	800a274 <__kernel_rem_pio2+0x298>
 800a41c:	ab0c      	add	r3, sp, #48	@ 0x30
 800a41e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a422:	f7f5 ffef 	bl	8000404 <__aeabi_i2d>
 800a426:	4632      	mov	r2, r6
 800a428:	463b      	mov	r3, r7
 800a42a:	f7f6 f855 	bl	80004d8 <__aeabi_dmul>
 800a42e:	464a      	mov	r2, r9
 800a430:	e868 0102 	strd	r0, r1, [r8], #-8
 800a434:	4653      	mov	r3, sl
 800a436:	4630      	mov	r0, r6
 800a438:	4639      	mov	r1, r7
 800a43a:	f7f6 f84d 	bl	80004d8 <__aeabi_dmul>
 800a43e:	3d01      	subs	r5, #1
 800a440:	4606      	mov	r6, r0
 800a442:	460f      	mov	r7, r1
 800a444:	e727      	b.n	800a296 <__kernel_rem_pio2+0x2ba>
 800a446:	f8dd c018 	ldr.w	ip, [sp, #24]
 800a44a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a44e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800a452:	f8cd c018 	str.w	ip, [sp, #24]
 800a456:	f7f6 f83f 	bl	80004d8 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4648      	mov	r0, r9
 800a460:	4651      	mov	r1, sl
 800a462:	f7f5 fe83 	bl	800016c <__adddf3>
 800a466:	4681      	mov	r9, r0
 800a468:	468a      	mov	sl, r1
 800a46a:	3701      	adds	r7, #1
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	429f      	cmp	r7, r3
 800a470:	dc01      	bgt.n	800a476 <__kernel_rem_pio2+0x49a>
 800a472:	42be      	cmp	r6, r7
 800a474:	dae7      	bge.n	800a446 <__kernel_rem_pio2+0x46a>
 800a476:	ab48      	add	r3, sp, #288	@ 0x120
 800a478:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a47c:	e9c6 9a00 	strd	r9, sl, [r6]
 800a480:	3d01      	subs	r5, #1
 800a482:	e70c      	b.n	800a29e <__kernel_rem_pio2+0x2c2>
 800a484:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a486:	2b02      	cmp	r3, #2
 800a488:	dc09      	bgt.n	800a49e <__kernel_rem_pio2+0x4c2>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	dc2c      	bgt.n	800a4e8 <__kernel_rem_pio2+0x50c>
 800a48e:	d04e      	beq.n	800a52e <__kernel_rem_pio2+0x552>
 800a490:	9b05      	ldr	r3, [sp, #20]
 800a492:	f003 0007 	and.w	r0, r3, #7
 800a496:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d1f5      	bne.n	800a490 <__kernel_rem_pio2+0x4b4>
 800a4a4:	ab48      	add	r3, sp, #288	@ 0x120
 800a4a6:	441c      	add	r4, r3
 800a4a8:	4625      	mov	r5, r4
 800a4aa:	46da      	mov	sl, fp
 800a4ac:	f1ba 0f00 	cmp.w	sl, #0
 800a4b0:	dc63      	bgt.n	800a57a <__kernel_rem_pio2+0x59e>
 800a4b2:	4625      	mov	r5, r4
 800a4b4:	46da      	mov	sl, fp
 800a4b6:	f1ba 0f01 	cmp.w	sl, #1
 800a4ba:	dc7b      	bgt.n	800a5b4 <__kernel_rem_pio2+0x5d8>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f1bb 0f01 	cmp.w	fp, #1
 800a4c4:	f300 8093 	bgt.w	800a5ee <__kernel_rem_pio2+0x612>
 800a4c8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a4cc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f040 8092 	bne.w	800a5fc <__kernel_rem_pio2+0x620>
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	e9c3 7800 	strd	r7, r8, [r3]
 800a4de:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a4e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a4e6:	e7d3      	b.n	800a490 <__kernel_rem_pio2+0x4b4>
 800a4e8:	465d      	mov	r5, fp
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	ab48      	add	r3, sp, #288	@ 0x120
 800a4f0:	441c      	add	r4, r3
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	da32      	bge.n	800a55c <__kernel_rem_pio2+0x580>
 800a4f6:	9b00      	ldr	r3, [sp, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d035      	beq.n	800a568 <__kernel_rem_pio2+0x58c>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a502:	9c04      	ldr	r4, [sp, #16]
 800a504:	2501      	movs	r5, #1
 800a506:	e9c4 2300 	strd	r2, r3, [r4]
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a512:	f7f5 fe29 	bl	8000168 <__aeabi_dsub>
 800a516:	ac48      	add	r4, sp, #288	@ 0x120
 800a518:	45ab      	cmp	fp, r5
 800a51a:	da28      	bge.n	800a56e <__kernel_rem_pio2+0x592>
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	b113      	cbz	r3, 800a526 <__kernel_rem_pio2+0x54a>
 800a520:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a524:	4619      	mov	r1, r3
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a52c:	e7b0      	b.n	800a490 <__kernel_rem_pio2+0x4b4>
 800a52e:	2000      	movs	r0, #0
 800a530:	2100      	movs	r1, #0
 800a532:	ab48      	add	r3, sp, #288	@ 0x120
 800a534:	441c      	add	r4, r3
 800a536:	f1bb 0f00 	cmp.w	fp, #0
 800a53a:	da08      	bge.n	800a54e <__kernel_rem_pio2+0x572>
 800a53c:	9b00      	ldr	r3, [sp, #0]
 800a53e:	b113      	cbz	r3, 800a546 <__kernel_rem_pio2+0x56a>
 800a540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a544:	4619      	mov	r1, r3
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	e9c3 0100 	strd	r0, r1, [r3]
 800a54c:	e7a0      	b.n	800a490 <__kernel_rem_pio2+0x4b4>
 800a54e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a552:	f7f5 fe0b 	bl	800016c <__adddf3>
 800a556:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a55a:	e7ec      	b.n	800a536 <__kernel_rem_pio2+0x55a>
 800a55c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a560:	f7f5 fe04 	bl	800016c <__adddf3>
 800a564:	3d01      	subs	r5, #1
 800a566:	e7c4      	b.n	800a4f2 <__kernel_rem_pio2+0x516>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	e7c9      	b.n	800a502 <__kernel_rem_pio2+0x526>
 800a56e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800a572:	f7f5 fdfb 	bl	800016c <__adddf3>
 800a576:	3501      	adds	r5, #1
 800a578:	e7ce      	b.n	800a518 <__kernel_rem_pio2+0x53c>
 800a57a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a57e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a582:	4640      	mov	r0, r8
 800a584:	4649      	mov	r1, r9
 800a586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a58a:	f7f5 fdef 	bl	800016c <__adddf3>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4606      	mov	r6, r0
 800a594:	460f      	mov	r7, r1
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f5 fde5 	bl	8000168 <__aeabi_dsub>
 800a59e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a2:	f7f5 fde3 	bl	800016c <__adddf3>
 800a5a6:	e865 0102 	strd	r0, r1, [r5], #-8
 800a5aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ae:	e9c5 6700 	strd	r6, r7, [r5]
 800a5b2:	e77b      	b.n	800a4ac <__kernel_rem_pio2+0x4d0>
 800a5b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800a5bc:	4640      	mov	r0, r8
 800a5be:	4649      	mov	r1, r9
 800a5c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5c4:	f7f5 fdd2 	bl	800016c <__adddf3>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	460f      	mov	r7, r1
 800a5d0:	4640      	mov	r0, r8
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	f7f5 fdc8 	bl	8000168 <__aeabi_dsub>
 800a5d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5dc:	f7f5 fdc6 	bl	800016c <__adddf3>
 800a5e0:	e865 0102 	strd	r0, r1, [r5], #-8
 800a5e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5e8:	e9c5 6700 	strd	r6, r7, [r5]
 800a5ec:	e763      	b.n	800a4b6 <__kernel_rem_pio2+0x4da>
 800a5ee:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800a5f2:	f7f5 fdbb 	bl	800016c <__adddf3>
 800a5f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5fa:	e761      	b.n	800a4c0 <__kernel_rem_pio2+0x4e4>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	9a04      	ldr	r2, [sp, #16]
 800a600:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a604:	601f      	str	r7, [r3, #0]
 800a606:	605c      	str	r4, [r3, #4]
 800a608:	609d      	str	r5, [r3, #8]
 800a60a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a60e:	60d3      	str	r3, [r2, #12]
 800a610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a614:	6110      	str	r0, [r2, #16]
 800a616:	6153      	str	r3, [r2, #20]
 800a618:	e73a      	b.n	800a490 <__kernel_rem_pio2+0x4b4>
 800a61a:	bf00      	nop
 800a61c:	41700000 	.word	0x41700000
 800a620:	3e700000 	.word	0x3e700000
 800a624:	00000000 	.word	0x00000000

0800a628 <scalbn>:
 800a628:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a62c:	4616      	mov	r6, r2
 800a62e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a632:	4683      	mov	fp, r0
 800a634:	468c      	mov	ip, r1
 800a636:	460b      	mov	r3, r1
 800a638:	b982      	cbnz	r2, 800a65c <scalbn+0x34>
 800a63a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a63e:	4303      	orrs	r3, r0
 800a640:	d039      	beq.n	800a6b6 <scalbn+0x8e>
 800a642:	4b2f      	ldr	r3, [pc, #188]	@ (800a700 <scalbn+0xd8>)
 800a644:	2200      	movs	r2, #0
 800a646:	f7f5 ff47 	bl	80004d8 <__aeabi_dmul>
 800a64a:	4b2e      	ldr	r3, [pc, #184]	@ (800a704 <scalbn+0xdc>)
 800a64c:	4683      	mov	fp, r0
 800a64e:	429e      	cmp	r6, r3
 800a650:	468c      	mov	ip, r1
 800a652:	da0d      	bge.n	800a670 <scalbn+0x48>
 800a654:	a326      	add	r3, pc, #152	@ (adr r3, 800a6f0 <scalbn+0xc8>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	e01b      	b.n	800a694 <scalbn+0x6c>
 800a65c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a660:	42ba      	cmp	r2, r7
 800a662:	d109      	bne.n	800a678 <scalbn+0x50>
 800a664:	4602      	mov	r2, r0
 800a666:	f7f5 fd81 	bl	800016c <__adddf3>
 800a66a:	4683      	mov	fp, r0
 800a66c:	468c      	mov	ip, r1
 800a66e:	e022      	b.n	800a6b6 <scalbn+0x8e>
 800a670:	460b      	mov	r3, r1
 800a672:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a676:	3a36      	subs	r2, #54	@ 0x36
 800a678:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a67c:	428e      	cmp	r6, r1
 800a67e:	dd0c      	ble.n	800a69a <scalbn+0x72>
 800a680:	a31d      	add	r3, pc, #116	@ (adr r3, 800a6f8 <scalbn+0xd0>)
 800a682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a686:	461c      	mov	r4, r3
 800a688:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a68c:	f361 74df 	bfi	r4, r1, #31, #1
 800a690:	4621      	mov	r1, r4
 800a692:	481d      	ldr	r0, [pc, #116]	@ (800a708 <scalbn+0xe0>)
 800a694:	f7f5 ff20 	bl	80004d8 <__aeabi_dmul>
 800a698:	e7e7      	b.n	800a66a <scalbn+0x42>
 800a69a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a69e:	4432      	add	r2, r6
 800a6a0:	428a      	cmp	r2, r1
 800a6a2:	dced      	bgt.n	800a680 <scalbn+0x58>
 800a6a4:	2a00      	cmp	r2, #0
 800a6a6:	dd0a      	ble.n	800a6be <scalbn+0x96>
 800a6a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6b4:	46ac      	mov	ip, r5
 800a6b6:	4658      	mov	r0, fp
 800a6b8:	4661      	mov	r1, ip
 800a6ba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a6be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a6c2:	da09      	bge.n	800a6d8 <scalbn+0xb0>
 800a6c4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a6c8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a6cc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a6d0:	480e      	ldr	r0, [pc, #56]	@ (800a70c <scalbn+0xe4>)
 800a6d2:	f041 011f 	orr.w	r1, r1, #31
 800a6d6:	e7bd      	b.n	800a654 <scalbn+0x2c>
 800a6d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a6dc:	3236      	adds	r2, #54	@ 0x36
 800a6de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a6e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	4b08      	ldr	r3, [pc, #32]	@ (800a710 <scalbn+0xe8>)
 800a6ee:	e7d1      	b.n	800a694 <scalbn+0x6c>
 800a6f0:	c2f8f359 	.word	0xc2f8f359
 800a6f4:	01a56e1f 	.word	0x01a56e1f
 800a6f8:	8800759c 	.word	0x8800759c
 800a6fc:	7e37e43c 	.word	0x7e37e43c
 800a700:	43500000 	.word	0x43500000
 800a704:	ffff3cb0 	.word	0xffff3cb0
 800a708:	8800759c 	.word	0x8800759c
 800a70c:	c2f8f359 	.word	0xc2f8f359
 800a710:	3c900000 	.word	0x3c900000
 800a714:	00000000 	.word	0x00000000

0800a718 <floor>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a720:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800a724:	2e13      	cmp	r6, #19
 800a726:	4602      	mov	r2, r0
 800a728:	460b      	mov	r3, r1
 800a72a:	460c      	mov	r4, r1
 800a72c:	4605      	mov	r5, r0
 800a72e:	4680      	mov	r8, r0
 800a730:	dc35      	bgt.n	800a79e <floor+0x86>
 800a732:	2e00      	cmp	r6, #0
 800a734:	da17      	bge.n	800a766 <floor+0x4e>
 800a736:	a334      	add	r3, pc, #208	@ (adr r3, 800a808 <floor+0xf0>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	f7f5 fd16 	bl	800016c <__adddf3>
 800a740:	2200      	movs	r2, #0
 800a742:	2300      	movs	r3, #0
 800a744:	f7f6 f958 	bl	80009f8 <__aeabi_dcmpgt>
 800a748:	b150      	cbz	r0, 800a760 <floor+0x48>
 800a74a:	2c00      	cmp	r4, #0
 800a74c:	da57      	bge.n	800a7fe <floor+0xe6>
 800a74e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a752:	432c      	orrs	r4, r5
 800a754:	2500      	movs	r5, #0
 800a756:	42ac      	cmp	r4, r5
 800a758:	4c2d      	ldr	r4, [pc, #180]	@ (800a810 <floor+0xf8>)
 800a75a:	bf08      	it	eq
 800a75c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a760:	4623      	mov	r3, r4
 800a762:	462a      	mov	r2, r5
 800a764:	e024      	b.n	800a7b0 <floor+0x98>
 800a766:	4f2b      	ldr	r7, [pc, #172]	@ (800a814 <floor+0xfc>)
 800a768:	4137      	asrs	r7, r6
 800a76a:	ea01 0c07 	and.w	ip, r1, r7
 800a76e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a772:	d01d      	beq.n	800a7b0 <floor+0x98>
 800a774:	a324      	add	r3, pc, #144	@ (adr r3, 800a808 <floor+0xf0>)
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	f7f5 fcf7 	bl	800016c <__adddf3>
 800a77e:	2200      	movs	r2, #0
 800a780:	2300      	movs	r3, #0
 800a782:	f7f6 f939 	bl	80009f8 <__aeabi_dcmpgt>
 800a786:	2800      	cmp	r0, #0
 800a788:	d0ea      	beq.n	800a760 <floor+0x48>
 800a78a:	2c00      	cmp	r4, #0
 800a78c:	bfbe      	ittt	lt
 800a78e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a792:	4133      	asrlt	r3, r6
 800a794:	18e4      	addlt	r4, r4, r3
 800a796:	2500      	movs	r5, #0
 800a798:	ea24 0407 	bic.w	r4, r4, r7
 800a79c:	e7e0      	b.n	800a760 <floor+0x48>
 800a79e:	2e33      	cmp	r6, #51	@ 0x33
 800a7a0:	dd0a      	ble.n	800a7b8 <floor+0xa0>
 800a7a2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a7a6:	d103      	bne.n	800a7b0 <floor+0x98>
 800a7a8:	f7f5 fce0 	bl	800016c <__adddf3>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b8:	f04f 3cff 	mov.w	ip, #4294967295
 800a7bc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a7c0:	fa2c f707 	lsr.w	r7, ip, r7
 800a7c4:	4207      	tst	r7, r0
 800a7c6:	d0f3      	beq.n	800a7b0 <floor+0x98>
 800a7c8:	a30f      	add	r3, pc, #60	@ (adr r3, 800a808 <floor+0xf0>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 fccd 	bl	800016c <__adddf3>
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f7f6 f90f 	bl	80009f8 <__aeabi_dcmpgt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d0c0      	beq.n	800a760 <floor+0x48>
 800a7de:	2c00      	cmp	r4, #0
 800a7e0:	da0a      	bge.n	800a7f8 <floor+0xe0>
 800a7e2:	2e14      	cmp	r6, #20
 800a7e4:	d101      	bne.n	800a7ea <floor+0xd2>
 800a7e6:	3401      	adds	r4, #1
 800a7e8:	e006      	b.n	800a7f8 <floor+0xe0>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a7f0:	40b3      	lsls	r3, r6
 800a7f2:	441d      	add	r5, r3
 800a7f4:	4545      	cmp	r5, r8
 800a7f6:	d3f6      	bcc.n	800a7e6 <floor+0xce>
 800a7f8:	ea25 0507 	bic.w	r5, r5, r7
 800a7fc:	e7b0      	b.n	800a760 <floor+0x48>
 800a7fe:	2500      	movs	r5, #0
 800a800:	462c      	mov	r4, r5
 800a802:	e7ad      	b.n	800a760 <floor+0x48>
 800a804:	f3af 8000 	nop.w
 800a808:	8800759c 	.word	0x8800759c
 800a80c:	7e37e43c 	.word	0x7e37e43c
 800a810:	bff00000 	.word	0xbff00000
 800a814:	000fffff 	.word	0x000fffff

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
